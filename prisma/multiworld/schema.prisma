generator kysely {
    provider = "prisma-kysely"

    output       = "../../src/db"
    fileName     = "types.ts"
    enumFileName = "enums.ts"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// players

model account {
    id Int @id @default(autoincrement())

    username String  @unique
    password String
    email    String?

    registration_ip   String?
    registration_date DateTime @default(now())

    // current login
    logged_in  Int       @default(0)
    login_time DateTime?

    // last logout
    logged_out  Int       @default(0)
    logout_time DateTime?

    muted_until  DateTime?
    banned_until DateTime?

    staffmodlevel Int @default(0)

    notes         String?   @db.Text
    notes_updated DateTime?

    members       Boolean  @default(true)
}

model session {
    uuid String @id

    account_id Int
    profile    String

    world     Int
    timestamp DateTime
    uid       Int
    ip        String?
}

// attempts (monitoring abuse)
model login {
    uuid       String   @id
    account_id Int
    world      Int
    timestamp  DateTime
    uid        Int
    ip         String?
}

model ipban {
    ip String @id
}

// todo: rename this to e.g. session_log one day
model account_session {
    id Int @id @default(autoincrement())

    account_id   Int
    world        Int    @default(0)
    profile      String @default("main")
    session_uuid String

    timestamp  DateTime
    coord      Int
    event      String
    event_type Int      @default(-1)
}

// website

model newspost {
    id Int @id @default(autoincrement())

    category Int
    title    String
    content  String  @db.MediumText
    slug     String?

    created DateTime @default(now())
    updated DateTime @default(now()) @updatedAt
}

model hiscore {
    account_id Int
    profile    String   @default("main")
    type       Int
    level      Int
    value      Int
    date       DateTime @default(now()) @updatedAt

    @@id([account_id, profile, type])
}

// upped value size to 8 bytes used for larger values e.g. total xp tracking
model hiscore_large {
    account_id Int
    profile    String   @default("main")
    type       Int
    level      Int
    value      BigInt
    date       DateTime @default(now()) @updatedAt

    @@id([account_id, profile, type])
}

// social

model friendlist {
    account_id        Int
    friend_account_id Int
    
    created           DateTime  @default(now())

    @@id([account_id, friend_account_id])
}

model ignorelist {
    account_id        Int
    value             String
    created           DateTime  @default(now())

    @@id([account_id, value])
}

model public_chat {
    id Int @id @default(autoincrement())

    account_id Int
    profile    String

    world     Int
    timestamp DateTime
    coord     Int
    message   String
}

model private_chat {
    id Int @id @default(autoincrement())

    account_id Int
    profile    String

    timestamp     DateTime
    coord         Int
    to_account_id Int
    message       String
}

model report {
    id Int @id @default(autoincrement())

    account_id Int
    profile    String

    world     Int
    timestamp DateTime
    coord     Int

    offender String
    reason   Int
}

model input_report {
    id              Int @id @default(autoincrement())
    account_id      Int
    timestamp       DateTime
    session_uuid    String
}

model input_report_event {
    input_report_id Int
    seq             Int
    
    input_type      Int    @default(-1)
    delta           Int
    coord           Int
    mouse_x         Int?
    mouse_y         Int?
    key_code        Int?
    
    @@id([input_report_id, seq])
}

model input_report_event_raw {
    input_report_id Int
    seq             Int

    coord           Int
    data            Bytes

    @@id([input_report_id, seq])
}