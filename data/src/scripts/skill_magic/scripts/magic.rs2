[proc,get_spell_data](int $spell)(dbrow)
// look for spell in db
db_find(magic_spell_table:spell, $spell);
def_dbrow $spell_data = db_findnext;
if ($spell_data = null) {
    error("$spell_data is null.");
}
return ($spell_data);

// takes all 3 runes and their counts as arguments, checks if player has required runes
// accounts for staff and returns runes and their adjusted counts.
[proc,check_spell_requirements](dbrow $spell_data)(boolean)
// check if members
if (db_getfield($spell_data, magic_spell_table:members, 0) = true & map_members = false) {
    // Camelot teleport: https://youtu.be/18eDNqcur2I
    // Current osrs combat spells have "You need to be on a members' world to cast that spell."
    // But i think this is after mems messages rework
    mes("You need to be on a members' server to use this spell.");
    return (false);
}
// check if high enough level
if (stat(magic) < db_getfield($spell_data, magic_spell_table:levelrequired, 0)) {
    mes("Your Magic level is not high enough for this spell.");
    return (false);
}
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
$rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~staff_runes($spell_data);
// check if player has required runes
if (inv_total(inv, $rune1) < $rune_count1 & $rune1 ! null) {
    mes("You do not have enough <~string_removeright(oc_name($rune1), 5)> Runes to cast this spell.");
    return (false);
}
if (inv_total(inv, $rune2) < $rune_count2 & $rune2 ! null) {
    mes("You do not have enough <~string_removeright(oc_name($rune2), 5)> Runes to cast this spell.");
    return (false);
}
if (inv_total(inv, $rune3) < $rune_count3 & $rune3 ! null) {
    mes("You do not have enough <~string_removeright(oc_name($rune3), 5)> Runes to cast this spell.");
    return (false);
}
// check if worn is correct
if (db_getfieldcount($spell_data, magic_spell_table:wornrequired) > 0 & inv_total(worn, db_getfield($spell_data, magic_spell_table:wornrequired, 0)) < 1) {
    mes(db_getfield($spell_data, magic_spell_table:worn_reqmessage, 0));
    return(false);
}
return (true);

[proc,staff_runes](dbrow $spell_data)(namedobj, int, namedobj, int, namedobj, int)
// define spells
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
$rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = db_getfield($spell_data, magic_spell_table:runesrequired, 0);
// check if wielding staff and look for staff in db
def_obj $staff = inv_getobj(worn, ^wearpos_rhand);
db_find(magic_staff_table:staff, $staff);
def_dbrow $staff_data = db_findnext;
def_namedobj $staff_rune = null;
if ($staff_data ! null) {
    $staff_rune = db_getfield($staff_data, magic_staff_table:rune, 0);
}
// remove the number of runes required if the rune matches with staff rune
if ($staff_rune = $rune1) {
    $rune_count1 = null;
}
if ($staff_rune = $rune2) {
    $rune_count2 = null;
}
if ($staff_rune = $rune3) {
    $rune_count3 = null;
}
return($rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3);

[proc,delete_spell_runes](dbrow $spell_data)
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
$rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~staff_runes($spell_data);
if ($rune_count1 > 0) {
    inv_del(inv, $rune1, $rune_count1);
}
if ($rune_count2 > 0) {
    inv_del(inv, $rune2, $rune_count2);
}
if ($rune_count3 > 0) {
    inv_del(inv, $rune3, $rune_count3);
}

[proc,give_spell_xp](dbrow $spell_data)
stat_advance(magic, db_getfield($spell_data, magic_spell_table:experience, 0));

// spells that convert one item into another are generalized
// spell dbrows with the convertobj field are spells that convertobj
[proc,magic_spell_search_convertobj](dbrow $data, obj $obj)(namedobj, seq, spotanim, synth)
def_int $i = 0;
while ($i <= db_getfieldcount($data, magic_spell_table:convertobj)) {
    def_obj $initial_obj;
    def_namedobj $final_obj;
    def_seq $seq;
    def_spotanim $spotanim;
    def_synth $sound;
    $initial_obj, $final_obj, $seq, $spotanim, $sound = db_getfield($data, magic_spell_table:convertobj, $i);
    if ($initial_obj = $obj) {
        return($final_obj, $seq, $spotanim, $sound);
    } else {
        $i = calc($i + 1);
    }
}
return(null, null, null, null);

// for opheldt spells that have specific messages for specific items
[proc,magic_spell_specificobj_reqmessage](dbrow $data, obj $obj)
def_int $i = 0;
while ($i <= db_getfieldcount($data, magic_spell_table:specificobj_reqmessage)) {
    def_obj $db_obj;
    def_string $string;
    $db_obj, $string = db_getfield($data, magic_spell_table:specificobj_reqmessage, $i);
    if ($db_obj = $obj) {
        mes($string);
        @exit;
    }
    $i = calc($i + 1);
}
return;