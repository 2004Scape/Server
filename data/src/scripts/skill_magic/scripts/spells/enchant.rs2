[opheldt,magic:enchant_lvl1]@magic_spell_enchant(^enchant_lvl1, last_slot);
[opheldt,magic:enchant_lvl2]@magic_spell_enchant(^enchant_lvl2, last_slot);
[opheldt,magic:enchant_lvl3]@magic_spell_enchant(^enchant_lvl3, last_slot);
[opheldt,magic:enchant_lvl4]@magic_spell_enchant(^enchant_lvl4, last_slot);
[opheldt,magic:enchant_lvl5]@magic_spell_enchant(^enchant_lvl5, last_slot);

[label,magic_spell_enchant](int $spell, int $slot)
def_obj $initial_obj = inv_getobj(inv, $slot);
// if player has casted a spell recently then return
if (inv_total(inv, $initial_obj) < 1) {
    return;
}
// look for spell in db
def_dbrow $spell_data = ~get_spell_data($spell);
if (~check_spell_requirements($spell_data) = false) {
    return;
}
def_namedobj $final_obj;
def_seq $anim;
def_spotanim $spotanim;
def_synth $sound;
$final_obj, $anim, $spotanim, $sound = ~magic_spell_search_convertobj($spell_data, $initial_obj);
// if you cant enchant the item, display this message
if ($final_obj = null) {
    // this checks if initial_obj has a specific message with the current spell
    ~magic_spell_specificobj_reqmessage($spell_data, $initial_obj); 
    mes(db_getfield($spell_data, magic_spell_table:additional_reqmessage, 0));
    return;
}
// if they use a spell on a valid obj, but its p2p check it here
// --
// i know this isnt how jagex does it, since ring of forging is f2p in osrs but unenchantable in f2p.
// They likely have another label for enchanting rings
if (oc_members($final_obj) = true & map_members = false) {
    // not sure what the members message is
    mes("You can only make that on a members' server.");
    return;
}
// enchanting always sets slot instead of deleting
inv_setslot(inv, $slot, $final_obj, 1);
~delete_spell_runes($spell_data);
~give_spell_xp($spell_data);

anim($anim, 0);
spotanim_pl($spotanim, 92, 0);
sound_synth($sound, 0, 0);
if ($initial_obj = dragonstone_amulet) {
    mes("You successfully enchant the dragonstone amulet.");
} else {
    mes("You successfully enchant the <lowercase(oc_name($initial_obj))>.");
}
p_delay(2);
if (afk_event = ^true) {
    ~macro_event_general_spawn(~macro_event_set_random);
    return;
}

[opheld4,amulet_of_glory_4] @amulet_of_glory_interface("Your amulet has three charges left.");
[opheld4,amulet_of_glory_3] @amulet_of_glory_interface("Your amulet has two charges left.");
[opheld4,amulet_of_glory_2] @amulet_of_glory_interface("Your amulet has one charge left.");
[opheld4,amulet_of_glory_1] @amulet_of_glory_interface("You use your amulet's last charge.");
[opheld4,amulet_of_glory] mes("The amulet has lost its charge.");

[label,amulet_of_glory_interface](string $message)
def_obj $item = last_item;
def_int $slot = last_slot;
// https://youtu.be/Zv7Wh3TIDOc
mes("You rub the amulet...");
// Space after "to" is intentional. Based off of this screenshot: https://storage.googleapis.com/tannerdino/images/rstransport9.gif
def_int $choice = ~p_choice5_header("Edgeville.", 1, "Karamja.", 2, "Draynor Village.", 3, "Al Kharid.", 4, "Nowhere.", 5, "Where would you like to teleport to ?");
// https://i.imgur.com/HsKKBnr.png
if ($choice = 5) {
    mes("You remain where you were.");
    return;
}
if (~wilderness_level(coord) > 30) {
    // osrs
    mes("A mysterious force blocks your teleport.");
    mes("You can't use this teleport after level 30 wilderness.");
    return;
}
if (~pre_tele_checks(coord) = false) {
    return;
}
mes($message);
switch_int($choice) {
    case 1: ~player_teleport_normal(0_48_54_15_40);
    case 2: ~player_teleport_normal(0_45_49_38_40);
    case 3: ~player_teleport_normal(0_48_50_33_51);
    case 4: ~player_teleport_normal(0_51_49_29_27);
}
inv_setslot(inv, $slot, oc_param($item, next_obj_stage), 1);


[opheld4,_category_136]
// https://youtu.be/vGH1Nyp4IBU
mes("You rub the ring...");
def_obj $item = last_item;
def_int $slot = last_slot;
if (~wilderness_level(coord) > 20) {
    // yes it actually says this in osrs
    mes("A mysterious force blocks your teleport spell!");
    mes("You can't use this teleport after level 20 wilderness.");
    return;
}
if (~pre_tele_checks(coord) = false) {
    return;
}
~player_teleport_normal(map_findsquare(0_51_50_51_35, 0, 2, ^map_findsquare_lineofwalk));
def_namedobj $new_ring = oc_param($item, next_obj_stage);
if ($new_ring = null) {
    inv_delslot(inv, $slot);
    mes("Your ring of dueling crumbles to dust.");
} else {
    inv_setslot(inv, $slot, $new_ring, 1);
    mes("Your ring of dueling has <~pluralise(oc_param($new_ring, charges), "use")> left.");
}

[proc,ring_of_recoil_lose_charge](int $recoil_damage)
%ring_of_recoil = add(max(%ring_of_recoil, 0), $recoil_damage);
if (%ring_of_recoil >= 40) {
    %ring_of_recoil = 0;
    inv_delslot(worn, ^wearpos_ring);
    mes("Your Ring of Recoil has shattered.");
}

[proc,ring_of_life_check]
if (p_finduid(uid) = true) {
    if (inv_getobj(worn, ^wearpos_ring) ! ring_of_life | ~wilderness_level(coord) > 30 | ~pre_tele_checks(coord) = false) {
        return;
    }
    if (stat(hitpoints) <= scale(10, 100, stat_base(hitpoints))) {
        mes("Your Ring of Life saves you and is destroyed in the process.");
        inv_delslot(worn, ^wearpos_ring);
        ~player_teleport_normal(map_findsquare(0_50_50_21_18, 0, 2, ^map_findsquare_lineofwalk));
    }
}
