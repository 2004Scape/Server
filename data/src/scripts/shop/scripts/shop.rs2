[opnpc3,_shop_keeper] ~openshop_activenpc;

[proc,openshop](inv $shop, int $shop_buy, int $shop_sell, int $shop_haggle, string $title)
%shop = $shop;
%shop_buy = $shop_buy;
%shop_sell = $shop_sell;
%shop_haggle = $shop_haggle;
if_settext(shop_template:com_76, $title);
inv_transmit(inv, shop_template_side:inv);
inv_transmit($shop, shop_template:inv);
if_openmain_side(shop_template, shop_template_side);

[proc,openshop_activenpc]
%shop = npc_param(owned_shop);
%shop_buy = npc_param(shop_buy_multiplier);
%shop_sell = npc_param(shop_sell_multiplier);
%shop_haggle = npc_param(shop_delta);
if_settext(shop_template:com_76, npc_param(shop_title));
inv_transmit(inv, shop_template_side:inv);
inv_transmit(%shop, shop_template:inv);
if_openmain_side(shop_template, shop_template_side);

[if_close,shop_template]
inv_stoptransmit(shop_template_side:inv);
inv_stoptransmit(shop_template:inv);

[proc,can_sell_obj](obj $item)(boolean)
def_boolean $item_is_tradable = oc_tradeable(oc_uncert($item));
if ($item = coins) {
    mes("You can't sell this item to a shop.");
    return (false);
} else if ($item_is_tradable = false | (map_members = false & oc_members($item) = true)) {
    mes("You can't sell this item.");
    return (false);
} else if ((%shop = generalshop3 & $item = silk) | inv_allstock(%shop) = false & inv_stockbase(%shop, oc_uncert($item)) = -1) { // can't sell silk to al-kharid general store
    mes("You can't sell this item to this shop.");
    return (false);
}
return (true);

// sell value
[inv_button1,shop_template_side:inv]
def_obj $item = oc_uncert(inv_getobj(inv, last_slot));
def_string $item_name = oc_name($item);
def_int $item_value = ~adjusted_item_cost_selling($item, inv_total(%shop, $item));
if(~can_sell_obj($item) = false) {
    return;
}
mes("<$item_name>: shop will buy for <tostring($item_value)>gp.");

// Buy value
[inv_button1,shop_template:inv]
def_obj $item = inv_getobj(%shop, last_slot);
def_string $item_name = oc_name($item);
def_int $item_value = ~adjusted_item_cost_buying($item, inv_total(%shop, $item));
mes("<$item_name>: currently costs <tostring($item_value)>gp.");

// Buy an item from the shop
[label,buy_item](obj $obj, int $amount)
def_int $i = 0;
def_int $current_gp = inv_total(inv, coins);
def_int $shop_stock = calc(inv_total(%shop, $obj));
def_int $space_overflow = inv_itemspace2(inv, $obj, $amount, inv_size(inv));
def_int $total_cost = 0;
// Since pricing and stock will change constantly we will have to iterate here to calc
while($i < $amount) {
    def_int $added_amt = ~adjusted_item_cost_buying($obj, calc($shop_stock - $i));
    def_int $current_stock = calc($shop_stock - $i);
    if(calc($total_cost + $added_amt) > $current_gp) {
        mes("You don't have enough coins.");
        return;
    }
    if($current_stock <= 0) {
        mes("The shop has run out of stock.");
        return;
    }
    // do calc($total_cost + $added_amt) ! $current_gp for the case where the exact gp required for the purchase
    // is used. Not sure if this should be the case in 2004
    if($space_overflow >= calc($amount - $i) & calc($total_cost + $added_amt) ! $current_gp) {
        mes("You don't have enough inventory space.");
        return;
    }
    $total_cost = calc($total_cost + $added_amt);
    inv_del(inv, coins, $added_amt);
    inv_moveitem_uncert(%shop, inv, $obj, 1);
    $i = calc($i + 1);
}

// Sell an item to the shop
[label,sell_item](obj $obj, int $amount)
def_int $shop_total = inv_total(%shop, oc_uncert($obj));
def_int $total_value = 0;
def_int $sell_amount = ~calculate_items_amount_sold($obj, $amount);
if(~can_sell_obj($obj) = false) {
    return;
}
// Check if you will have space in your inventory to hold the coins after selling
if(inv_itemspace(inv, coins, $sell_amount, inv_size(inv)) = false & oc_stackable($obj) = true & inv_total(inv, $obj) > $sell_amount) {
    mes("You don't have enough inventory space.");
    return;
}
// Check if the shop will have enough space to hold the obj
if(inv_itemspace(%shop, oc_uncert($obj), $sell_amount, inv_size(%shop)) = false) {
    mes("The shop has run out of space.");
    return;
}
// Iteration to calc the total value of the sale
def_int $i = 0;
while($i < $sell_amount) {
    def_int $added_amt = ~adjusted_item_cost_selling(oc_uncert($obj), calc($shop_total + $i));
    $total_value = calc($total_value + $added_amt);
    $i = calc($i + 1);
}
// now perform the transaction 
inv_moveitem_uncert(inv, %shop, $obj, $sell_amount);
if($total_value > 0) {
    inv_add(inv, coins, $total_value);
}

[proc,price_mod](inv $inv, int $diff, obj $obj)(int)
def_int $base = inv_stockbase($inv, $obj);
if($base = -1) {
    return ($diff);
}
return (calc($diff - $base));

// Purchase cost at a specifc stack count
[proc,adjusted_item_cost_buying](obj $obj, int $diff)(int)
def_int $cost = oc_cost($obj);
def_int $value = ~calc_shop_value($cost, %shop_haggle, %shop_sell, ~price_mod(%shop, $diff, $obj));
// Unlike sell values, shop purchase values can't be 0 (I believe...), not entirely sure if this is how
// it's supposed to be handled or if the formula needs to be altered somehow
if($value < 1) { 
    $value = 1;
}
return ($value);

// Sell value at a specific stack count
[proc,adjusted_item_cost_selling](obj $obj, int $diff)(int)
def_int $cost = oc_cost($obj);
return (~calc_shop_value($cost, %shop_haggle, %shop_buy, ~price_mod(inv, $diff, $obj)));

// Calculate the amount of items a player has to sell relative to a desired amount
[proc,calculate_items_amount_sold](obj $item, int $sell_amount)(int)
def_int $player_amount = inv_total(inv, $item);
if ($sell_amount > $player_amount) {
    return ($player_amount);
}
return ($sell_amount);

// Sell buttons
[inv_button2,shop_template_side:inv] @shop_request(inv, last_slot, 1);
[inv_button3,shop_template_side:inv] @shop_request(inv, last_slot, 5);
[inv_button4,shop_template_side:inv] @shop_request(inv, last_slot, 10);

// Buy buttons
[inv_button2,shop_template:inv] @shop_request(%shop, last_slot, 1);
[inv_button3,shop_template:inv] @shop_request(%shop, last_slot, 5);
[inv_button4,shop_template:inv] @shop_request(%shop, last_slot, 10);

// verify a request to buy or sell from a shop, and then perform the transaction if all passed
[label,shop_request](inv $shop_inv, int $slot, int $amount)
// Check if the slot was empty.
def_obj $item = inv_getobj($shop_inv, $slot);
if($shop_inv = %shop) {
    @buy_item($item, $amount);
} else {
    @sell_item($item, $amount);
}

// Calculate the gp value for the shop operation
[proc,calc_shop_value](int $base_cost, int $shophaggle, int $shopbuy, int $int3)(int)
def_int $int4 = 0;
def_int $int5 = min(1000, max(-5000, calc($int3 * $shophaggle)));
$int5 = max(100, calc($shopbuy - $int5));
$int4 = scale($int5, 1000, $base_cost);
if ($int4 < 0) {
    $int4 = 2000000000;
    error("Cost overflowed with base_cost=<tostring($base_cost)>, for %shopbuy=<tostring($shopbuy)> and %shophaggle=<tostring($shophaggle)>. Corrected to 2 billion.");
}
return($int4);