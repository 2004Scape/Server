[oploc1,_tree] @attempt_cut_tree;
// "hidden" op
[oploc3,_tree] @cut_tree;

// click use axe on tree
[oplocu,_tree]
switch_obj(last_useitem) {
    case bronze_axe, iron_axe, steel_axe, black_axe, mithril_axe, adamant_axe, rune_axe :
        p_oploc(1); // gets delayed by a tick >:(
    case raw_herring, herring :
        mes("This is not the mightiest tree in the forest.");
        return;
    case default : ~displaymessage(^dm_default);
};


[label,attempt_cut_tree]
// find tree in db
db_find(woodcutting_trees:tree, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// check if f2p. Not sure if this is a thing. just to be safe i guess
def_namedobj $product = db_getfield($data, woodcutting_trees:product, 0);
if (oc_members($product) = true) {
    if (map_members = false) {
        mes(^mes_members_feature);
        return;
    }
}
// check level first
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    mes("You need a Woodcutting level of <tostring($level)> to chop down this tree.");
    return;
}
// check inv space 2nd
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    // osrs specifies the log name, but old videos do not.
    // https://youtu.be/str4rRd9mt8?t=152
    mes("Your inventory is too full to hold any more logs.");
    return;
}
if (afk_event = ^true) {
    @macro_randomwoodcutting;
}
if (%action_delay < map_clock) {
    if ($level > 0 & ~woodcutting_axe_checker = null) {
        return;
    }
    %action_delay = calc(map_clock + 3);
    p_oploc(1);
    return;
}
// for level 1 trees, axe message is here after the skill clock is set. But only on first interaction
def_obj $axe = ~woodcutting_axe_checker;
if ($axe = null) {
    return;
}

// https://youtu.be/T3IRz4hZcjc?si=4jBFvTwMwqPXuAxf&t=63
// sound on first chop
anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
sound_synth(woodchop, 0, 0);
mes("You swing your axe at the tree.");
if (%action_delay = map_clock) {
    @get_logs($data, $axe);
}

p_oploc(3);


[label,cut_tree]
def_obj $axe = ~woodcutting_axe_checker;
if ($axe = null) {
    return;
}
// find tree in db
db_find(woodcutting_trees:tree, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// i think it checks level here? thats the case with fishing at least
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    mes("You need a Woodcutting level of <tostring($level)> to chop down this tree.");
    return;
}
// check inv space
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    // https://youtu.be/str4rRd9mt8?t=152
    mes("Your inventory is too full to hold any more logs.");
    return;
}

if (%action_delay < map_clock) {
    anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
    %action_delay = calc(map_clock + 3);
} else if (%action_delay = map_clock) {
    @get_logs($data, $axe);
}

p_oploc(3);

[label,get_logs](dbrow $data, obj $axe)
// get lows and highs
def_int $tree_chance_low;
def_int $tree_chance_high;
$tree_chance_low, $tree_chance_high = ~woodcutting_successchance($data, $axe);
def_int $respawnrate = db_getfield($data, woodcutting_trees:respawnrate, 0);
def_int $deplete_chance = 8; // 1/8 chance to deplete
// if normal tree, add some variance
// scuffed way of doing it but it works
if ($respawnrate = 0) {
    $respawnrate = ~random_range(120, 198);
    $deplete_chance = 0;
}
if (stat_random(stat(woodcutting), $tree_chance_low, $tree_chance_high) = true) {
    def_namedobj $product = db_getfield($data, woodcutting_trees:product, 0);
    mes("You get some <lowercase(oc_name($product))>.");
    stat_advance(woodcutting, db_getfield($data, woodcutting_trees:productexp, 0));
    inv_add(inv, $product, 1);
    if (random($deplete_chance) = 0) {
        $respawnrate = ~scale_by_playercount($respawnrate);
        loc_change(loc_param(next_loc_stage), $respawnrate);
        anim(null, 0);
        return;
    }
}
p_oploc(3);

// check if player has axe and level, ifso return best axe
[proc,woodcutting_axe_checker]()(namedobj)
def_int $level = stat(woodcutting);
def_obj $obj1 = inv_getobj(worn, ^wearpos_rhand);
// no wc req in 2004, this is also the case in rsc. Heres a guide from 2004 that says so :
// https://web.archive.org/web/20040622013913/http://runehq.com/viewguidedb.php?id=00330
// if (($obj1 = rune_axe | inv_total(inv, rune_axe) > 0) & $level > 40) {
//     return (rune_axe);
// }
// if (($obj1 = adamant_axe | inv_total(inv, adamant_axe) > 0) & $level > 30) {
//     return (adamant_axe);
// }
// if (($obj1 = mithril_axe | inv_total(inv, mithril_axe) > 0) & $level > 20) {
//     return (mithril_axe);
// }
// if (($obj1 = black_axe | inv_total(inv, black_axe) > 0) & $level > 10) {
//     return (black_axe);
// }
// if (($obj1 = steel_axe | inv_total(inv, steel_axe) > 0) & $level > 5) {
//     return (steel_axe);
// }
// if (($obj1 = iron_axe | inv_total(inv, iron_axe) > 0) & $level > 0) {
//     return (iron_axe);
// }
// if (($obj1 = bronze_axe | inv_total(inv, bronze_axe) > 0) & $level > 0) {
//     return (bronze_axe);
// }
if (($obj1 = rune_axe | inv_total(inv, rune_axe) > 0)) {
    return (rune_axe);
}
if (($obj1 = adamant_axe | inv_total(inv, adamant_axe) > 0)) {
    return (adamant_axe);
}
if (($obj1 = mithril_axe | inv_total(inv, mithril_axe) > 0)) {
    return (mithril_axe);
}
if (($obj1 = black_axe | inv_total(inv, black_axe) > 0)) {
    return (black_axe);
}
if (($obj1 = steel_axe | inv_total(inv, steel_axe) > 0)) {
    return (steel_axe);
}
if (($obj1 = iron_axe | inv_total(inv, iron_axe) > 0)) {
    return (iron_axe);
}
if (($obj1 = bronze_axe | inv_total(inv, bronze_axe) > 0)) {
    return (bronze_axe);
}
// mes("You need an axe to chop down this tree."); // this message was added in 2005 when they fixed axe wc reqs
// https://imgur.com/Cj7w6y9
// https://imgur.com/fnmlJ7R
mes("You do not have an axe which you have the level to use.");
return(null);

[proc,woodcutting_successchance](dbrow $data, obj $axe)(int, int)
def_int $count = calc(db_getfieldcount($data, woodcutting_trees:successchance) - 1);
while ($count >= 0) {
    def_obj $db_axe;
    def_int $tree_chance_low;
    def_int $tree_chance_high;
    $db_axe, $tree_chance_low, $tree_chance_high = db_getfield($data, woodcutting_trees:successchance, $count);
    if ($db_axe = $axe) {
        return($tree_chance_low, $tree_chance_high);
    } else {
        $count = calc($count - 1);
    }
}
return(null, null);
