// ents last for exactly 60 ticks: https://youtu.be/eGLAXnneCsg?list=PLn23LiLYLb1aYjPgadhUQGX61AeHWaT4y&t=222
[proc,macro_event_ent_spawn]
def_npc $ent = loc_param(ent);
def_loc $loc = nc_param($ent, (next_loc_stage));
def_coord $coord = loc_coord;
// for 3x3 trees
if ($loc = null) {
    loc_change(loc_2639, 60);
    loc_add(movecoord($coord, 1, 0, 1), loc_2639, 0, centrepiece_straight, 60);
    loc_add(movecoord($coord, 2, 0, 0), loc_83, 0, centrepiece_straight, 60);
    loc_add(movecoord($coord, 0, 0, 2), loc_84, 0, centrepiece_straight, 60);
} else {
    loc_change($loc, 60);
}
npc_add($coord, $ent, 60);
sound_synth(anothercry, 0, 0); // complete guess, this is near the toher wc sounds so it might be this one?
p_opnpc(1); // not sure if p_opnpc is used (delays an extra tick)

[opnpc1,_macro_event_ent] @attempt_cut_ent;
[opnpc3,_macro_event_ent] @cut_ent;
[opnpcu,_macro_event_ent]
switch_obj(last_useitem) {
    case bronze_axe, iron_axe, steel_axe, black_axe, mithril_axe, adamant_axe, rune_axe : 
        p_opnpc(1); // gets delayed by a tick >:(
    case raw_herring, herring : 
        mes("This is not the mightiest tree in the forest.");
        return;
    case default : ~displaymessage(^dm_default);
};



[label,attempt_cut_ent]
// find tree in db
db_find(woodcutting_trees:tree, npc_param(ent_tree_loc));
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// check if f2p. Not sure if this is a thing. just to be safe i guess
def_namedobj $product = db_getfield($data, woodcutting_trees:product, 0);
if (oc_members($product) = true) {
    ~require_members_feature;
}
// check level first
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    @woodcutting_level_failmessage($level);
}
// check inv space 2nd
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    @your_inventory_is_full($product);
}
if (%action_delay < map_clock) {
    // scuffed implementation for lining up skill sounds (very first chop)
    if (%skill_sound = calc(map_clock + 4)) {
        sound_synth(woodchop_4,0,20);
    }
    %action_delay = calc(map_clock + 3);
    %skill_anim = calc(map_clock + 3);
    p_opnpc(1);
} else {
    // axe message is here after the skill clock is set
    def_namedobj $axe = ~woodcutting_axe_checker();
    if ($axe = null) {
        @woodcutting_axe_fail;
    }
    anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
    sound_synth(woodchop_4,0,10);
    %skill_sound = calc(map_clock + 5);
    mes("You swing your axe at the tree.");
    @cut_ent;
}

[label,cut_ent]
// check if player has axe and level, ifso return best axe
def_namedobj $axe = ~woodcutting_axe_checker();
if ($axe = null) {
    @woodcutting_axe_fail;
}
// find tree in db
db_find(woodcutting_trees:tree, npc_param(ent_tree_loc));
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// i think it checks level here? thats the case with fishing at least
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    @woodcutting_level_failmessage($level);
}
// check inv space
def_namedobj $product = db_getfield($data, woodcutting_trees:product, 0);
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    @your_inventory_is_full($product);
}
// play animation every 4 ticks
// make sure this is before the skill clock check, else theres a few cases where the skill anim
// gets redefined after skill(anim, null)
if (%skill_anim <= map_clock) {
    %skill_anim = calc(map_clock + 4);
    anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
}
// this is here because theres always a tick where no mes("You swing your axe at the tree.") when spam clicking on tree
// this tick is when you get you get a roll. so that means that skill clock is set next tick after roll is given
if (%action_delay < map_clock) {
    %action_delay = calc(map_clock + 3);
}
if (%action_delay = map_clock) { // break axe
    // https://youtu.be/1vo3B5DEgIQ
    def_namedobj $axe_broken = oc_param($axe, broken);
    // todo: use inv_changeslot?
    if (inv_total(worn, $axe) > 0) {
        inv_del(worn, $axe, 1);
        inv_setslot(worn, ^wearpos_rhand, $axe_broken, 1);
        ~update_all($axe);
    } if (inv_total(inv, $axe) > 0) {
        inv_del(inv, $axe, 1);
        inv_add(inv, $axe_broken, 1);
    }
    mes("That's not a tree, it's an Ent!");
    mes("The Ent damages your axe!");
    npc_anim(seq_335, 0); // todo: need a video of this
    npc_facesquare(coord);
    anim(null, 0);
    sound_synth(axe_break, 0, 0); // not sure if its 363 or not
    return;
}
// this is for the very first chop
if (%skill_sound = calc(map_clock + 4)) {
    %skill_sound = calc(map_clock + 3);
    sound_synth(woodchop_4,0,25);
} 
// third
else if (%skill_sound < map_clock) {
    %skill_sound = calc(map_clock + 3);
    sound_synth(woodchop_4,0,8);
} 
// second
else if (%skill_sound = map_clock) {
    sound_synth(woodchop_4,0,0);
} 
// first
else if (%skill_sound = calc(map_clock + 2)) {
    sound_synth(woodchop_4,0,18);
}

p_opnpc(3);