// ents last for exactly 60 ticks: https://youtu.be/eGLAXnneCsg?list=PLn23LiLYLb1aYjPgadhUQGX61AeHWaT4y&t=222
[proc,macro_event_ent_spawn]
def_npc $ent = loc_param(ent);
def_loc $loc = nc_param($ent, (next_loc_stage));
def_coord $coord = loc_coord;
// for 3x3 trees
if ($loc = null) {
    loc_change(loc_2639, 60);
    loc_add(movecoord($coord, 1, 0, 1), loc_2639, 0, centrepiece_straight, 60);
    loc_add(movecoord($coord, 2, 0, 0), loc_83, 0, centrepiece_straight, 60);
    loc_add(movecoord($coord, 0, 0, 2), loc_84, 0, centrepiece_straight, 60);
} else {
    loc_change($loc, 60);
}
npc_add($coord, $ent, 60);
sound_synth(anothercry, 0, 0); // complete guess, this is near the toher wc sounds so it might be this one?
p_opnpc(1); // not sure if p_opnpc is used (delays an extra tick)

[opnpc1,_macro_event_ent] @attempt_cut_ent;
[opnpc3,_macro_event_ent] @cut_ent;
[opnpcu,_macro_event_ent]
switch_obj(last_useitem) {
    case bronze_axe, iron_axe, steel_axe, black_axe, mithril_axe, adamant_axe, rune_axe :
        p_opnpc(1); // gets delayed by a tick >:(
    // case raw_herring, herring :
    //     // note: added in 2005-2006 by mod ash?
    //     mes("This is not the mightiest tree in the forest.");
    //     return;
    case default : ~displaymessage(^dm_default);
};



[label,attempt_cut_ent]
// find tree in db
db_find(woodcutting_trees:tree, npc_param(ent_tree_loc));
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// check if f2p. Not sure if this is a thing. just to be safe i guess
def_namedobj $product = db_getfield($data, woodcutting_trees:product, 0);
if (oc_members($product) = true) {
    if (map_members = false) {
        mes(^mes_members_do_that);
        return;
    }
}
// check level first
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    mes("You need a Woodcutting level of <tostring($level)> to chop down this tree.");
    return;
}
// check inv space 2nd
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    mes("Your inventory is too full to hold any more logs.");
    return;
}
if (%action_delay < map_clock) {
    if ($level > 0 & ~woodcutting_axe_checker = null) {
        return;
    }
    %action_delay = calc(map_clock + 3);
    p_opnpc(1);
    return;
}
def_obj $axe = ~woodcutting_axe_checker;
if ($axe = null) {
    return;
}

anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
sound_synth(woodchop, 0, 0);
mes("You swing your axe at the tree.");
if (%action_delay = map_clock) {
    @macro_event_damage_axe($axe);
}

p_opnpc(3);

[label,cut_ent]
// check if player has axe and level, ifso return best axe
def_namedobj $axe = ~woodcutting_axe_checker();
if ($axe = null) {
    return;
}
// find tree in db
db_find(woodcutting_trees:tree, npc_param(ent_tree_loc));
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// i think it checks level here? thats the case with fishing at least
def_int $level = db_getfield($data, woodcutting_trees:levelrequired, 0);
if (stat(woodcutting) < $level) {
    anim(null, 0);
    mes("You need a Woodcutting level of <tostring($level)> to chop down this tree.");
    return;
}
// check inv space
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    mes("Your inventory is too full to hold any more logs.");
    return;
}

if (%action_delay < map_clock) {
    anim(struct_param(oc_param($axe, woodcutting_struct), skill_anim), 0);
    %action_delay = calc(map_clock + 3);
} else if (%action_delay = map_clock) {
    @macro_event_damage_axe($axe);
}
p_opnpc(3);


// https://youtu.be/1vo3B5DEgIQ
// https://youtu.be/-0z2OZKdIM8?t=684
[label,macro_event_damage_axe](obj $axe)
if (%macro_ent_counter = 6) {
    %macro_ent_counter = 0;
    def_namedobj $axe_broken = oc_param($axe, broken);
    // todo: use inv_changeslot?
    if (inv_total(worn, $axe) > 0) {
        inv_del(worn, $axe, 1);
        inv_setslot(worn, ^wearpos_rhand, $axe_broken, 1);
        ~update_all($axe);
    } else if (inv_total(inv, $axe) > 0) {
        inv_del(inv, $axe, 1);
        inv_add(inv, $axe_broken, 1);
    }
    mes("That's not a tree, it's an Ent!");
    mes("The Ent damages your axe!");
    npc_anim(seq_335, 0); // todo: need a video of this
    npc_facesquare(coord);
    anim(null, 0);
    sound_synth(staff_stab, 0, 0); // osrs used spear sound
    session_log(^log_adventure, "Broke their <oc_name($axe)>");
    return;
}
%macro_ent_counter = add(%macro_ent_counter, 1);
p_opnpc(3);