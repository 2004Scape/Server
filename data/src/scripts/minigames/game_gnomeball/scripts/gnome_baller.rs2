[ai_opplayer2,gnome_baller1] @npc_gnomeball_tackle;
[ai_opplayer2,gnome_baller5] @npc_gnomeball_tackle;
[ai_opplayer2,gnome_baller9] @npc_gnomeball_tackle;

[label,npc_gnomeball_tackle]
npc_setmode(null);
npc_delay(0);
if_close;
if (p_finduid(uid) = true) {
    if (stat_random(stat(agility), 30, 200) = false & inv_getobj(worn, ^wearpos_rhand) = gnomeball) { // 50% guess for now
        ~npc_gnomeball_tackle_success;
    } else {
        ~npc_gnomeball_tackle_fail;
    }
}

[proc,npc_gnomeball_tackle_fail]
def_npc $old = npc_type;
npc_anim(midget_seq_207, 0);
npc_changetype(npc_param(gnome_fallen));
npc_delay(5);
npc_changetype($old);
npc_anim(midget_seq_209, 0);
npc_delay(0);
%npc_attacking_uid = null;

[proc,npc_gnomeball_tackle_success]
queue(damage_player, 0, add(random(2), 1));
anim(seq_779, 0);
npc_changetype(npc_param(gnome_hasball));
npc_anim(midget_seq_210, 0);
inv_delslot(worn, ^wearpos_rhand);
~update_all(gnomeball);
npc_setmode(wander);
%npc_attacking_uid = uid;
%npc_lastcombat = ^max_32bit_int;


[opnpc1,gnome_baller1] @player_gnomeball_tackle(30, 200);
[opnpc1,gnome_baller5] @player_gnomeball_tackle(30, 200);
[opnpc1,gnome_baller9] @player_gnomeball_tackle(30, 220);
[opnpct,gnomeball:com_5] 
switch_npc (npc_type) {
    case gnome_baller1, gnome_baller5 : @player_gnomeball_tackle(30, 200);
    case gnome_baller9 : @player_gnomeball_tackle(30, 220);
    case gnome_baller2, gnome_baller6, gnome_baller10 : @player_gnomeball_tackle_carrier;
    case default : mes("You can only tackle gnome ballers."); // complete guess
}

[opplayert,gnomeball:com_5] 
mes("You can only tackle gnome ballers."); // complete guess

[label,player_gnomeball_tackle](int $low, int $high)
if (inv_getobj(worn, ^wearpos_rhand) = gnomeball) {
    mes("You may not tackle when you have a ball.");
    return;
}
if (add(%npc_lastcombat, 3) > map_clock) {
    mes("That gnome is being tackled.");
    return;
}
%npc_attacking_uid = null;
%npc_lastcombat = map_clock;
%npc_stunned = add(map_clock, 3);
npc_queue(8, 0, 0);
p_delay(0);
npc_facesquare(coord);
facesquare(npc_coord);
p_delay(0);
if (stat_random(stat(agility), $low, $high) = true) { // 50% guess for now
    ~player_gnomeball_tackle_success(npc_type);
} else {
    ~player_gnomeball_tackle_fail;
}


[proc,player_gnomeball_tackle_fail]
anim(seq_780, 33);
npc_anim(midget_seq_204, 33);
npc_delay(0);
// SoundEffect(name = "gnomeball_tackled_gnome_miss")

[proc,player_gnomeball_tackle_success](npc $original)
anim(seq_778, 33);
npc_anim(midget_seq_203, 30);
// SoundEffect(name = "gnomeball_tackled_gnome")
npc_setmode(none);
p_delay(0);
~update_all(gnomeball);
npc_changetype(nc_param($original, gnome_tackled));
npc_delay(9);
npc_setmode(null);
npc_changetype($original);
npc_anim(midget_seq_206, 0);
npc_delay(0);


[opnpc1,gnome_baller2] @player_gnomeball_tackle_carrier;
[opnpc1,gnome_baller6] @player_gnomeball_tackle_carrier;
[opnpc1,gnome_baller10] @player_gnomeball_tackle_carrier;

[label,player_gnomeball_tackle_carrier]
if (inv_getobj(worn, ^wearpos_rhand) = gnomeball) {
    mes("You may not tackle when you have a ball.");
    return;
}
if (add(%npc_lastcombat, 3) > map_clock) {
    mes("That gnome is being tackled.");
    return;
}
%npc_lastcombat = map_clock;
%npc_stunned = add(map_clock, 2);
npc_queue(8, 0, 0);
p_delay(0);
npc_facesquare(coord);
p_delay(0);
if (stat_random(stat(agility), 30, 220) = true) { // 50% guess for now
    inv_setslot(worn, ^wearpos_rhand, gnomeball, 1);
    def_npc $original = npc_param(gnome_original);
    npc_changetype($original);
    ~player_gnomeball_tackle_success($original);
    %npc_attacking_uid = null;
} else {
    ~player_gnomeball_tackle_fail;
}
