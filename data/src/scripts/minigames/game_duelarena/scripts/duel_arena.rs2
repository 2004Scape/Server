[debugproc,dueloffer]
def_int $i = 0;
def_int $null = 0;
while ($i < inv_size(dueloffer)) {
    if (inv_getobj(dueloffer, $i) ! null) {
        mes("<tostring($i)>: <oc_debugname(inv_getobj(dueloffer, $i))>");
    } else {
        $null = add($null, 1);
    }
    $i = add($i, 1);
}
if ($null = inv_size(dueloffer)) {
    mes("dueloffer is empty");
}

[debugproc,duelwinnings]
def_int $i = 0;
def_int $null = 0;
while ($i < inv_size(duelwinnings)) {
    if (inv_getobj(duelwinnings, $i) ! null) {
        mes("<tostring($i)>: <oc_debugname(inv_getobj(duelwinnings, $i))>");
    } else {
        $null = add($null, 1);
    }
    $i = add($i, 1);
}
if ($null = inv_size(duelwinnings)) {
    mes("stakeinv is empty");
}

[opplayer1,_]
if (.busy = true) {
    mes("<.displayname> is busy at the moment."); // https://youtu.be/YkJQDvB14-U?t=26
    return;
}
// prevent people from dueling in a duel or if you arent in the duel area
if (~in_duel_arena(coord) = true | ~inzone_coord_pair_table(duel_arena_zones, coord) = false) {
    mes("You can't do that here."); // https://youtu.be/nUwvlFkcsqA?t=17
    return;
}
// if the other player isnt in the duel area
if (~inzone_coord_pair_table(duel_arena_zones, .coord) = false) {
    mes("That player is not in the duel challenge area."); // https://youtu.be/YlnPnlfgMQ4?t=51
    return;
}
if (map_members = false) { // theres an area f2p worlds have access to that lets you duel other players
    mes(^mes_members_do_that); // guess
    return;
}

mes("Sending duel offer...");
%duel_settings = 0;
%duelpartner = .uid;

if (.%duelpartner = uid & %duelstatus = ^duelstatus_received) {
    if (.p_finduid(.uid) = true) {
        .p_stopaction;
    }
    %duel_settings = 0;
    if_settext(duel_select_type:status, "");
    if_settext(duel_select_type:otherplayer, "Dueling with: <.displayname>");
    inv_clear(dueloffer);
    inv_transmit(dueloffer, duel_select_type:inv);
    invother_transmit(.uid, dueloffer, duel_select_type:otherinv);
    inv_transmit(inv, duel_side:inv);

    .if_settext(duel_select_type:status, "");
    .if_settext(duel_select_type:otherplayer, "Dueling with: <displayname>");
    .inv_clear(dueloffer);
    .inv_transmit(dueloffer, duel_select_type:inv);
    .invother_transmit(uid, dueloffer, duel_select_type:otherinv);
    .inv_transmit(inv, duel_side:inv);

    if_openmain_side(duel_select_type, duel_side);
    .if_openmain_side(duel_select_type, duel_side);
    
    %duelstatus = ^duelstatus_reset;
    .%duelstatus = ^duelstatus_reset;
} else {
    .%duelstatus = ^duelstatus_received;
    .mes("<displayname>:duelreq:");
}

[if_close,duel_select_type]
inv_stoptransmit(duel_select_type:inv);
inv_stoptransmit(duel_select_type:otherinv);
inv_stoptransmit(duel_side:inv);


if (.finduid(%duelpartner) = true) {
    .%duelpartner = null;
    .if_close;
    if (%duelstatus ! ^duelstatus_pending_accept & .%duelstatus ! ^duelstatus_pending_accept) {
        .mes("Other player declined stake and duel options."); // 2006 https://youtu.be/HFp6hOkiCns?t=304
    }
}

~moveallinv(dueloffer, inv);
%duelpartner = null;

[if_close,duel_confirm]
inv_stoptransmit(duel_confirm:inv);
inv_stoptransmit(duel_confirm:otherinv);
if (%duelstatus >= ^duelstatus_confirm) { 
    return; // duel accepted
}
if (.finduid(%duelpartner) = true) {
    .if_close;
    .mes("Other player declined stake and duel options."); // 2006 https://youtu.be/HFp6hOkiCns?t=304
    .%duelpartner = null;
}
~moveallinv(dueloffer, inv);
%duelpartner = null;

[if_button,duel_select_type:accept]
%duelstatus = ^duelstatus_pending_accept;
if (.finduid(%duelpartner) = true & ~enough_duel_space = true) { // https://youtu.be/WHpZQ5fbr5w
    if (.%duelstatus = ^duelstatus_pending_accept & ~.enough_duel_space = true) {
        // Accept stake and move onto second screen!
        inv_stoptransmit(duel_select_type:inv);
        inv_stoptransmit(duel_select_type:otherinv);
        inv_stoptransmit(duel_side:inv);

        .inv_stoptransmit(duel_select_type:inv);
        .inv_stoptransmit(duel_select_type:otherinv);
        .inv_stoptransmit(duel_side:inv);

        walktrigger(duel_arena_no_move); // run every time to allow this bug: https://youtu.be/XeLm7FRoYIA
        .walktrigger(duel_arena_no_move);

        cam_reset;
        .cam_reset;

        ~inv_remove_leading_empty_slots(dueloffer);
        ~.inv_remove_leading_empty_slots(dueloffer);

        def_int $tempinvused = sub(inv_size(dueloffer), inv_freespace(dueloffer));
        if ($tempinvused < 1) {
            if_settext(duel_confirm:com_91, "Absolutely nothing!");
            .if_settext(duel_confirm:com_96, "Absolutely nothing!");
        } else {
            if_settext(duel_confirm:com_91, "");
            .if_settext(duel_confirm:com_96, "");

            inv_transmit(dueloffer, duel_confirm:inv);
            .invother_transmit(uid, dueloffer, duel_confirm:otherinv);
        }

        def_int $other_tempinvused = sub(inv_size(dueloffer), .inv_freespace(dueloffer));
        if ($other_tempinvused < 1) {
            if_settext(duel_confirm:com_96, "Absolutely nothing!");
            .if_settext(duel_confirm:com_91, "Absolutely nothing!");
        } else {
            if_settext(duel_confirm:com_96, "");
            .if_settext(duel_confirm:com_91, "");

            invother_transmit(.uid, dueloffer, duel_confirm:otherinv);
            .inv_transmit(dueloffer, duel_confirm:inv);
        }
        if_openmain(duel_confirm);
        .if_openmain(duel_confirm);

        if_settext(duel_confirm:status, "");
        .if_settext(duel_confirm:status, "");

        if_settext(duel_confirm:com_97, "Are you sure you want to fight this duel?");
        .if_settext(duel_confirm:com_97, "Are you sure you want to fight this duel?");

        %duelstatus = ^duelstatus_accept;
        .%duelstatus = ^duelstatus_accept;
    } else {
        .if_settext(duel_select_type:status, "Other player has accepted...");
        if_settext(duel_select_type:status, "Waiting for other player...");
    }
}

[proc,enough_duel_space]()(boolean)
def_int $space_needed = 0;
if (testbit(%duel_settings, ^no_weapons) = true) {
    $space_needed = add($space_needed, ~enum_inv_itemspace(worn, inv, duel_arena_weapon_slots));
}
if (testbit(%duel_settings, ^no_armour) = true) {
    $space_needed = add($space_needed, ~enum_inv_itemspace(worn, inv, duel_arena_armour_slots));
}
if (testbit(%duel_settings, ^no_jewelry) = true) {
    $space_needed = add($space_needed, ~enum_inv_itemspace(worn, inv, duel_arena_jewelry_slots));
}
if ($space_needed > inv_freespace(inv)) {
    if_settext(duel_select_type:status, "You do not have enough space for the items removed.");
    return(false);
}
$space_needed = add($space_needed, ~moveallinv_itemspace2(dueloffer, inv));
$space_needed = add($space_needed, ~both_moveallinv_itemspace2(dueloffer, inv));
if ($space_needed > inv_freespace(inv)) {
    if_settext(duel_select_type:status, "You do not have enough space for the stake.");
    return(false);
}
return(true);

[proc,.enough_duel_space]()(boolean)
def_int $space_needed = 0;
if (testbit(.%duel_settings, ^no_weapons) = true) {
    $space_needed = add($space_needed, ~.enum_inv_itemspace(worn, inv, duel_arena_weapon_slots));
}
if (testbit(.%duel_settings, ^no_armour) = true) {
    $space_needed = add($space_needed, ~.enum_inv_itemspace(worn, inv, duel_arena_armour_slots));
}
if (testbit(.%duel_settings, ^no_jewelry) = true) {
    $space_needed = add($space_needed, ~.enum_inv_itemspace(worn, inv, duel_arena_jewelry_slots));
}
if ($space_needed > .inv_freespace(inv)) {
    .if_settext(duel_select_type:status, "You do not have enough space for the items removed.");
    return(false);
}
$space_needed = add($space_needed, ~.moveallinv_itemspace2(dueloffer, inv));
$space_needed = add($space_needed, ~.both_moveallinv_itemspace2(dueloffer, inv));
if ($space_needed > .inv_freespace(inv)) {
    .if_settext(duel_select_type:status, "You do not have enough space for the stake.");
    return(false);
}
return(true);


[if_button,duel_confirm:accept]
%duelstatus = ^duelstatus_pending_confirm;

if (.finduid(%duelpartner) = true) {
    if (.%duelstatus = ^duelstatus_pending_confirm) {
        mes("Accepted stake and duel options.");
        .mes("Accepted stake and duel options.");

        %duelstatus = ^duelstatus_confirm;
        .%duelstatus = ^duelstatus_confirm;

        if_close;
        .if_close;
        queue(duel_arena_prepare_start, 0);
        .queue(duel_arena_prepare_start, 0);
    } else {
        .if_settext(duel_confirm:status, "Other player has accepted."); // https://youtu.be/HFp6hOkiCns?t=481
        if_settext(duel_confirm:status, "Waiting for other player."); 
    }
}

[inv_button1,duel_select_type:inv] @removefromduel(last_slot, 1);
[inv_button2,duel_select_type:inv] @removefromduel(last_slot, 5);
[inv_button3,duel_select_type:inv] @removefromduel(last_slot, 10);
[inv_button4,duel_select_type:inv] @removefromduel(last_slot, ^max_32bit_int);
[inv_button5,duel_select_type:inv] @removefromduel(last_slot, null);

[label,removefromduel](int $slot, int $amount)
if ($amount <= 0) {
    p_countdialog;
    if (last_int <= 0) return;
    $amount = last_int;
}

def_obj $obj = inv_getobj(dueloffer, $slot);
def_int $total = inv_total(dueloffer, $obj);
if ($amount < $total) $total = $amount;
inv_moveitem(dueloffer, inv, $obj, $total);

%duelstatus = ^duelstatus_reset;
if_settext(duel_select_type:status, "");
if (.finduid(%duelpartner) = true) {
    session_log(^log_moderator, "Removed stake <oc_debugname($obj)> x<tostring($total)> to <.name>");
    .%duelstatus = ^duelstatus_reset;
    .if_settext(duel_select_type:status, "");
}

[inv_button1,duel_side:inv] @movetoduel(last_slot, 1);
[inv_button2,duel_side:inv] @movetoduel(last_slot, 5);
[inv_button3,duel_side:inv] @movetoduel(last_slot, 10);
[inv_button4,duel_side:inv] @movetoduel(last_slot, ^max_32bit_int);
[inv_button5,duel_side:inv] @movetoduel(last_slot, null);


[label,movetoduel](int $slot, int $amount)
if ($amount <= 0) {
    p_countdialog;
    if (last_int <= 0) return;
    $amount = last_int;
}

def_obj $obj = inv_getobj(inv, $slot);

if (oc_tradeable($obj) = false) {
    mes("You can't stake that item."); // RS3 message: https://archive.org/details/runelibris
    return;
}

if (oc_members($obj) = true & map_members = false) { // cant duel on f2p worlds anyway but just incase
    mes("You can't stake that item."); // RS3 message: https://archive.org/details/runelibris
    return;
}

def_int $total = inv_total(inv, $obj);
if ($amount < $total) $total = $amount;
inv_moveitem(inv, dueloffer, $obj, $total);

%duelstatus = ^duelstatus_reset;
if_settext(duel_select_type:status, "");
if (.finduid(%duelpartner) = true) {
    session_log(^log_moderator, "Added stake <oc_debugname($obj)> x<tostring($total)> to <.name>");
    .%duelstatus = ^duelstatus_reset;
    .if_settext(duel_select_type:status, "");
}

// ---

[proc,duel_arena_checks]()(boolean)
if (~inzone_coord_pair_table(duel_arena_zones, coord) = true & ~in_duel_arena(coord) = false) {
    mes("You cannot attack players in the challenge area."); // https://youtu.be/r606q1TBTJ8?t=53 https://youtu.be/zcFLOWkTSIo?t=3
    return(false);
}
if (.uid ! %duelpartner) {
    mes("You can only attack your opponent!"); // https://storage.googleapis.com/tannerdino/images/batwifahat-purpl.jpg
    return(false);
}
if (%duelstatus < ^duelstatus_start | .%duelstatus < ^duelstatus_start) {
    mes("The duel has not started yet!"); // https://youtu.be/64GEUr-lgS8?t=106
    return(false);
}
return(true);

[proc,in_duel_arena](coord $coord)(boolean)
if (~inzone_coord_pair_table(duel_arena_fight_zones, $coord) = true | ~inzone_coord_pair_table(duel_arena_obstacle_fight_zones, $coord) = true) {
    return(true);
}
return(false);

[proc,.in_duel_arena](coord $coord)(boolean)
if (~.inzone_coord_pair_table(duel_arena_fight_zones, $coord) = true | ~.inzone_coord_pair_table(duel_arena_obstacle_fight_zones, $coord) = true) {
    return(true);
}
return(false);

[proc,duel_arena_login]
if (~in_duel_arena(coord) = false) {
    return;
}
~duel_reset_all;

[proc,duel_arena_logout]
if (~in_duel_arena(coord) = false) {
    return;
}
if (.finduid(%duelpartner) = true) {
    .%duelstatus = ^duelstatus_reset;
    .%duelpartner = null;
    .if_close;
    .queue(duel_arena_disconnect, 0);
}
%duelstatus = ^duelstatus_reset;
%duelpartner = null;
~moveallinv(dueloffer, inv);

[queue,duel_arena_disconnect]
~moveallinv(dueloffer, inv);
~duel_reset_all;
mes("Your opponent timed out, there was no winner!"); // https://storage.googleapis.com/tannerdino/images/00timeout.jpg