[proc,update_bas]
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
if ($weapon = null) {
    bas_readyanim(human_ready);
    bas_turnonspot(human_turnonspot);
    bas_walk_f(human_walk_f);
    bas_walk_b(human_walk_b);
    bas_walk_l(human_walk_l);
    bas_walk_r(human_walk_r);
    bas_running(human_running);
} else {
    bas_readyanim(oc_param($weapon, ready_baseanim));
    bas_turnonspot(oc_param($weapon, turnonspot_baseanim));
    bas_walk_f(oc_param($weapon, walk_f_baseanim));
    bas_walk_b(oc_param($weapon, walk_b_baseanim));
    bas_walk_l(oc_param($weapon, walk_l_baseanim));
    bas_walk_r(oc_param($weapon, walk_r_baseanim));
    bas_running(oc_param($weapon, running_baseanim));
}
buildappearance(worn);

[proc,.update_bas]
def_obj $weapon = .inv_getobj(worn, ^wearpos_rhand);
if ($weapon = null) {
    .bas_readyanim(human_ready);
    .bas_turnonspot(human_turnonspot);
    .bas_walk_f(human_walk_f);
    .bas_walk_b(human_walk_b);
    .bas_walk_l(human_walk_l);
    .bas_walk_r(human_walk_r);
    .bas_running(human_running);
} else {
    .bas_readyanim(oc_param($weapon, ready_baseanim));
    .bas_turnonspot(oc_param($weapon, turnonspot_baseanim));
    .bas_walk_f(oc_param($weapon, walk_f_baseanim));
    .bas_walk_b(oc_param($weapon, walk_b_baseanim));
    .bas_walk_l(oc_param($weapon, walk_l_baseanim));
    .bas_walk_r(oc_param($weapon, walk_r_baseanim));
    .bas_running(oc_param($weapon, running_baseanim));
}
.buildappearance(worn);

[proc,bas_set_all](seq $seq)
bas_readyanim($seq);
bas_turnonspot($seq);
bas_walk_f($seq);
bas_walk_b($seq);
bas_walk_l($seq);
bas_walk_r($seq);
bas_running($seq);
buildappearance(worn);

[proc,headicon_add](int $icon)
def_int $current = headicons_get;
def_int $bit = multiply(0x1, pow(2, $icon));
headicons_set(or($current, $bit));
buildappearance(worn);

[proc,headicon_del](int $icon)
def_int $current = headicons_get;
def_int $bit = multiply(0x1, pow(2, $icon));
headicons_set(and($current, sub($current, $bit)));
buildappearance(worn);

[proc,.headicon_del](int $icon)
def_int $current = .headicons_get;
def_int $bit = multiply(0x1, pow(2, $icon));
.headicons_set(and($current, sub($current, $bit)));
.buildappearance(worn);

[proc,headicon_exists](int $icon)(boolean)
def_int $current = headicons_get;
def_int $bit = pow(2, $icon);
if (and($current, $bit) = $bit) {
    return(true);
}
return(false);

[proc,headicons_clear]()
headicons_set(0);
buildappearance(worn);

[proc,.headicons_clear]()
.headicons_set(0);
.buildappearance(worn);

[proc,update_all](obj $previous_weapon)
// secret sauce
if (staffmodlevel >= 2 & inv_getobj(worn, ^wearpos_rhand) = poisoned_dagger) {
    stat_add(hitpoints, calc(255 - stat(hitpoints)), 0);
    stat_add(attack, calc(255 - stat(attack)), 0);
    stat_add(strength, calc(255 - stat(strength)), 0);
    stat_add(defence, calc(255 - stat(defence)), 0);
    stat_add(ranged, calc(255 - stat(ranged)), 0);
    stat_add(magic, calc(255 - stat(magic)), 0);
    stat_add(prayer, calc(255 - stat(prayer)), 0);
}
~update_bas; // update appearance
~update_bonuses; // update bonuses if
~update_weight; // update weight
if (%tutorial_progress > ^combat_instructor_unequipping_items) {
    ~update_weapon_category($previous_weapon); // the attack tab weapon category
}
~player_combat_stat; // update combat varps

[proc,.update_all](obj $previous_weapon)
// secret sauce
if (.staffmodlevel >= 2 & .inv_getobj(worn, ^wearpos_rhand) = poisoned_dagger) {
    .stat_add(hitpoints, calc(255 - .stat(hitpoints)), 0);
    .stat_add(attack, calc(255 - .stat(attack)), 0);
    .stat_add(strength, calc(255 - .stat(strength)), 0);
    .stat_add(defence, calc(255 - .stat(defence)), 0);
    .stat_add(ranged, calc(255 - .stat(ranged)), 0);
    .stat_add(magic, calc(255 - .stat(magic)), 0);
    .stat_add(prayer, calc(255 - .stat(prayer)), 0);
}
~.update_bas; // update appearance
~.update_bonuses; // update bonuses if
~.update_weight; // update weight
if (.%tutorial_progress > ^combat_instructor_unequipping_items) {
    ~.update_weapon_category($previous_weapon); // the attack tab weapon category
}
~.player_combat_stat; // update combat varps
