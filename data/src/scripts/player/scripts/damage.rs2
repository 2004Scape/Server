[debugproc,hit](int $amount)
~damage_self($amount);

[proc,combat_clearqueue]
clearqueue(playerhit_n_retaliate);
clearqueue(damage_player);
clearqueue(pvp_damage);

[proc,.combat_clearqueue]
.clearqueue(playerhit_n_retaliate);
.clearqueue(damage_player);
.clearqueue(pvp_damage);

[queue,player_death]
if (.finduid(%duelpartner) = true & ~.in_duel_arena = true) {
    .if_close;
    .%duelstatus = ^duelstatus_victory;
    queue2(duel_arena_win, 0);
}
// todo, check if a player has recieved kill credit for your death
// if so use inv_dropall and ~pvp_death_message
if (~in_duel_arena = true) {
    if (getqueue(duel_arena_win) > 0) {
        clearqueue(duel_arena_win); // to make sure these only one loser and one winner
    }
    %duelstatus = ^duelstatus_lost;
    queue(duel_arena_loss, 0);
    p_delay(1);
    p_stopaction;
    if_close;
    midi_jingle(^death_jingle_2, ^death_jingle_2_millis);
    anim(human_death, 0);
    p_delay(3);
    return;
}
p_delay(1);
p_stopaction;
if_close;
midi_jingle(^death_jingle_2, ^death_jingle_2_millis);
anim(human_death, 0);
p_delay(3);

def_boolean $skulled = false;
if (%pk_skull > 0) { $skulled = true; }
def_boolean $protecting_item = false;
if (%prayer_protectitems = ^true) { $protecting_item = true; }
inv_clear(death);

if($skulled = false) {
    ~move_priciest_item_on_hero_to_death;
    ~move_priciest_item_on_hero_to_death;
    ~move_priciest_item_on_hero_to_death;
}
if($protecting_item = true) {
    ~move_priciest_item_on_hero_to_death;
}

def_int $i = 0;
def_int $size = inv_size(inv);
def_obj $prev_wep = inv_getobj(worn, ^wearpos_rhand);
while ($i < $size) {
    if (inv_getnum(inv, $i) > 0) {
        if (oc_category(inv_getobj(inv, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(inv, $i), lose_cape_message));
            inv_delslot(inv, $i);
        } else {
            inv_dropslot(inv, coord, $i, 200);
        }
    }
    $i = calc($i + 1);
}

$i = 0;
$size = inv_size(worn);
while ($i < $size) {
    if (inv_getnum(worn, $i) > 0) {
        if (oc_category(inv_getobj(worn, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(worn, $i), lose_cape_message));
            inv_delslot(worn, $i);
        } else {
            inv_dropslot(worn, coord, $i, 200);
        }
    }
    $i = calc($i + 1);
}
buildappearance(worn);

~moveallinv(death, inv);
~deactivate_prayers;
p_telejump(~coord_lineofwalk_radius(0_50_50_21_18, 2));
anim(null, 0);
mes("Oh dear you are dead!"); // no comma in early rs2. https://storage.googleapis.com/tannerdino/images/6543.jpg

~stat_reset_all;
healenergy(10000);
~combat_clearqueue;
~clear_pk_skull;
~clear_poison;
// todo: end poison timer ~player_end_poison
~update_all($prev_wep);
inv_clear(death);

[proc,move_priciest_item_on_hero_to_death]
def_obj $priciest_item;
def_obj $currentitem;
def_int $biggest_price = 0;
def_int $size_inv = inv_size(inv);
def_int $size_worn = inv_size(worn);
def_boolean $is_worn = false;
def_int $i = 0;
while ($i < $size_inv) {
    if (inv_getnum(inv, $i) > 0) {
        $currentitem = inv_getobj(inv, $i);
        if (oc_category($currentitem) ! armour_godcape) {
            if (oc_cost($currentitem) > $biggest_price) {
                $biggest_price = oc_cost($currentitem);
                $priciest_item = $currentitem;
            }
        }
    }
    $i = calc($i + 1);
}
$i = 0;
while ($i < $size_worn) {
    if (inv_getnum(worn, $i) > 0) {
        $currentitem = inv_getobj(worn, $i);
        if (oc_category($currentitem) ! armour_godcape) {
            if (oc_cost($currentitem) > $biggest_price) {
                $is_worn = true;
                $biggest_price = oc_cost($currentitem);
                $priciest_item = $currentitem;
            }
        }
    }
    $i = calc($i + 1);
}

if($priciest_item = null ) {
    return;
}
if($is_worn = true) {
    inv_moveitem(worn,death,$priciest_item,1);
} else {
    inv_moveitem(inv,death,$priciest_item,1);
}

[debugproc,death]
~damage_self(999);

[proc,damage_self](int $amount)
if_close;
if ($amount > 0) {
    damage(uid, 1, $amount);
    ~human_hit_sound;
} else {
    damage(uid, 0, 0);
}

if (stat(hitpoints) = 0 & getqueue(player_death) < 1){
    queue(player_death, 0);
    return;
}
~ring_of_life_check;


[proc,human_hit_sound]
def_int $rand;
def_synth $sound;
if (gender() = 0) {
        $rand = random(3);
        switch_int($rand) {
            case 0 : $sound = human_hit2;
            case 1 : $sound = human_hit3;
            case 2 : $sound = human_hit4;
            case default : $sound = human_hit2;
        }
    } else {
        $rand = random(2);
        switch_int($rand) {
            case 0 : $sound = female_hit;
            case 1 : $sound = female_hit2;
            case default : $sound = female_hit;
        }
    }
sound_synth($sound, 0, 20);


[proc,.damage_self](int $amount)
.if_close;
if ($amount > 0) {
    .damage(.uid, 1, $amount);
    ~.human_hit_sound;
} else {
    .damage(.uid, 0, 0);
}

// if (.stat(hitpoints) = 0 & .getqueue(player_death) < 1){
//     .queue(player_death, 0);
// }
if (.stat(hitpoints) = 0){
    .say("Pvp death is not implemented. Need support for .queue.");
} 


[proc,.human_hit_sound]
def_int $rand;
def_synth $sound;
if (.gender() = 0) {
        $rand = random(3);
        switch_int($rand) {
            case 0 : $sound = human_hit2;
            case 1 : $sound = human_hit3;
            case 2 : $sound = human_hit4;
            case default : $sound = human_hit2;
        }
    } else {
        $rand = random(2);
        switch_int($rand) {
            case 0 : $sound = female_hit;
            case 1 : $sound = female_hit2;
            case default : $sound = female_hit;
        }
    }
.sound_synth($sound, 0, 20);
