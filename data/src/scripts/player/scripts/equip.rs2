[opheld2,_] ~equip(last_slot);

[inv_button1,wornitems:wear]
if_close;
~unequip(last_slot);

[proc,equip](int $slot)
if (p_finduid(uid) = true) {
    def_obj $obj = inv_getobj(inv, $slot);
    if (~duel_arena_equip_check($obj) = false) {
        return;
    }
    if (~duel_arena_flower_power_equip_check($obj) = false) {
        return;
    }
    if ((oc_wearpos($obj) = ^wearpos_rhand | oc_wearpos($obj) = ^wearpos_lhand) & ~inzone_coord_pair_table(gnomeball_zones, coord) = true) {
        mes("You feel it would be cheating to hold anything other than a gnomeball on the");
        mes("gnomeball pitch");
        return;
    }
    //// first: we remove the inventory item, so the slot can be filled with inv_add
    def_obj $previous = inv_getobj(worn, ^wearpos_rhand);

    def_int $count = inv_getnum(inv, $slot);
    def_int $slot1 = oc_wearpos($obj); // primary slot
    def_int $slot2 = oc_wearpos2($obj); // override slot 1
    def_int $slot3 = oc_wearpos3($obj); // override slot 2

    // second: we need to check any wearpos overrides that this item describes
    if (~equip_validate_and_move($obj, $count, $slot, $slot1, $slot2, $slot3, false, true, false) = false) {
        mes("You don't have enough free space to do that.");
        return;
    }

    // TODO: this needs a better home...
    if (%tutorial_progress < ^tutorial_complete) {
     if (%tutorial_progress = ^combat_instructor_unequipping_items) {
            def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
            def_obj $shield = inv_getobj(worn, ^wearpos_lhand);

            if ($weapon = bronze_sword & $shield = wooden_shield) {
                %tutorial_progress = ^combat_instructor_open_combat_interface;
                ~set_tutorial_progress;
            }
        }
    }

    ~update_all($previous);
}

[proc,unequip](int $slot)
if (p_finduid(uid) = true) {
    def_obj $obj = inv_getobj(worn, $slot);
    if (~duel_arena_flower_power_unequip_check($slot) = false) {
        return;
    }
    if ($obj = gnomeball & ~inzone_coord_pair_table(gnomeball_zones, coord) = true) {
        mes("You feel it would be cheating to put the ball in your pack whilst on the pitch.");
        return;
    }
    def_int $count = inv_getnum(worn, $slot);
    def_int $overflow = inv_itemspace2(inv, $obj, $count, inv_size(inv));
    if ($overflow >= $count) {
        mes("You don't have enough free space to do that.");
        return;
    }
    inv_moveitem(worn, inv, $obj, sub($count, $overflow));
    ~update_all($obj);
}

// used for duel arena, no weapon/no armour
[proc,try_unequip](int $slot)
if (p_finduid(uid) = true) {
    def_obj $obj = inv_getobj(worn, $slot);
    if ($obj = null) {
        return;
    }
    def_int $count = inv_getnum(worn, $slot);
    def_int $overflow = inv_itemspace2(inv, $obj, $count, inv_size(inv));
    if ($overflow >= $count) {
        return;
    }
    inv_moveitem(worn, inv, $obj, sub($count, $overflow));
    ~update_all($obj);
}

[proc,.try_unequip](int $slot)
if (.p_finduid(.uid) = true) {
    def_obj $obj = .inv_getobj(worn, $slot);
    if ($obj = null) {
        return;
    }
    def_int $count = .inv_getnum(worn, $slot);
    def_int $overflow = .inv_itemspace2(inv, $obj, $count, .inv_size(inv));
    if ($overflow >= $count) {
        return;
    }
    .inv_moveitem(worn, inv, $obj, sub($count, $overflow));
    ~.update_all($obj);
}

[proc,update_bonuses]
def_int $stabattack;
def_int $slashattack;
def_int $crushattack;
def_int $magicattack;
def_int $rangeattack;
def_int $stabdefence;
def_int $slashdefence;
def_int $crushdefence;
def_int $magicdefence;
def_int $rangedefence;
def_int $strengthbonus;
def_int $prayerbonus;
def_int $rangebonus;

$stabattack,
$slashattack,
$crushattack,
$magicattack,
$rangeattack,
$stabdefence,
$slashdefence,
$crushdefence,
$magicdefence,
$rangedefence,
$strengthbonus,
$prayerbonus,
$rangebonus = ~equip_get_bonuses;

~update_bonus_text(wornitems:stabattack, "Stab", $stabattack);
~update_bonus_text(wornitems:slashattack, "Slash", $slashattack);
~update_bonus_text(wornitems:crushattack, "Crush", $crushattack);
~update_bonus_text(wornitems:magicattack, "Magic", $magicattack);
~update_bonus_text(wornitems:rangeattack, "Range", $rangeattack);
~update_bonus_text(wornitems:stabdefence, "Stab", $stabdefence);
~update_bonus_text(wornitems:slashdefence, "Slash", $slashdefence);
~update_bonus_text(wornitems:crushdefence, "Crush", $crushdefence);
~update_bonus_text(wornitems:magicdefence, "Magic", $magicdefence);
~update_bonus_text(wornitems:rangedefence, "Range", $rangedefence);
~update_bonus_text(wornitems:strengthbonus, "Strength", $strengthbonus);
~update_bonus_text(wornitems:prayerbonus, "Prayer", $prayerbonus);

[proc,.update_bonuses]
def_int $stabattack;
def_int $slashattack;
def_int $crushattack;
def_int $magicattack;
def_int $rangeattack;
def_int $stabdefence;
def_int $slashdefence;
def_int $crushdefence;
def_int $magicdefence;
def_int $rangedefence;
def_int $strengthbonus;
def_int $prayerbonus;
def_int $rangebonus;

$stabattack,
$slashattack,
$crushattack,
$magicattack,
$rangeattack,
$stabdefence,
$slashdefence,
$crushdefence,
$magicdefence,
$rangedefence,
$strengthbonus,
$prayerbonus,
$rangebonus = ~.equip_get_bonuses;

~.update_bonus_text(wornitems:stabattack, "Stab", $stabattack);
~.update_bonus_text(wornitems:slashattack, "Slash", $slashattack);
~.update_bonus_text(wornitems:crushattack, "Crush", $crushattack);
~.update_bonus_text(wornitems:magicattack, "Magic", $magicattack);
~.update_bonus_text(wornitems:rangeattack, "Range", $rangeattack);
~.update_bonus_text(wornitems:stabdefence, "Stab", $stabdefence);
~.update_bonus_text(wornitems:slashdefence, "Slash", $slashdefence);
~.update_bonus_text(wornitems:crushdefence, "Crush", $crushdefence);
~.update_bonus_text(wornitems:magicdefence, "Magic", $magicdefence);
~.update_bonus_text(wornitems:rangedefence, "Range", $rangedefence);
~.update_bonus_text(wornitems:strengthbonus, "Strength", $strengthbonus);
~.update_bonus_text(wornitems:prayerbonus, "Prayer", $prayerbonus);

[proc,equip_get_bonuses]()(int, int, int, int, int, int, int, int, int, int, int, int, int)
def_int $stabattack = 0;
def_int $slashattack = 0;
def_int $crushattack = 0;
def_int $magicattack = 0;
def_int $rangeattack = 0;
def_int $stabdefence = 0;
def_int $slashdefence = 0;
def_int $crushdefence = 0;
def_int $magicdefence = 0;
def_int $rangedefence = 0;
def_int $strengthbonus = 0;
def_int $prayerbonus = 0;
def_int $rangebonus = 0;

def_int $size = inv_size(worn);
def_int $i = 0;
while ($i < $size) {
    def_obj $obj = inv_getobj(worn, $i);
    if ($obj ! null) {
        $stabattack = calc($stabattack + oc_param($obj, stabattack));
        $slashattack = calc($slashattack + oc_param($obj, slashattack));
        $crushattack = calc($crushattack + oc_param($obj, crushattack));
        $magicattack = calc($magicattack + oc_param($obj, magicattack));
        $rangeattack = calc($rangeattack + oc_param($obj, rangeattack));
        $stabdefence = calc($stabdefence + oc_param($obj, stabdefence));
        $slashdefence = calc($slashdefence + oc_param($obj, slashdefence));
        $crushdefence = calc($crushdefence + oc_param($obj, crushdefence));
        $magicdefence = calc($magicdefence + oc_param($obj, magicdefence));
        $rangedefence = calc($rangedefence + oc_param($obj, rangedefence));
        $strengthbonus = calc($strengthbonus + oc_param($obj, strengthbonus));
        $prayerbonus = calc($prayerbonus + oc_param($obj, prayerbonus));
        $rangebonus = calc($rangebonus + oc_param($obj, rangebonus));
    }
    $i = calc($i + 1);
}
return($stabattack, $slashattack, $crushattack, $magicattack, $rangeattack, $stabdefence, $slashdefence, $crushdefence, $magicdefence, $rangedefence, $strengthbonus, $prayerbonus, $rangebonus);

[proc,.equip_get_bonuses]()(int, int, int, int, int, int, int, int, int, int, int, int, int)
def_int $stabattack = 0;
def_int $slashattack = 0;
def_int $crushattack = 0;
def_int $magicattack = 0;
def_int $rangeattack = 0;
def_int $stabdefence = 0;
def_int $slashdefence = 0;
def_int $crushdefence = 0;
def_int $magicdefence = 0;
def_int $rangedefence = 0;
def_int $strengthbonus = 0;
def_int $prayerbonus = 0;
def_int $rangebonus = 0;

def_int $size = .inv_size(worn);
def_int $i = 0;
while ($i < $size) {
    def_obj $obj = .inv_getobj(worn, $i);
    if ($obj ! null) {
        $stabattack = calc($stabattack + oc_param($obj, stabattack));
        $slashattack = calc($slashattack + oc_param($obj, slashattack));
        $crushattack = calc($crushattack + oc_param($obj, crushattack));
        $magicattack = calc($magicattack + oc_param($obj, magicattack));
        $rangeattack = calc($rangeattack + oc_param($obj, rangeattack));
        $stabdefence = calc($stabdefence + oc_param($obj, stabdefence));
        $slashdefence = calc($slashdefence + oc_param($obj, slashdefence));
        $crushdefence = calc($crushdefence + oc_param($obj, crushdefence));
        $magicdefence = calc($magicdefence + oc_param($obj, magicdefence));
        $rangedefence = calc($rangedefence + oc_param($obj, rangedefence));
        $strengthbonus = calc($strengthbonus + oc_param($obj, strengthbonus));
        $prayerbonus = calc($prayerbonus + oc_param($obj, prayerbonus));
        $rangebonus = calc($rangebonus + oc_param($obj, rangebonus));
    }
    $i = calc($i + 1);
}
return($stabattack, $slashattack, $crushattack, $magicattack, $rangeattack, $stabdefence, $slashdefence, $crushdefence, $magicdefence, $rangedefence, $strengthbonus, $prayerbonus, $rangebonus);


[proc,update_bonus_text](component $com, string $name, int $bonus)
def_string $sign = "+";
if ($bonus < 0) {
    $sign = "";
}
if_settext($com, "<$name>: <$sign><tostring($bonus)>");

[proc,.update_bonus_text](component $com, string $name, int $bonus)
def_string $sign = "+";
if ($bonus < 0) {
    $sign = "";
}
.if_settext($com, "<$name>: <$sign><tostring($bonus)>");

[proc,update_weight]
// TODO

// proc used for validating proper inv spacing and obj swapping.
// checks for 3 possible wearpos of chosen item and validates colliding wearpos of currently equipped items
// recursively does this validation and returns false if a condition fails
// returns true if all conditions pass and the items were moved
//
//
// requirements before i forget
// =================================================================================
// WHEN I equip an item
// WHILE I AM wearing an item that my equipping item slot goes to
// THEN I should see the item I equip go to the correct slot in the worn inv
// AND I should see the item that is unequipped go to the same slot I clicked in my inv
// ALSO I should see any additional items that get unequipped go to the next available slot in my inv
// =================================================================================
// WHEN I equip a shield
// WHILE I AM wearing a 2h weapon in the right hand
// THEN I should unequip the 2h weapon and equip the shield
// AND the opposite way of this scenario
// =================================================================================
// WHEN I equip a stackable obj
// WHILE I am wearing a stackable obj that my equipping item slot goes to
// AND the equipping stackable obj is the same obj that I am wearing
// THEN I should equip as many of the stackable obj that I can to the stack limit
// ALSO if the equipping stackable obj is not the same obj that I am wearing
// AND I have enough space in my inv to unequip the stackable obj from my worn inv (does not exceed stack limit by combining worn + inv)
// THEN I should unequip the stackable obj from my worn and equip the stackable obj from my inv
// =================================================================================

[proc,.update_weight]

[proc,equip_validate_and_move](obj $obj, int $count, int $slot, int $slot1, int $slot2, int $slot3, boolean $move_item, boolean $colliders, boolean $swapped)(boolean)
if ($slot1 ! null) {
    def_boolean $primary;
    $primary, $swapped = ~equip_validate_and_move_primary($obj, $count, $slot, $slot1, $move_item, $swapped);
    if ($primary = false) {
        return(false);
    }
}
if ($slot2 ! null) {
    def_boolean $secondary;
    $secondary, $swapped = ~equip_validate_and_move_secondary($count, $slot, $slot1, $slot2, $move_item, $swapped, 0);
    if ($secondary = false) {
        return(false);
    }
}
if ($slot3 ! null) {
    def_boolean $secondary2;
    $secondary2, $swapped = ~equip_validate_and_move_secondary($count, $slot, $slot2, $slot3, $move_item, $swapped, 1);
    if ($secondary2 = false) {
        return(false);
    }
}

def_boolean $success = true;
if ($colliders = true) {
    // third: we have to check the other slots to see if they conflict with this item, and if so, remove them
    // e.g. kiteshield defines only wearpos=lefthand but 2h defines wearpos=righthand wearpos2=lefthand.
    //      if you equip 2h then kiteshield, the 2h should be removed
    def_int $size = inv_size(worn);
    def_int $i = 0;
    while ($i < $size & $success = true) {
        def_obj $other_obj = inv_getobj(worn, $i);
        if ($other_obj ! null) {
            def_int $other_count = inv_getnum(worn, $i);
            def_int $other_slot2 = oc_wearpos2($other_obj);
            def_int $other_slot3 = oc_wearpos3($other_obj);

            if ($other_count > 0 & $other_slot2 = $slot1 | $other_slot3 = $slot1) {
                if ($move_item = true) {
                    if ($swapped = true) {
                        inv_moveitem(worn, inv, $other_obj, $other_count);
                    } else {
                        inv_movetoslot(worn, inv, $i, $slot);
                        $swapped = true;
                    }
                } else if (~equip_validate_and_move($other_obj, $other_count, null, null, $other_slot2, $other_slot3, $move_item, false, $swapped) = false) {
                    $success = false;
                }
            }
        }
        $i = calc($i + 1);
    }
    if ($success = false) {
        return(false);
    }
}

if ($move_item = true | $colliders = false) {
    return(true);
}
return(~equip_validate_and_move($obj, $count, $slot, $slot1, $slot2, $slot3, true, true, false));

[proc,equip_validate_and_move_primary](obj $obj, int $count, int $slot, int $primary_slot, boolean $move_item, boolean $swapped)(boolean, boolean)
def_obj $primary_obj = inv_getobj(worn, $primary_slot);
def_int $primary_count = inv_getnum(worn, $primary_slot);

if ($primary_count > 0 & oc_stackable($primary_obj) = false) {
    // osrs directly swaps the worn obj to the slot you clicked
    // there is a guaranteed free slot when equipping basically
    if ($move_item = true) {
        inv_movetoslot(inv, worn, $slot, $primary_slot);
    }
    $swapped = true;
} else if ($primary_count > 0 & oc_stackable($primary_obj) = true) {
    // it is guaranteed here the player is wearing the stackable obj
    // check for stackable overflow
    // source - trust me
    if ($obj = $primary_obj) {
        def_int $overflow = inv_itemspace2(worn, $primary_obj, $count, inv_size(worn));
        if ($overflow >= $count) {
            return(false, $swapped);
        }
        if ($move_item = true) {
            // since we are equipping a stackable obj that we are already wearing
            // then just calc out the differences
            inv_moveitem(inv, worn, $primary_obj, sub($count, $overflow));
            $swapped = true;
        }
    } else {
        // according to kris:
        // imagine u got 2b chins equipped and 1b in inventory
        // u cant now equip another weapon
        // a free inv slot is guarantee as long as the player does not already have the obj.
        if (inv_total(inv, $primary_obj) > 0 & inv_itemspace(inv, $primary_obj, $primary_count, inv_size(inv)) = false) {
            return(false, $swapped);
        }
        if ($move_item = true) {
            // if this executes we already assert we have space to do stuff.
            // a free space is guarantee from doing the swap.
            // if the player already has the item then we need to move the worn slot to inv slot first.
            if (inv_total(inv, $primary_obj) > 0) {
                inv_moveitem(worn, inv, $primary_obj, $primary_count);
            }
            // then move the clicked inv obj to the worn slot.
            inv_movetoslot(inv, worn, $slot, $primary_slot);
            $swapped = true;
        }
    }
} else if ($primary_count = 0 & $move_item = true) {
    inv_movetoslot(inv, worn, $slot, $primary_slot);
}
return(true, $swapped);

[proc,equip_validate_and_move_secondary](int $count, int $slot, int $previous_secondary_slot, int $secondary_slot, boolean $move_item, boolean $swapped, int $index)(boolean, boolean)
def_obj $secondary_obj = inv_getobj(worn, $secondary_slot);
def_int $secondary_count = inv_getnum(worn, $secondary_slot);

if ($secondary_count > 0 & oc_stackable($secondary_obj) = false) {
    def_int $required_space = add(1, $index);
    if ($swapped = false) {
        $required_space = max(0, sub($required_space, 1));
    }
    if ($previous_secondary_slot ! -1 & inv_getnum(worn, $previous_secondary_slot) = 0) {
        $required_space = max(0, sub($required_space, 1));
    }
    if (inv_freespace(inv) < $required_space) {
        return(false, $swapped);
    }
    if ($move_item = true) {
        // move obj from worn to inv
        // the obj must not be stackable here
        // the inv must have atleast 1 extra free space in the inventory to move it
        if ($swapped = true) {
            inv_moveitem(worn, inv, $secondary_obj, $secondary_count);
        } else {
            inv_movetoslot(worn, inv, $secondary_slot, $slot);
            // for each of these extra wearpos slot checks
            // we check for swapped on all 3 bcos gotta make sure the first item
            // that is unequipped goes to the inv slot that was clicked to initiate the equipping
            $swapped = true;
        }
    }
} else if ($secondary_count > 0 & oc_stackable($secondary_obj) = true) {
    // check for stackable overflow
    // pretty sure this scenario is impossible to happen
    // for example if equipping an obj that removes a wearpos that you have
    // equipped that is stackable
    if (inv_itemspace(inv, $secondary_obj, $count, inv_size(inv)) = false) {
        return(false, $swapped);
    }
}
return(true, $swapped);


[proc,update_weight_equipment] // can change to use categories and param when more weight reduction equipment exists
if(inv_total(worn, boots_of_lightness_inv) > 0 & map_members = true) { // convert inv boots to worn boots if in p2p
    inv_del(worn, boots_of_lightness_inv, 1);
    inv_setslot(worn, ^wearpos_feet, boots_of_lightness_worn, 1);
} else if(inv_total(worn, boots_of_lightness_worn) > 0 & map_members = false) { // convert worn boots to inv boots (in worn inv) if in f2p 
    inv_del(worn, boots_of_lightness_worn, 1);
    inv_setslot(worn, ^wearpos_feet, boots_of_lightness_inv, 1);
}

if(inv_total(inv, boots_of_lightness_worn) > 0) {
    def_int $count = inv_total(inv, boots_of_lightness_worn); // shouldnt ever be above 1?
    inv_del(inv, boots_of_lightness_worn, $count); // should use inv_changeslot probably
    inv_add(inv, boots_of_lightness_inv, $count);
}