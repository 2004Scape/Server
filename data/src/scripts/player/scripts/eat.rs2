[opheld1,_category_5]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_15]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_58]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_59]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_86]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_120]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_123]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_125]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_127]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_128]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_129]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_130]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_131]@player_eat_item(last_slot, 3, 3);
[opheld1,_category_132]@player_eat_item(last_slot, 3, 3);
[opheld1,obj_2281]@player_eat_item(last_slot, 3, 3);

[label,player_eat_item](int $slot, int $eat_delay, int $skill_delay)
// verify object
def_obj $obj = inv_getobj(inv, $slot);
if ($obj = null) return;
if (objectverify($obj, last_verifyobj) = false) {
    inv_resendslot(inv, 0);
    return;
}
// close interface, clear any interactions
if_close;
//p_stopaction;
// check if item is members
if (oc_members($obj) = true) {
    // complete guess
    ~require_members_use_item;
}
// eat delay
if (%skill_clock < map_clock) {
    %skill_clock = calc(map_clock + 2);
    // %skill_clock = calc(%skill_clock + 3);
} else {
    return;
}
anim(human_eat, 0);
sound_synth(eat, 0, 0);
// change item to its next stage. default is null
inv_setslot(inv, $slot, oc_param($obj, next_obj_stage), 1);
// heal player
stat_heal(hitpoints, oc_param($obj, heal_amount), 100);
// eating message
def_string $message = oc_param($obj, eat_message);
if (string_length($message) < 1) {
    $message = "You eat the <lowercase(oc_name($obj))>.";
}
mes($message);


[debugproc,eattest]
// test eating
inv_add(inv, salmon, 4);
inv_add(inv, cooked_meat, 4);
inv_add(inv, jug_of_wine, 4);
inv_add(inv, bread, 1);
inv_add(inv, cake, 1);
inv_add(inv, chocolate_cake, 1);
inv_add(inv, meat_pie, 1);
inv_add(inv, pizza, 1);
inv_add(inv, stew, 1);
