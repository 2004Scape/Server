
[label,consume_effect_stat]
def_obj $consumable = last_item;
~consume_effect_apply($consumable, false);

// change item to its next stage. default is null
inv_delslot(inv, last_slot);
inv_setslot(inv, last_slot, oc_param($consumable, next_obj_stage), 1);


// stat2 uses inv_delslot and inv_add
// this is used for cocktails
[label,consume_effect_stat2]
def_obj $consumable = last_item;
~consume_effect_apply($consumable, false);

inv_delslot(inv, last_slot);
inv_add(inv, oc_param($consumable, next_obj_stage), 1);


[label,consume_effect_stat_say]
def_obj $consumable = last_item;
~consume_effect_apply($consumable, true);

// change item to its next stage. default is null
inv_delslot(inv, last_slot);
inv_setslot(inv, last_slot, oc_param($consumable, next_obj_stage), 1);


[proc,consume_effect_apply](obj $consumable, boolean $say)
def_int $hitpoints = stat(hitpoints);
db_find(consume_table:consumable, $consumable);
def_dbrow $effect_data = db_findnext;
if ($effect_data = null) {
    @nothing_interesting_happens;
}
// stat increase/decrease
def_int $constant;
def_int $percent;
def_stat $stat;
def_int $i = 0;
while ($i < db_getfieldcount($effect_data, consume_table:stat_change)) {
    $stat, $constant, $percent = db_getfield($effect_data, consume_table:stat_change, $i);
    if ($constant < 0 | $percent < 0) {
        // decrease
        // if hitpoints, damage instead
        if ($stat = hitpoints) {
            // not sure if it uses multiple hit sounds, or if theres a 15 client tick delay
            def_int $damage = calc(scale(abs($percent), 100, stat(hitpoints)) + abs($constant));
            ~damage_self($damage);
        } else {
            stat_sub($stat, abs($constant), abs($percent));
        }
    } else {
        // increase
        ~stat_addclamp($stat, $constant, $percent);
    }
    $i = calc($i + 1);
}
// stat restore
$i = 0;
while ($i < db_getfieldcount($effect_data, consume_table:stat_restore)) {
    stat_heal(db_getfield($effect_data, consume_table:stat_restore, $i));
    $i = calc($i + 1);
}
// start sound
~consume_effect_sound(db_getfield($effect_data, consume_table:consume_sound, 0));
// display messages
~consume_effect_message($consumable, $hitpoints, $say);

[proc,consume_effect_sound](synth $sound)
if ($sound = null) {
    sound_synth(liquid, 0, 0);
} else {
    sound_synth($sound, 0, 0);
}

[proc,consume_effect_message](obj $consumable, int $hitpoints, boolean $say)
db_find(consume_messages_table:consumable, $consumable);
def_dbrow $message_data = db_findnext;
def_string $consume_message1;
def_string $consume_message2;
def_string $restore_message;
if ($message_data ! null) {
    if (string_length(db_getfield($message_data, consume_messages_table:consume_message1, 0)) > 0) {
        $consume_message1 = db_getfield($message_data, consume_messages_table:consume_message1, 0);
    }
    if (string_length(db_getfield($message_data, consume_messages_table:consume_message2, 0)) > 0) {
        $consume_message2 = db_getfield($message_data, consume_messages_table:consume_message2, 0);
    }
    if (string_length(db_getfield($message_data, consume_messages_table:restore_message, 0)) > 0) {
        $restore_message = db_getfield($message_data, consume_messages_table:restore_message, 0);
    }
}
def_boolean $display_consume_message1;
def_boolean $display_consume_message2;
def_boolean $display_restore_message;
if (string_length($consume_message1) > 0) {
    $display_consume_message1 = true;
}
if (string_length($consume_message2) > 0 & compare($consume_message2, "0") ! 0) {
    $display_consume_message2 = true;
}
if (string_length($restore_message) > 0 & compare($restore_message, "0") ! 0) {
    $display_restore_message = true;
}
if (oc_category($consumable) = category_69) {
    $consumable = oc_param($consumable, next_obj_stage);
    if (compare($consume_message1, "0") ! 0) {
        if ($display_consume_message1 = true) {
            mes($consume_message1);
        } else {
            mes("You eat the <lowercase(oc_name($consumable))>.");
        }
    }
    if ($consumable = vial_empty) {
        mes("You have finished your potion");
        return;
    }
    $consumable = oc_param($consumable, next_obj_stage);
    if ($consumable = vial_empty) {
        mes("You have 1 dose of potion left.");
        return;
    }
    $consumable = oc_param($consumable, next_obj_stage);
    if ($consumable = vial_empty) {
        mes("You have 2 doses of potion left.");
        return;
    }
    $consumable = oc_param($consumable, next_obj_stage);
    if ($consumable = vial_empty) {
        mes("You have 3 doses of potion left.");
        return;
    }
}
if (compare($consume_message1, "0") ! 0) {
    // if all three messages are defined, and player is damaged, go consume_message2 -> restore_message. Else consume_message1
    if ($display_consume_message2 = true & $display_restore_message = true & $display_consume_message1 = true) {
        if ($hitpoints < stat(hitpoints)) {
            mes($consume_message2);
            mes($restore_message);
        } else {
            mes($consume_message1);
        }
        return;
    }
    // normally foods only have 1 or 2 defined. if consume message 
    // restore message prioritizes of consume_message if only 2 are defined
    if (compare($consume_message1, "0") ! 0) {
        if ($display_consume_message1 = true) {
            mes($consume_message1);
        } else {
            mes("You eat the <lowercase(oc_name($consumable))>.");
        }
    }
    if ($say = true) {
        say($consume_message2);
    } else if ($hitpoints < stat(hitpoints) & $display_restore_message = true) {
        mes($restore_message);
    } else if ($display_consume_message2 = true) {
        mes($consume_message2);
    } else if ($hitpoints < stat(hitpoints) & string_length($restore_message) < 1 & compare($restore_message, "0") ! 0){
        // display default
        mes("It heals some health.");
    }
}