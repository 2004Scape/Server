[debugproc,fletchbank]
~require_members_feature;
def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
if ($choice = 2) {
    return;
}
inv_clear(bank);
// add a bunch of fletch items to bank
inv_add(bank, knife, 1000);
inv_add(bank, arrow_shaft, 1000);
inv_add(bank, obj_53, 1000);
inv_add(bank, feather, 1000);
inv_add(bank, bronze_arrowheads, 1000);
inv_add(bank, iron_arrowheads, 1000);
inv_add(bank, steel_arrowheads, 1000);
inv_add(bank, mithril_arrowheads, 1000);
inv_add(bank, adamant_arrowheads, 1000);
inv_add(bank, rune_arrowheads, 1000);
inv_add(bank, bronze_dart_tip, 1000);
inv_add(bank, iron_dart_tip, 1000);
inv_add(bank, steel_dart_tip, 1000);
inv_add(bank, mithril_dart_tip, 1000);
inv_add(bank, adamant_dart_tip, 1000);
inv_add(bank, rune_dart_tip, 1000);
inv_add(bank, bolt, 1000);
inv_add(bank, obj_45, 1000);
inv_add(bank, obj_46, 1000);
inv_add(bank, obj_47, 1000);
inv_add(bank, obj_48, 1000);
inv_add(bank, obj_50, 1000);
inv_add(bank, obj_54, 1000);
inv_add(bank, obj_56, 1000);
inv_add(bank, obj_58, 1000);
inv_add(bank, obj_60, 1000);
inv_add(bank, obj_62, 1000);
inv_add(bank, obj_64, 1000);
inv_add(bank, obj_66, 1000);
inv_add(bank, obj_68, 1000);
inv_add(bank, obj_70, 1000);
inv_add(bank, obj_72, 1000);
//add logs
inv_add(bank, logs, 1000);
inv_add(bank, oak_logs, 1000);
inv_add(bank, willow_logs, 1000);
inv_add(bank, maple_logs, 1000);
inv_add(bank, yew_logs, 1000);
inv_add(bank, magic_logs, 1000);
// bow string
inv_add(bank, bow_string, 1000);
//ogre
inv_add(bank, achey_logs, 1000);
inv_add(bank, obj_2864, 1000);
inv_add(bank, obj_2865, 1000);
inv_add(bank, wolf_bones, 1000);
inv_add(bank, chisel, 1000);


// arrows
[opheldu,_category_968]
switch_obj(last_useitem) {
    case obj_53 : @make_arrows(last_item);
    case default : @nothing_interesting_happens;
}

[opheldu,obj_53]
switch_obj(last_useitem) {
    case default : 
        if (oc_category(last_useitem) = category_968) {
            @make_arrows(last_useitem);
        } else {
            @nothing_interesting_happens;
        }
}

[opheldu,arrow_shaft]
switch_obj(last_useitem) {
    case feather : @make_headless_arrows;
    case default : @nothing_interesting_happens;
}

// darts
[opheldu,_category_969]
switch_obj(last_useitem) {
    case feather : @make_darts(last_item);
    case default : @nothing_interesting_happens;
}
[opheldu,feather]
switch_obj(last_useitem) {
    case obj_2864 : @make_ogre_headless_arrows;
    case default :
        if (oc_category(last_useitem) = category_969) {
            @make_darts(last_useitem);
        } else {
            @nothing_interesting_happens;
        }
}

// stringing
[opheldu,_unstrung_bow]
switch_obj(last_useitem) {
    case bow_string : @string_bow(last_item);
    case default : @nothing_interesting_happens;
}

[opheldu,bow_string]
switch_obj(last_useitem) {
    case default :
        if (oc_category(last_useitem) = unstrung_bow) {
            @string_bow(last_useitem);
        } else {
            @nothing_interesting_happens;
        }
}
// bolts
[opheldu,_category_530]
switch_obj(last_useitem) {
    case bolt : @make_bolts(last_item);
    case default : @nothing_interesting_happens;
}
[opheldu,bolt]
switch_obj(last_useitem) {
    case default :
        if (oc_category(last_useitem) = category_530) {
            @make_bolts(last_useitem);
        } else {
            @nothing_interesting_happens;
        }
}

// logs
[opheldu,_category_22]
switch_obj(last_useitem) {
    case knife : @fletch_log(last_item);
    case default : @nothing_interesting_happens;
}


[label,make_headless_arrows]
~require_members_fletching;
def_int $feather_count = min(inv_total(inv, feather), 15);
def_int $shaft_count = min(inv_total(inv, arrow_shaft), 15);
def_int $arrow_count = min($feather_count, $shaft_count);

// delete supplies
inv_del(inv, feather, $arrow_count);
inv_del(inv, arrow_shaft, $arrow_count);
// osrs/rsc
if ($arrow_count > 1) {
    mes("You attach feathers to <tostring($arrow_count)> arrow shafts.");
} else {
    mes("You attach a feather to an arrow shaft.");
}

givexp(fletching, multiply($arrow_count, 10));
inv_add(inv, obj_53, $arrow_count);


[label,make_arrows](obj $arrow_tips)
~require_members_fletching;
def_int $level = oc_param($arrow_tips, fletching_level);
if (stat(fletching) < $level) {
    // osrs
    // remove the "s" from the end when obj name changes in the future
    ~mesbox("You need a Fletching level of <tostring($level)> to make <lowercase(oc_name(oc_param($arrow_tips, fletching_next_obj_stage)))>s.");
    return;
}
// minimum of 15 arrows
def_int $tip_count = min(inv_total(inv, $arrow_tips), 15);
def_int $headless_count = min(inv_total(inv, obj_53), 15);
def_int $arrows_count = min($tip_count, $headless_count);

// delete supplies
inv_del(inv, $arrow_tips, $arrows_count);
inv_del(inv, obj_53, $arrows_count);
if ($arrows_count > 1) {
    mes("You attach <lowercase(oc_name($arrow_tips))> to <tostring($arrows_count)> headless arrows.");
} else {
    mes("You attach <~add_article(~singularise(lowercase(oc_name($arrow_tips))))> to a headless arrow.");
}
givexp(fletching, multiply($arrows_count, oc_param($arrow_tips, fletching_experience)));
if (oc_param($arrow_tips, fletching_next_obj_stage) ! null) {
    inv_add(inv, oc_param($arrow_tips, fletching_next_obj_stage), $arrows_count);
}


[label,make_darts](obj $dart_tips)
~require_members_fletching;
def_int $level = oc_param($dart_tips, fletching_level);
if (stat(fletching) < $level) {
    // osrs doesnt lowercase
    // remove the "s" from the end when obj name changes in the future
    ~mesbox("You need a Fletching level of <tostring($level)> to make <(oc_name(oc_param($dart_tips, fletching_next_obj_stage)))>s.");
    return;
}
// minimum of 10 darts
def_int $tip_count = min(inv_total(inv, $dart_tips), 10);
def_int $feather_count = min(inv_total(inv, feather), 10);
def_int $darts_count = min($tip_count, $feather_count);

// delete supplies
inv_del(inv, $dart_tips, $darts_count);
inv_del(inv, feather, $darts_count);

// osrs
if ($darts_count > 1) {
    mes("You finish making <tostring($darts_count)> darts.");
} else {
    mes("You finish making one dart.");
}
givexp(fletching, multiply($darts_count, oc_param($dart_tips, fletching_experience)));
if (oc_param($dart_tips, fletching_next_obj_stage) ! null) {
    inv_add(inv, oc_param($dart_tips, fletching_next_obj_stage), $darts_count);
}


[label,make_bolts](obj $bolt_tips)
~require_members_fletching;
def_int $level = oc_param($bolt_tips, fletching_level);
if (stat(fletching) < $level) {
    // osrs
    ~objbox2(bolt, $bolt_tips, "You need a Fletching level of <tostring($level)> to make that kind of bolt.");
    return;
}
// bolts are made through smithing, they can be upgraded with fletching
def_int $tip_count = min(inv_total(inv, $bolt_tips), 10);
def_int $bolt_count = min(inv_total(inv, bolt), 10);
def_int $bolts_count = min($tip_count, $bolt_count);

// delete supplies
inv_del(inv, $bolt_tips, $bolts_count);
inv_del(inv, bolt, $bolts_count);
// osrs
if ($bolts_count > 1) {
    mes("You fletch <tostring($bolts_count)> bolts.");
} else {
    mes("You fletch a bolt.");
}

givexp(fletching, multiply($bolts_count, oc_param($bolt_tips, fletching_experience)));
if (oc_param($bolt_tips, fletching_next_obj_stage) ! null) {
    inv_add(inv, oc_param($bolt_tips, fletching_next_obj_stage), $bolts_count);
}

[label,fletch_log](obj $log)
if ($log = achey_logs) {
    @make_ogre_shafts;
}
~require_members_fletching;
db_find(fletch_bow_table:log, $log);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
def_namedobj $obj1 = arrow_shaft;
def_int $shaft_count = db_getfield($data, fletch_bow_table:shafts, 0);
def_namedobj $obj2;
def_namedobj $obj3;
$obj2, $obj3 = db_getfield($data, fletch_bow_table:objchoices, 0);
def_namedobj $product;
// guess based off 2004
if ($shaft_count < 1) {
    $product = ~obj_choice2("What would you like to make?", 
        $obj2, 0, -15, 175, "<~string_removeright(oc_name($log), 5)> Short Bow.", 0, 0,
        $obj3, 0, -15, 175, "<~string_removeright(oc_name($log), 5)> Long Bow.", 0, 0
    );
} else {
    // 2004
    $product = ~obj_choice3_close("What would you like to make?", 
        $obj1, 175, "Arrow Shafts.",
        $obj2, 175, "Short Bow.",
        $obj3, 175, "Long Bow."
    );
}
def_int $level = 1;
// default to shafts
def_int $count = 1;
def_int $fletching_experience = multiply($shaft_count, 5);
def_string $message;
// 2005-osrs, rsc
if ($product = $obj2) {
    $product, $level, $fletching_experience = db_getfield($data, fletch_bow_table:shortbow, 0);
    $message = "You carefully cut the wood into a shortbow.";
} else if ($product = $obj3) {
    $product, $level, $fletching_experience = db_getfield($data, fletch_bow_table:longbow, 0);
    $message = "You carefully cut the wood into a longbow.";
} else {
    $message = "You carefully cut the wood into <tostring($shaft_count)> arrow shafts.";
    $count = $shaft_count;
    $fletching_experience = multiply($shaft_count, 5);
}
if (stat(fletching) < $level) {
    // osrs has a level 1 fail message for arrow shafts but i doubt 2004 used it
    ~objbox2($log, $product, "You need a Fletching level of at least <tostring($level)> to make <~add_article(lowercase(oc_name($product)))>.");
    return;
}
// make one bow at a time
inv_del(inv, $log, 1);
mes($message);
givexp(fletching, $fletching_experience);
inv_add(inv, $product, $count);


[label,string_bow](obj $unstrung_bow)
~require_members_fletching;

def_int $level = oc_param($unstrung_bow, fletching_level);
if (stat(fletching) < $level) {
    // osrs
    mes("You need level <tostring($level)> Fletching to string that bow.");
    return;
}

// make one bow at a time
inv_del(inv, $unstrung_bow, 1);
inv_del(inv, bow_string, 1);
// 2005-osrs, rsc
mes("You add a string to the bow.");

givexp(fletching, oc_param($unstrung_bow, fletching_experience));
inv_add(inv, oc_param($unstrung_bow, fletching_next_obj_stage), 1);