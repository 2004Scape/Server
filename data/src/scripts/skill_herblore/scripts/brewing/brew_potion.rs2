[opheldu,vial_water]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_guam_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_marrentill_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_tarromin_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_harralander_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_ranarr_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_irit_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_avantoe_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_kwuarm_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_cadantine_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_lantadyme_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_dwarf_weed_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_torstol_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,eye_of_newt]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,red_spiders_eggs]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,limpwurt_root]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unicorn_horn_dust]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,white_berries]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,dragon_scale_dust]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,wine_of_zamorak]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,jangerberries]
~attempt_brew_potion(last_useslot, last_slot);

[proc,attempt_brew_potion](int $use_slot, int $last_slot)
def_obj $used_on = inv_getobj(inv, $last_slot);
def_obj $used_with = inv_getobj(inv, $use_slot);

def_struct $struct = oc_param($used_with, brew_potion_struct);
// 1 = ingredient->solvent, 2 = solvent->ingredient
def_int $used_direction = 1;

// If the item used on the solvent is not a valid ingredient basically.
if ($struct = null) {
    $struct = oc_param($used_on, brew_potion_struct);
    $used_direction = 2;

    if ($struct = null) {
        ~displaymessage(^dm_default);
        return;
    }
}

def_namedobj $ingredient = struct_param($struct, brew_potion_ingredient);
def_namedobj $solvent = struct_param($struct, brew_potion_solvent);

// If there is no first match, attempt to look for a possible second.
if (($used_direction = 1 & $used_on ! $solvent) | ($used_direction = 2 & $used_with ! $solvent)) {
    if ($used_direction = 1) {
        $struct = oc_param($used_with, brew_potion_struct_secondary);
    } else {
        $struct = oc_param($used_on, brew_potion_struct_secondary);
    }

    // Secondary struct is optional here.
    if ($struct = null) {
        ~displaymessage(^dm_default);
        return;
    }
    $solvent = struct_param($struct, brew_potion_solvent);
    // If there are no possible matches.
    if ($used_on ! $solvent) {
        ~displaymessage(^dm_default);
        return;
    }
    $ingredient = struct_param($struct, brew_potion_ingredient);
}

~require_members_feature;

def_int $current_level = stat(herblore);
def_int $herb_level = struct_param($struct, brew_potion_level);
// If the player current level is below the required level.
if ($current_level < $herb_level) {
    // https://youtu.be/VthR9A85TQU?t=159
    mes("You need a Herblore level of at least <tostring($herb_level)> to make this potion.");
    return;
}

def_string $message = struct_param($struct, brew_potion_message);
def_namedobj $mixture = struct_param($struct, brew_potion_mixture);

if ($mixture = null) {
    ~displaymessage(^dm_default);
    return;
}

def_int $experience = struct_param($struct, brew_potion_exp);

~brew_potion($struct, $ingredient, $solvent, $message, $mixture, $experience);
