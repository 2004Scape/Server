[opheldu,vial_water]
if(last_useitem = ground_bat_bones) {
  @bat_bones_evaporate;
  return;
}
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_guam_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_marrentill_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_tarromin_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_harralander_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_ranarr_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_irit_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_avantoe_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_kwuarm_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_cadantine_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_lantadyme_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_dwarf_weed_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unf_torstol_potion]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,eye_of_newt]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,red_spiders_eggs]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,limpwurt_root]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,unicorn_horn_dust]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,white_berries]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,dragon_scale_dust]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,wine_of_zamorak]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,jangerberries]
~attempt_brew_potion(last_useslot, last_slot);

[opheldu,vial_water_jangerberries]
~attempt_brew_potion(last_useslot, last_slot);

[proc,attempt_brew_potion](int $use_slot, int $last_slot)(boolean)
// Find the struct of the potion being made (if valid item combo)
def_struct $struct = ~get_brew_struct(inv_getobj(inv, $last_slot), inv_getobj(inv, $use_slot));
if ($struct = null) {
    ~displaymessage(^dm_default);
    return(false);
}

if (map_members = false) {
    mes(^mes_members_herblore);
    return(false);
}

// If the player current level is below the required level.
def_int $current_level = stat(herblore);
def_int $herb_level = struct_param($struct, brew_potion_level);
if ($current_level < $herb_level) {
    // https://youtu.be/VthR9A85TQU?t=159
    mes("You need a Herblore level of at least <tostring($herb_level)> to make this potion.");
    return(false);
}

// Brew the potion
def_namedobj $mixture = struct_param($struct, brew_potion_mixture);
def_string $message = struct_param($struct, brew_potion_message);
def_namedobj $ingredient = struct_param($struct, brew_potion_ingredient);
def_namedobj $solvent = struct_param($struct, brew_potion_solvent);
def_int $experience = struct_param($struct, brew_potion_exp);
if ($mixture = null) {
    ~displaymessage(^dm_default);
    return(false);
}
if ($mixture = explodingvial) {
    ~potion_explosion($ingredient, $solvent, $message);
    return(false);
}
~brew_potion($struct, $ingredient, $solvent, $message, $mixture, $experience);
return(true);

[proc,get_brew_struct](obj $used_on, obj $used_with)(struct)
// Figure out which item is the additive/secondary item
def_obj $secondary = $used_with;
def_struct $struct = oc_param($secondary, brew_potion_struct);
if ($struct = null) {
    $secondary = $used_on;
    $struct = oc_param($secondary, brew_potion_struct);
}
// Neither item has potion struct(s) defined
if ($struct = null) {
    return(null);
}
// Check if trying to make the first possible potion
if (~is_valid_brewing_pair($used_on, $used_with, $struct) = true) {
    return($struct);
}
// Check if trying to make the second possible potion (if any)
$struct = oc_param($secondary, brew_potion_struct_secondary);
if (~is_valid_brewing_pair($used_on, $used_with, $struct) = true) {
    return($struct);
}
// Check if trying to make the third possible potion (if any)
$struct = oc_param($secondary, brew_potion_struct_tertiary);
if (~is_valid_brewing_pair($used_on, $used_with, $struct) = true) {
    return($struct);
}
return(null);

[proc,is_valid_brewing_pair](obj $used_on, obj $used_with, struct $struct)(boolean)
if ($struct = null) {
    return(false);
}
def_namedobj $ingredient = struct_param($struct, brew_potion_ingredient);
def_namedobj $solvent = struct_param($struct, brew_potion_solvent);
if ($used_on = $ingredient & $used_with = $solvent) {
    return(true);
}
if ($used_on = $solvent & $used_with = $ingredient) {
    return(true);
}
return(false);
