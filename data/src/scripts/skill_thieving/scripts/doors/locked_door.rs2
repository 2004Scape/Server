[oploc1,loc_2550]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2551]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2554]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2555]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2556]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2557]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc1,loc_2558]
~attempt_open_locked_door(loc_type, ~not_bool(~check_axis_locactive(coord)));

[oploc1,loc_2559]
~attempt_open_locked_door(loc_type, ~check_axis_locactive(coord));

[oploc2,loc_2550]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2551]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2554]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2555]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2556]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2557]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[oploc2,loc_2558]
~pick_locked_door(loc_type, loc_coord, ~not_bool(~check_axis_locactive(coord)));

[oploc2,loc_2559]
~pick_locked_door(loc_type, loc_coord, ~check_axis_locactive(coord));

[proc,attempt_open_locked_door](loc $loc, boolean $entering)
~require_members_feature;

// check if player is outside
if ($entering = true) {
    mes("This door is locked.");
    sound_synth(locked, 0, 0);
    return;
}

db_find(locked_door:loc, $loc);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
def_loc $replacement = db_getfield($data, locked_door:replacement, 0);

mes("You go through the door.");
~open_and_close_door($replacement, ~check_axis_locactive(coord), true);

[proc,pick_locked_door](loc $loc, coord $loc_coord, boolean $entering)
~require_members_feature;

db_find(locked_door:loc, $loc);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}

def_loc $replacement = db_getfield($data, locked_door:replacement, 0);
if ($entering = true) {
    if (db_getfieldcount($data, locked_door:tool) > 0) {
        def_namedobj $tool;
        def_string $name;
        $tool, $name = db_getfield($data, locked_door:tool, 0);
        if (inv_total(inv, $tool) = 0) {
            mes("You need a <$name> for this lock.");
            return;
        }
    }

    mes("You attempt to pick the lock.");

    def_int $current_level = stat(thieving);
    def_int $thieving_level = db_getfield($data, locked_door:level, 0);

    if ($current_level < $thieving_level) {
        ~mesbox("You need level <tostring($thieving_level)> Thieving to pick this lock.");
        return;
    }

    def_int $roll = random(100);
    if ($roll < 50) { // Some arbitrary rng.
        mes("You fail to pick the lock.");
        return;
    }
    mes("You manage to pick the lock.");

    def_int $experience = db_getfield($data, locked_door:experience, 0);
    givexp(thieving, $experience);

    ~open_and_close_door($replacement, ~check_axis_locactive(coord), true);
    p_delay(0);
    facesquare($loc_coord);
    return;
}
mes("The door is already unlocked.");
p_delay(0);
mes("You go through the door.");
~open_and_close_door($replacement, ~check_axis_locactive(coord), true);
