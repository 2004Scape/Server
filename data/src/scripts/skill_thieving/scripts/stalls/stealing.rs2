[oploc2,tea_stall_stealing] // Tea stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,silk_stall_stealing] // Silk stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,bakers_stall_stealing] // Baker's stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,gem_stall_stealing] // Gem stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,fur_stall_stealing] // Fur stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,spice_stall_stealing] // Spice stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[oploc2,silver_stall_stealing] // Silver stall
~attempt_steal_from_stall(loc_type, loc_coord, loc_angle, loc_shape);

[proc,attempt_steal_from_stall](loc $loc, coord $loc_coord, int $loc_angle, locshape $loc_shape)
p_arrivedelay;
~require_members_feature;

db_find(stealing:loc, $loc);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}

def_string $stall = db_getfield($data, stealing:stall, 0);

if (db_getfieldcount($data, stealing:stall) > 1) {
    def_string $stall_message = db_getfield($data, stealing:stall, 1);
    // This message will still show even if you do not meet the level requirement.
    mes("You attempt to steal <$stall_message> from the <$stall>.");
}

def_int $current_level = stat(thieving);
def_int $thieving_level = db_getfield($data, stealing:level, 0);
if ($current_level < $thieving_level) {
    ~mesbox("You need to be level <tostring($thieving_level)> to steal from the <$stall>.");
    return;
}

def_int $free_space = inv_freespace(inv);
if ($free_space = 0) {
    ~mesbox("Your inventory is too full to hold any more.");
    return;
}

~steal_from_stall($data, $loc_coord, $loc_angle, $loc_shape);

[proc,stealing_check_for_guard](dbrow $data)(boolean)
// todo: makesure this works properly for singles
if (npc_finduid(~stealing_guard_within_distance($data)) = true & npc_getmode() ! opplayer2) {
    npc_say("Hey! Get your hands off there!");
    ~npc_retaliate(0);
    return(true);
}
return(false);

[proc,stealing_check_for_owner](dbrow $data)(boolean)
def_npc $owner = db_getfield($data, stealing:owner, 0);
if (npc_finduid(~npc_within_distance(coord, $owner, 5)) = true & lineofsight(npc_coord, coord) = true) {
    npc_say("Hey! Get your hands off there!");
    return(true);
}

// heros and paladins do not aggro player. They only aggro if the owner yells "Guards! Guards!"
[proc,stealing_guard_within_distance](dbrow $data)(npc_uid)
def_int $i = 0;
def_npc_uid $closest_npc = null;
def_int $closest_distance = 9999;
while ($i < db_getfieldcount($data, stealing:guard)) {
    def_npc $guard = db_getfield($data, stealing:guard, $i);
    if (npc_finduid(~npc_within_distance(coord, $guard, 5)) = true & lineofsight(npc_coord, coord) = true) {
        if (npc_range(coord) < $closest_distance) {
            $closest_distance = npc_range(coord);
            $closest_npc = npc_uid;
        }
    }
    $i = calc($i + 1);
}
return($closest_npc);

[label,stall_owner_alert_guards]
npc_say("You're the one who stole something from me!");
p_delay(1);
npc_say("Guards guards!");
if (npc_finduid(~npc_within_distance(coord, guard_ardougne, 5)) = true | 
    npc_finduid(~npc_within_distance(coord, knight_of_ardougne_1, 5)) = true | 
    npc_finduid(~npc_within_distance(coord, knight_of_ardougne_2, 5)) = true | 
    npc_finduid(~npc_within_distance(coord, paladin, 5)) = true | 
    npc_finduid(~npc_within_distance(coord, npc_365, 5)) = true | 
    npc_finduid(~npc_within_distance(coord, hero, 5)) = true) {
    if (lineofsight(npc_coord, coord) = true) {
        ~npc_retaliate(0);
    }
}