[oploc1,loc_1947]
~require_members_feature;
if(stat(agility) < 5) {
    mes("You need an Agility level of 5 to climb this.");
    return;
}
if(loc_coord ! 0_45_52_55_27) {
    // these walls are reused in the barb course for some reason (not the wall you climb)
    // TODO: figure out what would happen if you interact with those ones
    ~displaymessage(^dm_default);
    return;
}
def_int $dir = ^exact_east; 
def_coord $end = movecoord(loc_coord, 1, 0, 0);
if(coordx(coord) > coordx(loc_coord)) {
    $dir = ^exact_west;
    $end = movecoord(loc_coord, -1, 0, 0);
}
p_delay(0);
~agility_exactmove(human_walk_crumbledwall, 30, 2, coord, $end, 30, 100, $dir, true);
givexp(agility, 5);

[oploc1,loc_2298]
if(stat(agility) < 5) {
    ~mesbox("You need an Agility level of 5 to climb the wall.");
    return;
}
p_telejump(movecoord(loc_coord, 0, 0, 3));
givexp(agility, 250);
mes("You climb over the wall.");

[oploc1,loc_2296]
if(stat(agility) < 20) {
    ~mesbox("You need an Agility level of 20 to balance on this log.");
    return;
}
mes("You walk carefully across the slippery log...");
~set_bas(human_walk_logbalance);
p_teleport(loc_coord);
p_delay(0);
def_int $z_dist = -4;
if(coordx(coord) < 2602) {
    $z_dist = 4;
}
~agility_force_move(80, human_walk_logbalance, movecoord(coord, $z_dist, 0, 0));
mes("...You make it safely to the other side.");

[oploc1,loc_2332]
p_arrivedelay;
def_int $z_dist = -2;
def_coord $turn_coord = 0_45_47_27_47;
def_coord $river_end_coord = 0_45_47_25_48;
def_coord $fail_end_coord = 0_45_47_23_49;
if(coordx(coord) < 2909) {
    $z_dist = 2;
    $turn_coord = 0_45_47_29_48;
    $river_end_coord = 0_45_47_29_50;
    $fail_end_coord = 0_45_47_29_51;
}
mes("You attempt to walk across the slippery log.");
~agility_force_move(0, human_walk_logbalance, movecoord(coord, $z_dist, 0, 0));
if(stat_random(stat(agility), 90, 250) = false) {
    // slip and fall, exact move when falling but force walk afterwards
    mes("You lose your footing and fall into the water.");
    anim(human_sidestep_fall, 0);
    facesquare(movecoord(coord, 0, 0, 2));
    p_delay(0);
    sound_synth(pool_plop, 0, 0);
    p_exactmove(0_45_47_28_41, 0_45_47_28_42, 6, 9, ^exact_north);
    spotanim_map(watersplash, 0_45_47_28_42, 0, 3);
    p_delay(0);
    mes("You're being washed down the river.");
    ~agility_force_move(0, human_swim, movecoord(coord, 0, 0, 4));
    mes("You feel like you're drowning...");
    ~agility_force_move(0, human_swim, $turn_coord);
    ~agility_force_move(0, human_swim, $river_end_coord);
    mes("You finally come to shore.");
    ~agility_force_move(20, human_walk_f, $fail_end_coord);
    ~damage_self(calc(((stat(hitpoints) * 6) / 100) + 1));
    return;
}
mes("You make it across the log without any problems.");
~agility_force_move(40, human_walk_logbalance, movecoord(coord, $z_dist, 0, 0));

[proc,get_island_rope_var](int)
switch_coord (loc_param(start_coord)) {
    case 0_42_50_21_9: return (%brimnorth_ropeswing_used);
    case 0_42_50_17_5: return (%brimsouth_ropeswing_used);
    case 0_39_48_15_19: return (%ogre_ropeswing_used);
}

[proc,set_island_rope_var](int $value)
switch_coord (loc_param(start_coord)) {
    case 0_42_50_21_9: %brimnorth_ropeswing_used = $value;
    case 0_42_50_17_5: %brimsouth_ropeswing_used = $value;
    case 0_39_48_15_19: %ogre_ropeswing_used = $value;
}

[oploc1,_island_rope_swing]
def_int $dist = distance(coord, loc_param(start_coord));
if($dist > 3) {
    mes("You cannot do that from here.");
    return;
}
if(loc_type ! loc_2323 & stat(agility) < 10) { 
    // dont check the inner brimhaven or ogre island swing to prevent getting softlocked
    mes("You need an agility level of 10 to attempt to swing on this vine.");
    return;
}
if(coord ! loc_param(start_coord)) {
    p_delay(0);
    p_walk(loc_param(start_coord));
}
if(~get_island_rope_var >= map_clock) {
    ~mesbox("The rope swing is being used");
    return;
}
~set_island_rope_var(calc(map_clock + 4));
p_delay($dist);
loc_anim(rope_swing);
~agility_exactmove(human_ropeswing, 20, 1, coord, loc_param(end_coord), 45, 70, loc_param(dir), false);
mes("You skillfully swing across.");
givexp(agility, 30);

[oploc1,_monkeybars]
if(stat(agility) < loc_param(agil_level_req) & coordz(loc_coord) ! 9489 & coordz(loc_coord) ! 9969) {
    ~mesbox("You need an Agility level of <tostring(loc_param(agil_level_req))> to swing across the bars.");
    return;
}
def_coord $start_coord = loc_param(start_coord);
def_int $dist_mod = 1;
if(coordz(loc_coord) > coordz(loc_param(start_coord))) {
    $start_coord = loc_param(end_coord);
    $dist_mod = -1;
}
// osrs does this with running, video from july 2006 shows 1 tile walk at the start,
// teleport to the end of the spikes and walk 1 tile to the end of the bars
~forcewalk($start_coord);
facesquare(movecoord(coord, 0, 0, calc($dist_mod)));
anim(monkeybar_jump_up, 0);
p_delay(0);
~agility_force_move(0, monkeybar_move, movecoord(coord, 0, 0, calc($dist_mod * 2)));
// You can only fail the monkeybars in the agility dungeon
if(stat_random(stat(agility), loc_param(obstacle_low_fail), loc_param(obstacle_high_fail)) = false) {
    def_coord $fall_pos = 0_40_149_39_19; 
    if($start_coord = loc_param(start_coord)) {
        $fall_pos = 0_40_149_38_20;
    }
    ~agility_instant_fail($fall_pos, calc(((stat(hitpoints) * 15) / 100) + 1), "You miss the hand hold and fall to the level below.");
    anim(monkeybar_jump_down, 0);
    p_delay(0);
    return;

}
p_telejump(movecoord(coord, 0, 0, calc($dist_mod * 2)));
p_delay(0);
~agility_force_move(200, monkeybar_move, movecoord(coord, 0, 0, calc($dist_mod * 1)));
anim(monkeybar_jump_down, 0);
p_delay(0);

[oploc1,loc_993]
def_coord $start_coord = loc_coord;
def_int $mod = 1;
def_int $dir = ^exact_north;
def_coord $end_coord = movecoord($start_coord, 0, 0, 1);
if(coordz(coord) > coordz(loc_coord)) {
    $start_coord = movecoord(loc_coord, 0, 0, 1);
    $mod = -1;
    $dir = ^exact_south;
    $end_coord = movecoord(loc_coord, 0, 0, 0);
}
def_coord $walk_coord = movecoord($end_coord, 0, 0, $mod);
if(loc_angle = 1 | loc_angle = 3) {
    $start_coord = loc_coord;
    $mod = 1;
    $dir = ^exact_east;
    $end_coord = movecoord($start_coord, 1, 0, 0);
    if(coordx(coord) > coordx(loc_coord)) {
        $start_coord = movecoord(loc_coord, 1, 0, 0);
        $mod = -1;
        $dir = ^exact_west;
        $end_coord = movecoord(loc_coord, 0, 0, 0);
    }
    $walk_coord = movecoord($end_coord, $mod, 0, 0);
} 
p_teleport($start_coord);
p_delay(0);
~agility_exactmove(human_walk_fence_north, 30, 2, $start_coord, $end_coord, 30, 94, $dir, true);
p_teleport($walk_coord);

[oploc1,_karamja_stepping_stone]
if(coord = loc_coord) {
    mes("You can't do that from here.");
    return;
}
def_int $dz = -1;
def_int $dir = ^exact_south;
def_seq $fall_seq = seq_770;
if(coordz(coord) < coordz(loc_coord)) {
    $dz = 1;
    $dir = ^exact_north;
    $fall_seq = seq_771;
}
mes("You attempt to balance on the stepping stone.");
// 1t longer delay than osrs for now, otherwise the fall seq won't play on fails 
~agility_exactmove(human_steppingstonejump, 20, 2, coord, movecoord(coord, 0, 0, $dz), 48, 60, $dir, false);
if(stat_random(stat(agility), 140, 250) = false) {
    // slip and fall, exact move when falling but force walk afterwards
    def_coord $fail_coord = 0_45_46_48_5;
    def_int $damage_bound = calc(stat(hitpoints) * 10 / 100);
    mes("You slip and fall...");
    ~agility_exactmove($fall_seq, 30, 1, coord, $fail_coord, 52, 100, $dir, false);
    sound_synth(pool_plop, 0, 0);
    ~agility_force_move(0, human_swim, movecoord(coord, 1, 0, 0));
    spotanim_map(watersplash, $fail_coord, 0, 1);
    ~agility_force_move(0, human_swim, movecoord(coord, 1, 0, 0));
    ~agility_force_move(0, human_swim, movecoord(coord, 1, 0, calc(2 * $dz)));
    ~agility_force_move(0, human_swim, movecoord(coord, 0, 0, calc(2 * $dz)));
    // https://discord.com/channels/953326730632904844/1126857544523063367/1204001670489571328, can't see first part of the mes, image is from late 05
    mes("You get washed up on the side of the river.");
    mes("After being nearly half drowned.");
    ~damage_self(calc($damage_bound + random($damage_bound) + 1)); // 10 - 20%?
    givexp(agility, 10);
    return;
}
givexp(agility, 30);
mes("You manage to make the jump.");