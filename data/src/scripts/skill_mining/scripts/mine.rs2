// TODO: Random Events handling, verify pick and ability to mine after stat boost wears off
// Sound: found_gem is used for gem rocks rather than finding a gem while mining

// normal rocks
[oploc1,_mining_rock_normal] @mining_firstswing(get_ore_normal);
[oploc3,_mining_rock_normal] @mining_continue(get_ore_normal);

// fast rocks. iron, granite
[oploc1,_mining_rock_fast] @mining_firstswing(get_ore_fast);
[oploc3,_mining_rock_fast] @mining_continue(get_ore_fast);

// Essence mine
[oploc1,loc_2491] @mining_firstswing(get_ore_essence);
[oploc3,loc_2491] @mining_continue(get_ore_essence);

// gem rocks
[oploc1,gem_rock_1] @mining_firstswing(get_ore_gem_rock);
[oploc3,gem_rock_1] @mining_continue(get_ore_gem_rock);

[label,mining_firstswing](proc $get_ore)
def_int $is_empty = loc_param(mining_rock_empty);
if ($is_empty = ^true) {
    anim(null, 0);
    mes("There is currently no ore available in this rock.");
    sound_synth(prospect, 0, 0);
    return;
}
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    ~mesbox("Your inventory is too full to hold anymore <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
def_int $levelreq = db_getfield($data, mining_table:rock_level, 0);;
if (stat(mining) < $levelreq) {
    anim(null, 0);
    ~mesbox("You need a mining level of <tostring($levelreq)> to mine this rock.");
    return;
}
def_obj $pickaxe = ~pickaxe_checker;
if ($pickaxe = null) {
    anim(null, 0);
    ~mesbox("You need a pickaxe to mine this rock. You do not have a pickaxe which you have the Mining level to use.");
    return;
}
def_int $mining_rate = oc_param($pickaxe, mining_rate);
if (%skill_clock < map_clock) {
    %skill_clock = calc(map_clock + $mining_rate);
    if (%skill_sound = calc(map_clock + $mining_rate)) {
        sound_synth(mine_quick, 0, 0);
    }
    p_oploc(1);
} else {
    %skill_anim = %skill_clock;
    %skill_sound = calc(map_clock + $mining_rate + 1);
    anim(oc_param($pickaxe, mining_animation), 0);
    mes("You swing your pick at the rock.");
    @mining_continue($get_ore);
}


[label,mining_continue](proc $get_ore)
// mes("mining_continue: %skill_anim = <tostring(%skill_anim)>, %skill_sound = <tostring(%skill_sound)>");
// mes("%skill_clock = <tostring(%skill_clock)>, map_clock = <tostring(map_clock)>");
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    ~mesbox("Your inventory is too full to hold anymore <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
def_int $levelreq = db_getfield($data, mining_table:rock_level, 0);
if (stat(mining) < $levelreq) {
    anim(null, 0);
    ~mesbox("You need a mining level of <tostring($levelreq)> to mine this rock.");
    return;
}
def_obj $pickaxe = ~pickaxe_checker;
if ($pickaxe = null) {
    anim(null, 0);
    ~mesbox("You need a pickaxe to mine this rock. You do not have a pickaxe which you have the Mining level to use.");
    return;
}
def_int $mining_rate = oc_param($pickaxe, mining_rate);

// sounds and skill anim is based off https://youtu.be/ix4_VVi9Xm4
if (%skill_anim < calc(map_clock + 1)) {
    %skill_anim = calc(map_clock + $mining_rate + 1);
    %skill_sound = calc(map_clock + $mining_rate + 1);
    anim(oc_param($pickaxe, mining_animation), 0);
    sound_synth(mine_quick, 0, 0);
}
// if roll is due
if (%skill_clock < map_clock) {
    %skill_clock = calc(map_clock + $mining_rate);
} else if (%skill_clock = map_clock) {
    gosub($get_ore);
}
if (%skill_sound = calc(map_clock + $mining_rate)) {
    sound_synth(mine_quick, 14, 0);
}
if (%skill_sound < calc(map_clock + $mining_rate)) {
    sound_synth(mine_quick, 17, 0);
}
p_oploc(3);



[proc,get_ore_normal]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
// roll for gem
def_int $chance = 256;
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $chance = 64;
}
if (random($chance) = ^true) {
    def_namedobj $gem = ~mining_gem_table;
    if ($gem ! null) {
        inv_add(inv, $gem, 1);
        db_find(gem_cutting_table:uncut_gem, $gem);
        def_dbrow $data = db_findnext;
        mes("You just found <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
    }
} else if (stat_random(stat(mining), db_getfield($data, mining_table:rock_successchance, 0)) = true) {
    // normal mining has a 1t delay, osrs used to be this way but changed it in like 
    p_delay(0);
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    loc_del($respawn);
    loc_add(loc_coord, loc_param(next_loc_stage_mining), loc_angle, loc_shape, $respawn);
    // stop mining, give ore and xp. Sudden says its sound_230
    sound_synth(sound_230, 0, 0);
    anim(null, 0);
    inv_add(inv, db_getfield($data, mining_table:rock_output, 0), 1);
    givexp(mining, db_getfield($data, mining_table:rock_exp, 0));
    mes("You mine some <db_getfield($data, mining_table:ore_name, 0)>.");
    @exit;
}



[proc,get_ore_fast]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
// roll for gem
def_int $chance = 256;
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $chance = 64;
}
if (random($chance) = ^true) {
    def_namedobj $gem = ~mining_gem_table;
    if ($gem ! null) {
        inv_add(inv, $gem, 1);
        db_find(gem_cutting_table:uncut_gem, $gem);
        def_dbrow $data = db_findnext;
        mes("You just found <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
    }
} else if (stat_random(stat(mining), db_getfield($data, mining_table:rock_successchance, 0)) = true) {
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    loc_del($respawn);
    loc_add(loc_coord, loc_param(next_loc_stage_mining), loc_angle, loc_shape, $respawn);
    // stop mining, give ore and xp. Sudden says its sound_230
    sound_synth(sound_230, 0, 0);
    anim(null, 0);
    inv_add(inv, db_getfield($data, mining_table:rock_output, 0), 1);
    givexp(mining, db_getfield($data, mining_table:rock_exp, 0));
    mes("You mine some <db_getfield($data, mining_table:ore_name, 0)>.");
    @exit;
}



[proc,get_ore_essence]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
inv_add(inv, db_getfield($data, mining_table:rock_output, 0), 1);
givexp(mining, db_getfield($data, mining_table:rock_exp, 0));
mes("You manage to mine an unbound rune stone.");



[proc,get_ore_gem_rock]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    @nothing_interesting_happens;
}
def_int $low;
def_int $high;
$low, $high = db_getfield($data, mining_table:rock_successchance, 0);
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $low = multiply($low, 3);
    $high = multiply($high, 3);
}
if (stat_random(stat(mining), $low, $high) = true) {
    // normal mining has a 1t delay, osrs used to be this way but changed it in like 
    p_delay(0);
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    loc_del($respawn);
    loc_add(loc_coord, loc_param(next_loc_stage_mining), loc_angle, loc_shape, $respawn);
    // stop mining, give ore and xp.
    sound_synth(found_gem, 0, 0);
    anim(null, 0);
    def_namedobj $gem;
    def_int $count;
    $gem, $count = ~roll_on_drop_table(gem_rock_table);
    inv_add(inv, $gem, 1);
    givexp(mining, db_getfield($data, mining_table:rock_exp, 0));

    db_find(gem_cutting_table:uncut_gem, $gem);
    def_dbrow $data = db_findnext;
    mes("You just mined <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
    @exit;
}


[proc,mining_gem_table]()(namedobj)
def_int $rand = random(128);
if ($rand < 2) return (uncut_diamond);
if ($rand < 10) return (uncut_ruby);
if ($rand < 26) return (uncut_emerald);
if ($rand < 58) return (uncut_sapphire);
else return(null);