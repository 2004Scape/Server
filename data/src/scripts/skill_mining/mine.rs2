// TODO: Random Events handling, verify pick and ability to mine after stat boost wears off

// Standard op
[oploc1,_mining_rock] ~mine(loc_param(mining_rock_level));
// "hidden" op
[oploc3,_mining_rock] ~mine_rock(~pickaxe_checker);

[proc,mine](int $levelreq)
%skill_anim = 0;
%skill_sound = 0;
if (%skill_clock < map_clock) {
    %skill_clock = calc(map_clock + 3);
    p_oploc(1);
} else {
    ~mining_first_swing($levelreq);
}

[proc,mining_first_swing](int $levelreq)
def_int $is_empty = loc_param(mining_rock_empty);
if ($is_empty = ^true) {
    anim(null, 0);
    mes("There is currently no ore available in this rock.");
    return;
}

if (stat(mining) < $levelreq) {
    anim(null, 0);
    ~mesbox("You need a mining level of <tostring($levelreq)> to mine this rock.");
    return;
}

def_obj $pickaxe = ~pickaxe_checker;
if ($pickaxe = null) {
    ~mesbox("You need a pickaxe to mine this rock. You do not have a pickaxe which you have the Mining level to use.");
    return;
}

// def_obj $rock_output = loc_param(mining_rock_output);
// def_int $number = inv_total(inv, $rock_output);
// def_int $overflow = inv_itemspace2(inv, $rock_output, 1, inv_size(inv));

// mes("Number: <tostring($number)> Overflow: <tostring($overflow)> Last Slot: <tostring(last_slot)>");

// if ($overflow >= $number) {
//    def_string $rock_ore_name = loc_param(mining_ore_name);
//     mes("Your inventory is too full to hold anymore <$rock_ore_name>.");
//     return;
// }

mes("You swing your pick at the rock.");
def_int $mining_rate = oc_param($pickaxe, mining_rate);
// Seems to make this align with tick rate when first swining
%skill_clock = calc(map_clock + $mining_rate - 1);
~mine_rock($pickaxe);

[proc,mine_rock](obj $pickaxe)
def_int $mining_rate = oc_param($pickaxe, mining_rate);

if (%skill_clock = map_clock) {
    if (stat_random(stat(mining), loc_param(rock_chance_low), loc_param(rock_chance_high)) = true) {

        def_int $gem_roll = ~check_for_gem;
        if ($gem_roll = ^true) {
            def_obj $gem = ~mining_gem_table;
            def_string $gem_name = oc_param($gem, mining_gem_reward_name);
            inv_add(inv, $gem, 1);
            mes("You just found a/an <$gem_name>!");
        } else {
            def_obj $rock_output = loc_param(mining_rock_output);
            def_int $rock_exp = loc_param(mining_rock_exp);
            def_string $rock_ore_name = loc_param(mining_ore_name);

            mes("You mine some <$rock_ore_name>.");
            inv_add(inv, $rock_output, 1);
            givexp(mining, $rock_exp);
            anim(null, 0);
            return;
        }
    }
    %skill_clock = calc(map_clock + $mining_rate);
}

if (%skill_anim < 1) {
    // Prevent the animation looping on itself.
    %skill_anim = calc($mining_rate + 1);
    def_seq $mining_anim = oc_param($pickaxe, mining_animation);
    anim($mining_anim, 0);
}
%skill_anim = calc(%skill_anim - 1);

p_oploc(3);

[proc,check_for_gem]()(int)
def_obj $amulet = inv_getobj(worn, 2);
def_int $rand = 0;
def_int $give_gem = 0;
if ($amulet = amulet_of_glory_1 | $amulet = amulet_of_glory_2 | $amulet = amulet_of_glory_3 | $amulet = amulet_of_glory_4) {
    $rand = random(86);
    if ($rand = 85) return(1); 
} else {
    $rand = random(256);
    if ($rand = 255) return(1); 
}
return(0);

[proc,mining_gem_table]()(obj)
def_int $rand = random(64);
if ($rand < 4) return (uncut_sapphire);
if ($rand < 8) return (uncut_emerald);
if ($rand < 16) return (uncut_ruby);
if ($rand < 64) return (uncut_diamond);