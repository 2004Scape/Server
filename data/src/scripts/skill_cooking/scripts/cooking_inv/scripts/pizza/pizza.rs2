[opheldu,pizza_base]
switch_obj (last_useitem) {
    case tomato : @make_incomplete_pizza;
    case cheese : mes("I should add the tomato first.");
    case pineapple_ring, anchovies, cooked_meat, cooked_chicken : mes("I need to add the tomato and cheese first.");
    case default : ~displaymessage(^dm_default);
};

[opheldu,tomato]
switch_obj (last_useitem) {
    case pizza_base : @make_incomplete_pizza;
    case bowl_empty : @make_bowl_mixture(last_slot);
    case chopped_onion, chopped_ugthanki, chopped_ugthanki_onion : @make_bowl_mixture2(last_slot, last_useslot);
    case chopped_tomato, chopped_ugthanki_tomato, chopped_onion_tomato : mes("This mixture already contains enough <lowercase(oc_name(last_useitem))>.");
    case incomplete_pizza : mes("I think it's already got enough tomato on.");
    case half_baked_gnomebowl : @add_bowl_ingredient(last_item);
    case half_baked_batta : @add_batta_ingredient(last_item);
    case default : ~displaymessage(^dm_default);
};

[opheldu,cheese]
switch_obj  (last_useitem) {
    case pizza_base : mes("I should add the tomato first.");
    case incomplete_pizza : @make_uncooked_pizza;
    case half_baked_gnomebowl : @add_bowl_ingredient(last_item);
    case half_baked_batta : @add_batta_ingredient(last_item);
    case default : ~displaymessage(^dm_default);
};

[opheldu,incomplete_pizza]
switch_obj (last_useitem) {
    case tomato : mes("I think it's already got enough tomato on.");
    case cheese : @make_uncooked_pizza;
    case default : ~displaymessage(^dm_default);
};

[opheldu,uncooked_pizza]
switch_obj (last_useitem) {
    case pineapple_ring, anchovies, cooked_meat, cooked_chicken : @uncooked_pizza_message(last_useslot);
    case default : ~displaymessage(^dm_default);
};

[opheldu,pineapple_ring]
@use_topping_on_pizza;

[opheldu,pineapple_chunks]
switch_int(oc_param(last_useitem, gnome_cooking_type)) {
    case ^gnome_cocktail: @finish_cocktail(last_useitem, last_item);
    case ^gnome_bowl, ^gnome_batta, ^gnome_crunchies: @finish_gnome_food(last_useitem, last_item);
}
switch_obj (last_useitem) {
    case plain_pizza : @make_pizza_with_topping(last_slot);
    case uncooked_pizza : @uncooked_pizza_message(last_slot);
    case default : ~displaymessage(^dm_default);
};

[opheldu,anchovies]
@use_topping_on_pizza;

[opheldu,plain_pizza]
switch_obj (last_useitem) {
    case pineapple_ring, pineapple_chunks, anchovies, cooked_meat, cooked_chicken : @make_pizza_with_topping(last_useslot);
    case default : ~displaymessage(^dm_default);
};


//--- procs for handling opheldu stuff ---
[label,use_topping_on_pizza]
switch_obj (last_useitem) {
    case plain_pizza : @make_pizza_with_topping(last_slot);
    case uncooked_pizza : @uncooked_pizza_message(last_slot);
    case default : ~displaymessage(^dm_default);
};


[label,uncooked_pizza_message](int $last)
def_obj $ingredient = inv_getobj(inv, $last);
def_struct $struct = oc_param($ingredient, pizza_topping_struct);
mes("I need to cook this pizza before I can add <lowercase(struct_param($struct, productmessage))> to it.");
return;
//--------------------------------------------


[label,make_incomplete_pizza]
if (stat(cooking) < 35) {
    ~mesbox("You need a Cooking level of 35 to make a Pizza.");
    return;
}
//delete tomato and pizza base
inv_del(inv, tomato, 1);
inv_del(inv, pizza_base, 1);
//add incomplete pizza
inv_add(inv, incomplete_pizza, 1);
//display message
mes("You add the tomato to the pizza.");


[label,make_uncooked_pizza]
if (stat(cooking) < 35) {
    ~mesbox("You need a Cooking level of 35 to make a Pizza.");
    return;
}
//delete cheese and incomplete pizza
inv_del(inv, cheese, 1);
inv_del(inv, incomplete_pizza, 1);
//add uncooked pizza
inv_add(inv, uncooked_pizza, 1);
//display message
mes("You add the cheese to the pizza.");


[label,make_pizza_with_topping](int $last)
def_obj $ingredient = inv_getobj(inv, $last);
if (oc_members($ingredient) = true & map_members = false) {
    mes("You can only make that on a members' server.");
    return;
}
def_struct $struct = oc_param($ingredient, pizza_topping_struct);
//check if required level is met
if (stat(cooking) < struct_param($struct, levelrequired)) {
    ~mesbox("You need a Cooking level of <tostring(struct_param($struct, levelrequired))> to make a <struct_param($struct, levelfailmessage)>.");
    return;
}
//delete topping and pizza
inv_del(inv, $ingredient, 1);
inv_del(inv, plain_pizza, 1);
//add pizza with topping
inv_add(inv, struct_param($struct, product), 1);
//give xp
givexp(crafting, struct_param($struct, productexp));
//display message
mes("You add the <struct_param($struct, productmessage)> to the pizza");