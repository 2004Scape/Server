[oploc1,loc_2216]
~mesbox("You see a broken cart has been placed here.|You suspect it's intended to keep people out."); // OSRS lb

[oploc2,loc_2216]
if(coordx(coord) <= coordx(loc_coord)) {
    mes("You nimbly jump from one side of the cart...");
    mes("...to the other and climb down again.");
    p_telejump(movecoord(loc_coord, 3, 0, 1));
    return;
}
~mesbox("You approach the cart and see undead creatures gathering by the village gates. There is a note attached to the cart. The note says,|@red@:: Danger :: Deadly green mist DO NOT ENTER IF YOU @red@VALUE YOUR LIFE!");
if(npc_find(coord, npc_500, 8, 0) = true) {
    if(random(2) = 0) ~chatnpc("<p,shock>Hey, move away from the cart please!|It's unsafe to go in there."); // chatnpc_specific in OSRS but chatnpc on RS3
    else ~chatnpc("<p,shock>You must be a maniac to go in there!|The whole place is swarming with zombies!");
}
~mesbox("It looks as if you can climb across the cart. Would you like to try?");
switch_int(~p_choice2("Yes, I am very nimble and agile!", 1, "No, I am happy where I am thanks!", 2)) {
    case 1 :
        mes("You nimbly jump from one side of the cart...");
        mes("...to the other and climb down again.");
        p_telejump(movecoord(loc_coord, -1, 0, 1));
    case 2 :
        if_close;
        mes("You think better of clambering over the cart, you might get dirty.");
        p_delay(2);
        say("I'd probably have just scraped my knees up as well.");
}

[oploc1,_shilo_metalgate]
if(coordx(coord) < coordx(loc_coord)) {
    p_delay(1);
    p_teleport(loc_coord);
    ~shilo_metalgates_open;
    return;
}
~mesbox("The gate feels very cold to your touch! Are you sure you want to go through?");
switch_int(~p_choice2("Yes, I am very nimble and agile!", 1, "No, actually, I have a bad feeling about this!", 2)) {
    case 1 :
        if_close;
        mes("The gates slowly begin to open...");
        p_delay(1); // 1t
        mes("Suddenly some Zombies grab you and start dragging you inside!");
        settimer(shilo_mist_timer, 16);
        ~shilo_metalgates_open;
        ~forcemove(0_44_46_54_9);
    case 2 :
        if_close;
        mes("You drag your quivering body away from the gates.");
        p_delay(2); // 2t
        mes("You look around, but you don't think anyone saw you.");
}

[timer,shilo_mist_timer]
mes("A green thick mist rises from the ground and starts choking you.");
cleartimer(shilo_mist_timer);
// sound_synth swamp gas
@shilo_greenmist(coord, 0);

[label,shilo_greenmist](coord $mist_coord, int $counter)
if($counter >= 4) {
    return;
}
spotanim_map(spotanim_184, $mist_coord, 124, 3);
huntall($mist_coord, 1, 0);
while (huntnext = true) {
    queue(damage_player, 0, ~random_range(2,3));
}
world_delay(3); // might be npc_queue on a zombie or something
@shilo_greenmist($mist_coord, calc($counter + 1));

[proc,shilo_metalgates_open]
loc_findallzone(coord);
while(loc_findnext = true) {
    if(loc_category = shilo_metalgate) {
            def_coord $central_coord = loc_coord;
            def_int $orig_angle = loc_angle;
            loc_del(2);
            if(loc_type = loc_2259) {
                loc_add(movecoord($central_coord, -1, 0, 0), loc_1562, 3, loc_shape, 2);
                loc_add(movecoord($central_coord, -1, 0, 1), loc_1563, 1, loc_shape, 2);
            }
            loc_add($central_coord, loc_83, $orig_angle, loc_shape, 2);
            sound_synth(grate_open, 0, 0);
    }
}

[oploc1,_shilo_woodengate]
mes("The gate won't open.");

[oploc2,loc_2237]
if(loc_find(0_45_48_37_18, loc_2240) = true) {
    mes("The trees are already pulled apart revealing some doors.");
    return;
}
mes("You search the palm trees...");
mes("...and reveal an ancient doorway set into the side of the hill!");
if(loc_find(0_45_48_37_18, loc_2244) = true & .loc_find(0_45_48_36_18, loc_2245) = true) {
    loc_change(loc_2240, ^max_32bit_int);
    .loc_change(loc_2241, ^max_32bit_int);
    %zq_map_mechanisms = setbit(%zq_map_mechanisms, 2);
}
// for w/e reason it handles despawn with a player timer
settimer(hide_rashiliyia_doors, 50);

[timer,hide_rashiliyia_doors]
if(loc_find(0_45_48_37_18, loc_2240) = true & .loc_find(0_45_48_36_18, loc_2241) = true) {
    loc_change(loc_2244, ^max_32bit_int);
    .loc_change(loc_2245, ^max_32bit_int);
    %zq_map_mechanisms = clearbit(%zq_map_mechanisms, 2);
    if(distance(.loc_coord, coord) <= 2 | distance(loc_coord, coord) <= 2) mes("The trees spring back into place and hide the doors again.");
}

[proc,rashiliyia_door_logout]
if(testbit(%zq_map_mechanisms, 2) = true) {
    if(loc_find(0_45_48_37_18, loc_2240) = true) loc_change(loc_2244, ^max_32bit_int);
    if(loc_find(0_45_48_36_18, loc_2241) = true) loc_change(loc_2245, ^max_32bit_int);
    %zq_map_mechanisms = clearbit(%zq_map_mechanisms, 2);
}

[oploc1,_rashiliyia_tomb_door]
~mesbox("There seems to be some sort of recepticle on the door.|Perhaps it needs a key?");

[oploc2,_rashiliyia_tomb_door]
~mesbox("Examining the door, you see that it has a very|strange lock. You're shocked to find that it seems to|be made out of bone!"); // double spaces where the linebreaks are here in OSRS

[oploc1,loc_2217]
switch_int(%zombiequeen_progress) {
    case default :
        loc_change(loc_2219, 50);
        ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby.");
    case ^zombiequeen_dug_mound, ^zombiequeen_lit_mound :
        loc_change(loc_2218, 50);
        ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. It's very dark beyond the fissure.");
    case ^zombiequeen_started, ^zombiequeen_found_mound, ^zombiequeen_searched_mound : 
        if(%zombiequeen_progress < ^zombiequeen_found_mound) %zombiequeen_progress = ^zombiequeen_found_mound;
        ~mesbox("It looks as if something is buried here.");
    case ^zombiequeen_not_started : ~mesbox("It just looks like some bumpy ground.");
}

[oploc2,loc_2217]
switch_int(%zombiequeen_progress) {
    case default :
        loc_change(loc_2219, 50);
        ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby. Do you want to try to crawl through the fissure?");
        @zombiequeen_enter_fissure;        
    case ^zombiequeen_dug_mound, ^zombiequeen_lit_mound :
        loc_change(loc_2218, 50);
        ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. It's very dark beyond the fissure. Do you want to try to crawl through the fissure?");
        @zombiequeen_enter_fissure;
    case ^zombiequeen_started, ^zombiequeen_found_mound, ^zombiequeen_searched_mound : 
        if(%zombiequeen_progress < ^zombiequeen_searched_mound) %zombiequeen_progress = ^zombiequeen_searched_mound;
        ~mesbox("It looks as if something is buried here. You may need some tools to excavate further.");
    case ^zombiequeen_not_started : ~mesbox("It just looks like some bumpy ground.");
}

[oploc1,loc_2218]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2217, 50);
    return;
} else if(%zombiequeen_progress >= ^zombiequeen_roped_mound) {
    loc_change(loc_2219, 50);
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby.");
} else {
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. Beyond the fissure is a long fall.");
}

[oploc2,loc_2218]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2218, 50);
} else if(%zombiequeen_progress >= ^zombiequeen_roped_mound) {
    loc_change(loc_2219, 50);
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby. Do you want to try to crawl through the fissure?");
    @zombiequeen_enter_fissure;
} else {
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. Beyond the fissure is a long fall. Do you want to try to crawl through the fissure?");
    @zombiequeen_enter_fissure;
}

[label,zombiequeen_enter_fissure]
def_int $op = ~p_choice2_header("Yes, I'll give it a go!", 1, "No thanks, I'm having second thoughts.", 2, "Climb into the fissure?");
if($op = 2) {
    ~mesbox("You think better of attempting to squeeze into the fissure.");
    say("It looks very dangerous, and dark... Scary!");
    return;
}
if(%zombiequeen_progress = ^zombiequeen_dug_mound) {
    ~mesbox("The fissure looks very dark, you're not sure what lies beyond.");
    return;
}
if(%zombiequeen_progress = ^zombiequeen_lit_mound) {
    ~mesbox("It looks like there is a steep drop just after the fissure. It may be dangerous to try to climb down without any sort of support.");
    return;
}
if_close;
p_delay(1); // TOOD: 1t
if(stat(agility) < 32) {
    mes("You need a level 32 agility to attempt this.");
    return;
}
bas_running(null); // disable running
mes("You start to contort your body...");
p_teleport(0_45_46_42_56);
p_delay(0);
mes("With some difficulty you manage to push yourself through the small crack in");
mes("the rock.");
anim(human_pickupfloor, 0);
p_delay(0);
~update_bas;
if(%zombiequeen_progress = ^zombiequeen_roped_mound) %zombiequeen_progress = ^zombiequeen_entered_ah_za_rhoon;
mes("You cleverly use the rope to slowly lower yourself to the floor.");
stat_advance(agility, 30);
p_teleport(0_45_146_18_57);

[oplocu,loc_2217]
if(last_useitem = spade) {
    @zombiequeen_mound_dig;
}
~displaymessage(^dm_default);

[label,zombiequeen_mound_dig]
p_arrivedelay;
p_stopaction;
facesquare(loc_coord);
switch_int(%zombiequeen_progress) {
    case default :
        loc_change(loc_2218, 50);
        anim(human_dig, 0);
        p_delay(1);
        anim(seq_846, 0);
        p_delay(1);
        ~mesbox("You have already excavated this area. Your spade clangs against the granite.");
    case ^zombiequeen_started, ^zombiequeen_found_mound, ^zombiequeen_searched_mound :
        %zombiequeen_progress = ^zombiequeen_dug_mound;
        mes("You start digging...");
        anim(human_dig_long, 0);
        p_delay(1);
        mes("You dig a small hole and almost immediately hit granite.");
        p_delay(1);
        mes("You excavate the hole a bit more...");
        p_delay(1);
        mes("And see that there is a small fissure...");
        p_delay(1);
        loc_change(loc_2218, 50);
        mes("You might just be able to crawl through it...");
        p_delay(1);
        anim(null, 0);
    case ^zombiequeen_not_started : ~mesbox("You start digging...|But without knowing what you're digging for...|You decide to give up.");
}

[oplocu,loc_2218]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2217, 50);
    return;
}
switch_obj(last_useitem) {
    case rope: 
        if(%zombiequeen_progress = ^zombiequeen_dug_mound) {
            mes("It's too dark to clearly see where to fix that.");
            return;
        }
        if(%zombiequeen_progress >= ^zombiequeen_roped_mound) {
            mes("There is already a rope attached!");
            return;
        }
        anim(human_pickupfloor, 0);
        p_delay(0);
        inv_del(inv, rope, 1);
        loc_change(loc_2219, 50);
        %zombiequeen_progress = ^zombiequeen_roped_mound;
        ~objboxt(rope, "You see where to attach the rope very clearly. You secure the rope well.");
    case lit_candle, lit_black_candle, lit_torch: // not all light sources work so not using cat here so this won't cause a bug for 2005
        if(%zombiequeen_progress > ^zombiequeen_lit_mound) {
            mes("You have already seen inside the fissure.");
            return;
        }
        def_obj $lightsource = last_useitem;
        anim(human_pickupfloor, 0);
        p_delay(0);
        // guessed linebreaks, what osrs has doesn't work and dialogue is different to rsc
        ~objboxb($lightsource, "You drop the <lowercase(oc_name($lightsource))> into the fissure and see|that there is quite a large drop after you get through|the hole. There is a good anchor point nearby onto which|you could tie a rope.");
        %zombiequeen_progress = ^zombiequeen_lit_mound;
        inv_del(inv, $lightsource, 1);
        ~mesbox("The <lowercase(oc_name($lightsource))> burns out.");
        ~mesbox("Some rope might help here.");
    case default: ~displaymessage(^dm_default);
}

[oploc1,loc_2219]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2217, 50);
} else if (%zombiequeen_progress < ^zombiequeen_roped_mound) {
    loc_change(loc_2218, 50);
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. It's very dark beyond the fissure. Do you want to try to crawl through the fissure?");
} else {
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby.");
}

[oploc2,loc_2219]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2217, 50);
} else if (%zombiequeen_progress < ^zombiequeen_roped_mound) {
    loc_change(loc_2218, 50);
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. It's very dark beyond the fissure. Do you want to try to crawl through the fissure?");
} else {
    ~mesbox("You see a small fissure in the granite that you might just be able to crawl through. You can see that a rope is attached nearby. Do you want to try to crawl through the fissure?");
    @zombiequeen_enter_fissure;
}

[oplocu,loc_2219]
if(%zombiequeen_progress < ^zombiequeen_dug_mound) {
    mes("Some earth falls down and fills in the fissure.");
    loc_change(loc_2217, 50);
    return;
}
~displaymessage(^dm_default);

[oploc1,loc_2231]
def_int $z_dist = -4;
stat_advance(agility, 10);
if(coordx(coord) = coordx(loc_coord)) {
    mes("You can't do that from here.");
    return;
}
if(coordx(coord) > coordx(loc_coord)) {
    if(stat(agility) < 15) { // req is only checked on one side
        mes("You need an Agility level of at least 15 to climb these rocks.");
        return;
    }
    p_delay(0);
    ~agility_force_move(0, seq_737, movecoord(coord, -2, 0, 0));
    // stumble loop on both fails
    if(stat_random(stat(agility), 125, 250) = false) {
        ~agility_exactmove(seq_739, 0, 1, coord, movecoord(coord, 2, 0, 0), 0, 50, ^exact_west, false);
        anim(null, 0);
        mes("You fall and hurt yourself.");
        say("Ouch");
        ~damage_self(calc(((stat(hitpoints) * 5) / 100) + 1));
        ~damage_self(calc(((stat(hitpoints) * 5) / 100) + 1));
        return;
    }
    ~agility_force_move(0, seq_737, movecoord(coord, -2, 0, 0));
} else if (coordx(coord) < coordx(loc_coord)) {
    ~agility_exactmove(human_rock_climb, 15, 0, coord, movecoord(coord, 4, 0, 0), 0, 120, ^exact_west, false);
    if(stat_random(stat(agility), 125, 250) = false) {
        anim(seq_739, 0);
        p_delay(1);
        anim(null, 0);
        mes("You fall and hurt yourself.");
        say("Ouch");
        ~damage_self(calc(((stat(hitpoints) * 5) / 100) + 1));
        ~damage_self(calc(((stat(hitpoints) * 5) / 100) + 1));
        return;
    }
    p_delay(1);
    anim(null, 0);
}

[zone,0_43_46_24_32] settimer(cairn_island_bridge, 3);
[zoneexit,0_43_46_24_32] cleartimer(cairn_island_bridge);

[timer,cairn_island_bridge]
if(inzone(0_43_46_24_35, 0_43_46_29_35, coord) = true) {
    if(stat_random(stat(agility), 125, 250) = false) {
        // fall
        mes("You fall!");
        p_stopaction;
        cleartimer(cairn_island_bridge);
        ~set_walkbas(human_sidestep_fall);
        // stumble_loop, 10
        facesquare(movecoord(coord, 0, 0, -2));
        p_delay(0);

        ~set_walkbas(seq_766);
        if(coord = 0_43_46_24_35) p_teleport(movecoord(coord, 1, 0, -1));
        else p_teleport(movecoord(coord, -1, 0, -1));
        say("Ahhhhhhhhhh!");
        p_delay(0);

        say("Choke!");
        spotanim_map(watersplash, coord, 0, 3);
        sound_synth(pool_plop, 0, 0);
        ~set_readyandwalk_bas(seq_773, seq_773, human_swim);
        p_delay(0);

        ~forcemove(0_43_46_26_33);
        say("Gulp!");
        ~forcemove(movecoord(coord, 0, 0, -2));
        ~forcemove(movecoord(coord, 1, 0, -2));
        say("Cough!");
        ~forcemove(movecoord(coord, 1, 0, -2));
        ~forcemove(movecoord(coord, 1, 0, 1));
        p_delay(0);
        ~update_bas;
        mes("You just manage to drag your pitiful frame onto the river bank.");
        mes("Though you nearly drowned in the river!");
        p_teleport(movecoord(coord, 1, 0, -1));
        ~damage_self(calc(stat(hitpoints) / 11));
        ~damage_self(calc(stat(hitpoints) / 11));
        ~damage_self(calc(stat(hitpoints) / 11));
        return;
    }
    mes("You manage to keep your balance on the bridge.");
    stat_advance(agility, 100);
    settimer(cairn_island_bridge, 20); // it's always 20 ticks
}

[oploc1,loc_2234]
~mesbox("These rocks look like they have been stacked uniformly.");

[oploc2,loc_2234]
// stage check
if(%zombiequeen_progress >= ^zombiequeen_left_ah_za_rhoon) {
    ~mesbox("You investigate the rocks and find a dank, narrow crawl-way. Do you want to crawl into this dank, dark, narrow, possibly dangerous hole?");
    switch_int(~p_choice2_header("Yes Please, I can think of nothing nicer!", 1, "No way could you get me to go in there!", 2, "Crawl into hole?")) {
        case 1 :
            if(stat(agility) < 32) {
                mes("You need an Agility level of at least 32 to squeeze in there.");
                return;
            }
            ~mesbox("You contort your body and prepare to squirm worm like into the hole.");
            anim(human_pickupfloor, 5);
            if(stat_random(stat(agility), 125, 250) = false) {
                ~set_walkbas(human_drowning);
                p_delay(0); // TODO: remove when delay is fixed
                ~forcemove(loc_coord);
                mes("You manage to get yourself stuck.");
                p_delay(1);
                mes("You have to wrench yourself free to get out.");
                p_delay(2);
                mes("You manage to pull yourself out, but are hurt in the process.");
                ~update_bas;
                p_teleport(movecoord(coord, 0, 0, -1));
                p_delay(1);
                mes("Maybe you'll have better luck next time?");
                ~damage_self(~random_range(1,10));
            }
            ~mesbox("You struggle through the narrow crevice in the rocks.");
            %zombiequeen_progress = ^zombiequeen_entered_tomb_bervirius;
            p_teleport(0_43_146_8_45);
        case 2 : mes("You decide that the surface is the place for you!");
    }
    return;
}
~mesbox("You find nothing of significance. And it does look quite scary.");

[oploc1,loc_2226]
~mesbox("This table might be useful with some adjustment.");

[oploc2,loc_2226]
if(testbit(%zq_map_mechanisms, 0) = true) {
    ~mesbox("There isn't enough wood left in this table to make anything!");
    return;
}
~mesbox("You may be able to turn this dilapidated table into something that could help you to get out of this place. What would you like to try and turn this table into?");
switch_int(~p_choice3("A ladder", 1, "A crude raft", 2, "A pole vault", 3)) {
    case 1 :
        if(stat_random(stat(crafting), 125, 250) = true) {
            ~mesbox("Your experience in crafting tells you that there isn't enough wood to complete this task.");
            return;
        }
        ~mesbox("You happily start hacking away at the table but realise that you won't have enough wood to properly finish the item off!");
        %zq_map_mechanisms = setbit(%zq_map_mechanisms, 0); // TODO: is this set before or after this mesbox? sounds like after: https://x.com/rhysdog2/status/1519274918613233665
        stat_advance(crafting, 5);
    case 2 :
        if(stat_random(stat(crafting), 125, 250) = false) {
            ~mesbox("You happily start hacking away at the table but realise that you won't have enough wood to properly finish the item off!"); // TODO: confirm 
            %zq_map_mechanisms = setbit(%zq_map_mechanisms, 0);
            return;
        }
        ~mesbox("You see that this table already looks very sea worthy it takes virtually no time at all to help fix it into a crude raft.");
        if_close;
        mes("You place it carefully on the water!");
        loc_add(0_45_146_17_29, loc_2227, 0, centrepiece_straight, 6);
        cam_shake(4, 0, 20, 5);
        cam_shake(1, 0, 20, 4);
        stat_advance(crafting, 30);
        %zq_map_mechanisms = setbit(%zq_map_mechanisms, 0);
        p_teleport(0_45_146_17_29);
        p_delay(2); // 2t
        mes("You board the raft!");
        p_delay(1);
        mes("You push off!");
        p_delay(1);
        say("Weeeeeeee!");
        loc_del(1);
        loc_add(0_45_146_12_17, loc_2227, 0, centrepiece_straight, 2);
        p_telejump(0_45_146_12_17);
        p_delay(1);
        loc_del(1);
        loc_add(0_45_146_22_7, loc_2227, 1, centrepiece_straight, 2);
        p_telejump(0_45_146_22_7);
        p_delay(1);
        say("Weeeeeeee!");
        loc_del(1);
        loc_add(0_45_146_38_6, loc_2227, 1, centrepiece_straight, 2);
        p_telejump(0_45_146_38_6);
        p_delay(1);
        loc_del(1);
        loc_add(0_45_146_47_7, loc_2227, 1, centrepiece_straight, 2);
        p_telejump(0_45_146_47_7);
        p_delay(1);
        mes("You come to a huge waterfall...");
        say("* Uh oh! *");
        loc_del(1);
        loc_add(0_45_146_55_7, loc_2227, 1, centrepiece_straight, 2);
        p_telejump(0_45_146_55_7);
        cam_moveto(0_45_146_48_7, 550, 100, 100);
        cam_lookat(0_46_146_7_7, 20, 100, 100);
        p_delay(1);
        mes("...And plough through it!");
        loc_del(1);
        loc_add(0_45_146_61_7, loc_2227, 1, centrepiece_straight, 2);
        p_teleport(0_45_146_61_7);
        p_delay(1);
        cam_reset;
        p_telejump(0_45_46_49_5);
        facesquare(movecoord(coord, 8, 0, 0));
        p_delay(0);
        p_telejump(movecoord(coord, 1, 0, 0));
        loc_add(coord, loc_2227, 1, centrepiece_straight, 2);
        p_delay(1);
        loc_del(1);
        p_telejump(movecoord(coord, 1, 0, 0));
        loc_add(coord, loc_2227, 1, centrepiece_straight, 7);
        p_delay(0);
        mes("The raft soons breaks up.");
        loc_change(loc_1988, 5);
        ~agility_exactmove(human_sidestep_fall, 5, 0, coord, movecoord(coord, 0, 0, 1), 6, 30, ^exact_east, false);
        loc_del(1);
        sound_synth(pool_plop, 0, 0);
        spotanim_map(watersplash, coord, 0, 0);
        loc_add(movecoord(coord, 1, 0, 0), loc_1988, 1, centrepiece_straight, 5);
        ~set_readyandwalk_bas(seq_773, seq_773, human_swim);
        p_delay(0);
        ~forcemove(movecoord(coord, 0, 0, 1));
        ~update_bas;
        loc_del(1);
        loc_add(0_45_46_53_7, loc_1988, 1, centrepiece_straight, 10);
        ~forcemove(movecoord(coord, 0, 0, 1));
    case 3:
        if(stat_random(stat(crafting), 125, 250) = true) {
            ~mesbox("Your experience in crafting tells you that there isn't enough wood to complete this task.");
            return;
        }
        ~mesbox("You happily start hacking away at the table but realise that you won't have enough wood to properly finish the item off!");
        %zq_map_mechanisms = setbit(%zq_map_mechanisms, 0); // TODO: is this set before or after this mesbox? sounds like after: https://x.com/rhysdog2/status/1519274918613233665
}

[oploc1,loc_2221]
~mesbox("This stone seems to have strange markings on it.");

[oploc2,loc_2221]
~mesbox("This stone seems to have strange markings on it. Maybe Trufitus can decipher them? The stone is too heavy to carry but the letters stand proud on a plaque. Maybe you could seperate the plaque from the rock?");

[oplocu,loc_2221]
if(last_useitem = spade | last_useitem = chisel | oc_category(last_useitem) = weapon_pickaxe) {
    if(~obj_gettotal(stoneplaque) > 0) {
        ~mesbox("It looks as if something has been cut from this stone.");
        return;
    }
    anim(human_pickupfloor, 0);
    p_delay(0);
    inv_add(inv, stoneplaque, 1);
    ~objboxt(stoneplaque, "You cleanly cut the plaque of letters away from the rock. You place it carefully into your inventory.");
    return;
}
~displaymessage(^dm_default);

[opheld1,stoneplaque]
~mesbox("The markings are very intricate. It's a very strange language. The meaning of it evades you though. Perhaps Trufitus can decipher the markings?");

[opheld5,stoneplaque]
~mesbox("This looks quite important, are you sure you want to drop it?");
def_int $choice = ~p_choice2("Yes, I'm quite sure.", 1, "No, I think I'll keep it.", 2);
if ($choice = 1) {
    ~mesbox("You decide to throw the item away...");
    inv_del(inv, stoneplaque, 1);
    ~mesbox("As you drop the item, it bounces into a stream, never to be seen again.");
} else if ($choice = 2) {
    mes("You decide against throwing the item away.");
}

[oploc2,loc_2220]
~mesbox("You see that there is a narrow gap through into the darkness. You could try to wriggle through and see where it takes you.");
def_int $choice = ~p_choice2_header("Yes, I'll wriggle through.", 1, "No, I'll stay here.", 2, "Wriggle through the rubble?");
if ($choice = 1) {
    if(coordz(coord) > 9344) p_teleport(0_45_145_8_3);
    else p_teleport(0_45_146_7_30);
    mes("You manage to wriggle through the rubble.");
} else if ($choice = 2) {
    mes("You decide to stay where you are.");
}

[oploc2,loc_2222]
if(~obj_gettotal(tattered_scroll) > 0) {
    ~mesbox("You see nothing here but an empty bookcase behind some rocks.");
    return;
}
~mesbox("You can see that there is something hidden behind some rocks. Do you want to have a look? It looks a bit dangerous as the ceiling doesn't look at all safe.");
def_int $choice = ~p_choice2("Yes, I'm quite sure.", 1, "No, I think I'll keep it.", 2);
if ($choice = 1) {
    ~mesbox("You start to slowly move the rocks to one side.");
    inv_add(inv, tattered_scroll, 1);
    ~objboxt(tattered_scroll, "You carefully manage to remove enough rocks to see a book shelf. You gingerly remove a delicate scroll from the shelf and place it in your inventory.");
} else if ($choice = 2) {
    ~mesbox("You decide to leave the rocks well alone. The ceiling does look a little unsafe.");
}

[opheld1,tattered_scroll]
~mesbox("This looks like part of a scroll about someone called Bervirius. Would you like to read it?");
switch_int(~p_choice2("Yes please.", 1, "No thanks.", 2)) {
    case 1 : @scroll_zombiequeen_tattered;
    case 2 : ~mesbox("You decide not to open the scroll. But instead place it carefully back in your inventory.");
}

[opheld5,tattered_scroll]
~mesbox("This looks quite important, are you sure you want to drop it?");
def_int $choice = ~p_choice2("Yes, I'm quite sure.", 1, "No, I think I'll keep it.", 2);
if ($choice = 1) {
    ~mesbox("You decide to throw the item away...");
    inv_del(inv, tattered_scroll, 1);
    ~mesbox("As you drop the item, it falls down a narrow crevice, never to be seen again.");
} else if ($choice = 2) {
    mes("You decide against throwing the item away.");
}

[oploc2,loc_2223]
if(~obj_gettotal(crumpled_scroll) > 0) {
    mes("You find nothing in the sacks.");
    return;
}
inv_add(inv, tattered_scroll, 1);
~objboxt(tattered_scroll, "You find a tattered but very ornate scroll, which you place carefully in your inventory.");

[opheld1,crumpled_scroll]
~mesbox("This looks like part of a scroll about someone called Bervirius. Would you like to read it?");
switch_int(~p_choice2("Yes please.", 1, "No thanks.", 2)) {
    case 1 : @scroll_zombiequeen_tattered;
    case 2 : ~mesbox("You decide not to open the scroll. But instead place it carefully back in your inventory.");
}

[opheld5,crumpled_scroll]
~mesbox("This looks quite important, are you sure you want to drop it?");
def_int $choice = ~p_choice2("Yes, I'm quite sure.", 1, "No, I think I'll keep it.", 2);
if ($choice = 1) {
    ~mesbox("You decide to throw the item away.");
    inv_del(inv, crumpled_scroll, 1);
    ~mesbox("As you drop the item, it gets carried away by the wind, never to be seen again.");
} else if ($choice = 2) {
    mes("You decide against throwing the item away.");
}

[oploc1,loc_2224]
~mesbox("You take a look at the gallows. It's pretty eerie looking.");
~mesbox("A grisly sight meets your eyes. A human corpse hangs from the noose. His hands have been tied behind his back.");

[oploc2,loc_2224]
mes("You search the gallows...");
p_delay(2);
if(~obj_gettotal(zadimus_corpse) > 0) {
    ~mesbox("The gallows look pretty eerie. You search but find nothing.");
    return;
}
~mesbox("You find a human corpse hanging in the noose. It looks as if the corpse can be removed easily. Would you like to remove the corpse from the noose?");
switch_int(~p_choice2("I don't think so, it might animate and attack me!", 1, "Yes, I may find something else on the corpse.", 2)) {
    case 1 :
        ~mesbox("You move away from the corpse quietly and slowly... ...you have an eerie feeling about this!");
        say("** Gulp! **");
    case 2 : 
        ~objboxt(zadimus_corpse, "You gently support the frame of the skeleton and lift the skull through the noose.");
        inv_add(inv, zadimus_corpse, 1);
        ~objboxt(zadimus_corpse, "You find an old sack and place the skeleton in it. Maybe Trufitus can give you some  tips on what to do with it.");
        ~mesbox("You sense that there is a spirit that needs to be put to rest.");
}

[opheld1,zadimus_corpse] @bury_zadimus_corpse;
[opheld5,zadimus_corpse] @bury_zadimus_corpse;

[label,bury_zadimus_corpse]
mes("You feel an unearthly compunction to bury this corpse!");
p_delay(3); // 3t TODO: adjust when delay fix
~mesbox("You hear a ghostly wailing sound coming from the corpse and a whispering voice says,'Let me rest in a sacred place and assist you I will'");

[oploc1,loc_2225]
~mesbox("There is a huge cascading waterfall in front of you, the roar of the water is quite loud. To the east you can see what looks like a trecherous pathway, it might lead outside.");

[oploc2,loc_2225]
~mesbox("You see a huge waterfall blocking your path.  The path leads on through the cascading waterfall, but it looks quite dangerous. Would you like to try and follow the path?");
switch_int(~p_choice2_header("Yes, I'll follow the path.", 1, "No, I'll look for another exit.", 2, "Follow the path?")) {
    case 1 :
        if_close;
        // this is probably just the whole block copy pasted for both sides on OSRS
        // the messages even have multiple differences lol, just going to bascially do the same thing
        p_delay(0); // TODO: delay issue (remove when fixed)
        mes("You start carefully edging along the slippery path...");
        if(coordz(coord) < 9351) {
            anim(human_ledge_on_left, 0);
            ~set_readyandwalk_bas(seq_757, seq_757, human_ledge_walk_left);
        } else {
            anim(human_ledge_on_right, 0);
            ~set_readyandwalk_bas(seq_755, seq_755, human_ledge_walk_right);
        }
        ~forcemove(movecoord(coord, 2, 0, 0));
        p_delay(0);
        if(stat_random(stat(agility), 125, 250) = false) {
            mes("You fall!");
            ~set_walkbas(human_drowning);
            sound_synth(pool_plop, 0, 0);
            if(coordz(coord) < 9351) {
                spotanim_map(watersplash, movecoord(coord, 0, 0, -1), 0, 3);
                ~agility_exactmove(seq_760, 30, 0, coord, movecoord(coord, 0, 0, -1), 31, 46, ^exact_east, false);
                say("Arrgghhhh!");
                ~forcemove(movecoord(coord, 2, 0, 0));
                p_delay(0);
                mes("You're pumelled as the thrashing water throws you against the rocks.");
                p_teleport(0_45_46_48_6);
                ~forcemove(movecoord(coord, 2, 0, 0));
                ~set_walkbas(human_swim);
                ~forcemove(movecoord(coord, 2, 0, 1));
                ~forcemove(movecoord(coord, 0, 0, 1));
                ~update_bas;
                ~forcemove(movecoord(coord, 0, 0, 1));
                p_delay(0);
                ~damage_self(calc(((stat_base(hitpoints) * 30) / 100) + 1));
                ~damage_self(2);
            } else {
                spotanim_map(watersplash, movecoord(coord, 0, 0, 1), 0, 3);
                ~agility_exactmove(seq_760, 30, 0, coord, movecoord(coord, 0, 0, 1), 31, 46, ^exact_east, false);
                say("Arrgghhhh!");
                ~forcemove(movecoord(coord, 2, 0, 0));
                p_delay(0);
                mes("You're pumelled as the thrashing water throws");
                mes("you against the rocks.");
                p_teleport(0_45_46_48_4);
                ~forcemove(movecoord(coord, 2, 0, 0));
                ~set_walkbas(human_swim);
                ~forcemove(movecoord(coord, 2, 0, -1));
                ~forcemove(movecoord(coord, 0, 0, -1));
                ~update_bas;
                ~forcemove(movecoord(coord, 0, 0, -1));
                p_delay(0);
                ~damage_self(calc(((stat_base(hitpoints) * 30) / 100) + 1));
                ~damage_self(2);
            }
            return;
        }
        if(coordz(coord) < 9351) {
            mes("You climb your way out of the cavern into the heat of the Jungle.");
            stat_advance(agility, 5);
            ~forcemove(movecoord(coord, 2, 0, 0));
            p_teleport(0_45_46_48_3);
            p_delay(0);
            ~update_bas;
            p_teleport(movecoord(coord, 1, 0, -1));
        } else {
            mes("You climb your way out of the cavern into the heat of the jungle.");
            stat_advance(agility, 5);
            ~forcemove(movecoord(coord, 2, 0, 0));
            p_teleport(0_45_46_48_7);
            p_delay(0);
            ~update_bas;
            p_teleport(movecoord(coord, 1, 0, 1));
        } 
    case 2 : 
        ~mesbox("You decide to have another look around. And see if you can find a better way to get out.");
}

[mapzoneexit,0_45_145] queue(exit_ah_za_rhoon, 0);
[mapzoneexit,0_45_146] queue(exit_ah_za_rhoon, 0);

[queue,exit_ah_za_rhoon]
if(inzone(0_45_145_0_0, 0_45_146_63_63, coord) = true) {
    return;
}
if(%zombiequeen_progress = ^zombiequeen_entered_ah_za_rhoon) %zombiequeen_progress = ^zombiequeen_left_ah_za_rhoon;

[oploc1,loc_2235]
~mesbox("The dolmen is intricately decorated with the symbol of two crossed palm trees. It might be the family crest? You can see that there are some items on the dolmen.");

[oploc2,loc_2235]
if(inv_total(inv, zqpommel) > 0 & inv_total(inv, zqcrystal) > 0) {
    ~mesbox("The dolmen is intricately decorated with the symbol of two crossed palm trees. It might be the family crest? You can see an item on the dolmen.");
} else if(inv_total(inv, zqpommel) > 0 | inv_total(inv, zqcrystal) > 0) {
    ~mesbox("The dolmen is intricately decorated with the symbol of two crossed palm trees. It might be the family crest? You can see an item on the dolmen.");
} else {
    ~mesbox("The dolmen is intricately decorated with the symbol of two crossed palm trees. It might be the family crest? You can see that there are some items on the dolmen.");
}
if(inv_total(inv, zqpommel) = 0) {
    inv_add(inv, zqpommel, 1);
    ~objboxt(zqpommel, "You find a rusty sword with an ivory pommel. You<br>take the Ivory pommel and place it in your inventory.");
}
if(inv_total(inv, zqcrystal) = 0) {
    inv_add(inv, zqcrystal, 1);
    ~objboxt(zqcrystal, "You find a Crystal Sphere. You take the crystal and place it carefully in your inventory.");
}
if(inv_total(inv, bervirius_notes) = 0) {
    if(testbit(%zq_map_mechanisms, 1) = false) {
        if(inv_total(inv, papyrus) > 0 & inv_total(inv, charcoal) > 0) {
            ~mesbox("Do you want to take some notes from this dolmen using your papyrus and charcoal?");
            switch_int(~p_choice2("Yes, I'll make some notes.", 1, "No, I don't want to make any notes.", 2)) {
                case 1 :
                    inv_del(inv, papyrus, 1);
                    ~objboxt(bervirius_notes, "You find some writing on the dolmen, you take some of your papyrus and using the charcoal copy the text as best you can and collect them together as a scroll.");
                case 2 : ~mesbox("You decide not to take any notes from the dolmen.");
            }
            return;
        }
        ~mesbox("You find some writing on the dolmen. You'll need some papyrus and charcoal to make new notes from this dolmen.");
    } else {
        inv_add(inv, bervirius_notes, 1);
        ~objboxt(bervirius_notes, "You find some writing on the dolmen, you grab some nearby scraps of delicate paper together and copy the text as best you can and collect them together as a scroll.");
    }
}

[opheld5,zqpommel]
inv_del(inv, zqpommel, 1);
~objboxt(zqpommel, "You drop the sword pommel on the floor. It turns to dust as soon as it hits the ground.");

[opheld5,zqcrystal]
~objboxt(zqcrystal, "Are you sure you want to drop this crystal? It looks very delicate and it may break.");
switch_int(~p_choice2_header("Yes I am sure.", 1, "No, I've reconsidered, I'll keep it!", 2, "Drop the Locating Crystal?")) {
    case 1 :
        inv_del(inv, papyrus, 1);
        ~objboxt(bervirius_notes, "You find some writing on the dolmen, you take some of your papyrus and using the charcoal copy the text as best you can and collect them together as a scroll.");
    case 2 : ~objboxt(zqcrystal, "You decide to keep the Locating Crystal tucked into your inventory safe and sound.");
}

[oploc1,loc_2236]
p_arrivedelay;
mes("You attempt to climb the granite rock.");
~set_readyandwalk_bas(seq_738, seq_737, seq_737);
~forcemove(movecoord(loc_coord, 1, 0, 0));
if(stat_random(stat(agility), 125, 250) = false) {
    mes("You fall!");
    ~update_bas;
    say("Arrggghhhhhh!");
    // sound_synth stumble_loop loops = 10
    ~agility_exactmove(null, 0, 0, coord, movecoord(coord, 2, 0, 0), 31, 50, ^exact_east, false);
    ~damage_self(~random_range(1, 10)); // this range should be correct
    return;
}
mes("You manage to climb back out again!");
~forcemove(movecoord(coord, 2, 0, -1));
~update_bas;
p_teleport(0_43_46_12_32);
p_delay(1);
~forcemove(movecoord(coord, 1, 0, 0));


[proc,random_undead_one](npc)
switch_int(random(4)) {
    case 0 : return (npc_502);
    case 1 : return (npc_503);
    case 2 : return (npc_504);
    case 3 : return (npc_505);
}