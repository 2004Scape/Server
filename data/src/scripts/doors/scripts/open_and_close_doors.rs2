[oploc1,_door_open_and_close]
// ~loc_shape_debug(loc_shape);
// mes(tostring(loc_angle));
if (string_length(loc_param(game_message)) ! 0) {
    mes(loc_param(game_message));
}
~open_and_close_door(loc_param(next_loc_stage), ~check_axis(coord, loc_coord, loc_angle), false);

[proc,open_and_close_door](loc $replacement, boolean $entering, boolean $play_locked_synth)
def_int $x;
def_int $z;

def_coord $loc_coord = loc_coord;
def_int $angle = loc_angle;
def_locshape $shape = loc_shape;

$x, $z = ~door_open($angle, loc_shape);

// walk through door, but if entering, walk next to door and then through
def_coord $dest = $loc_coord;
if ($entering = true) {
    // mes(~coord_tostring($loc_coord));
    // mes(~coord_tostring(coord));
    if ($play_locked_synth =  true) {
        sound_synth(locked, 0, 0);
    }
    if (coord ! $loc_coord) {
        p_teleport($loc_coord);
        // initially thought p_delay(0); was the right speed.
        // but it seems to have buggy clipping; you move through too early
        p_delay(1);
    }
    $dest = movecoord($loc_coord, $x, 0, $z);
}
p_teleport($dest);

loc_change(loc_83, 2);
loc_add(movecoord($loc_coord, $x, 0, $z), $replacement, modulo(add($angle, 1), 4), $shape, 2);

sound_synth(door_open, 0, 0);

// same as the other proc but plays the sound instantly
[proc,open_and_close_door2](loc $replacement, boolean $entering, synth $sound)
def_int $x;
def_int $z;
def_int $angle = loc_angle;
def_locshape $shape = loc_shape;
def_coord $loc_coord = loc_coord;
$x, $z = ~door_open($angle, loc_shape);
def_coord $dest = $loc_coord;
sound_synth($sound, 0, 0);
if ($entering = true) {
    if (coord ! $loc_coord) {
        p_teleport($loc_coord);
        p_delay(1);
    }
    $dest = movecoord(loc_coord, $x, 0, $z);
}
p_teleport($dest);
loc_change(loc_83, 2);
loc_add(movecoord($loc_coord, $x, 0, $z), $replacement, modulo(add($angle, 1), 4), $shape, 2);

[proc,open_and_close_metal_gate](loc $replacement, boolean $entering, boolean $mirrored)
// ~loc_shape_debug(loc_shape);
// mes(tostring(loc_angle));
def_int $x;
def_int $z;
def_int $telex;
def_int $telez;

def_coord $loc_coord = loc_coord;
def_int $angle = loc_angle;
if ($mirrored = true) {
    $x, $z = ~door_open_mirrored($angle);
} else {
    $x, $z = ~door_open($angle, loc_shape);
}
def_locshape $shape = loc_shape;

$telex, $telez = ~door_open($angle, loc_shape);
// walk through door, but if entering, walk next to door and then through
def_coord $dest = $loc_coord;
if ($entering = true) {
    // mes(~coord_tostring($loc_coord));
    // mes(~coord_tostring(coord));
    if (coord ! $loc_coord) {
        p_teleport($loc_coord);
        // initially thought p_delay(0); was the right speed.
        // but it seems to have buggy clipping; you move through too early
        p_delay(1);
    }
    $dest = movecoord($loc_coord, $telex, 0, $telez);
}
p_teleport($dest);

loc_change(loc_83, 2);
loc_add(movecoord($loc_coord, $x, 0, $z), $replacement, modulo(add($angle, 1), 4), $shape, 2);

sound_synth(grate_open, 0, 0);

[proc,open_and_close_metal_gate2](loc $replacement, boolean $entering, boolean $mirrored)
// ~loc_shape_debug(loc_shape);
// mes(tostring(loc_angle));
def_int $x;
def_int $z;
def_int $telex;
def_int $telez;

def_coord $loc_coord = loc_coord;
def_int $angle = loc_angle;
if ($mirrored = true) {
    $x, $z = ~door_open_mirrored($angle);
} else {
    $x, $z = ~door_open($angle, loc_shape);
}
def_locshape $shape = loc_shape;

$telex, $telez = ~door_open($angle, loc_shape);
sound_synth(grate_open, 0, 0);
// walk through door, but if entering, walk next to door and then through
def_coord $dest = $loc_coord;
if ($entering = true) {
    // mes(~coord_tostring($loc_coord));
    // mes(~coord_tostring(coord));
    if (coord ! $loc_coord) {
        p_teleport($loc_coord);
        // initially thought p_delay(0); was the right speed.
        // but it seems to have buggy clipping; you move through too early
        p_delay(1);
    }
    $dest = movecoord($loc_coord, $telex, 0, $telez);
}
p_teleport($dest);

loc_change(loc_83, 2);
loc_add(movecoord($loc_coord, $x, 0, $z), $replacement, modulo(add($angle, 1), 4), $shape, 2);
