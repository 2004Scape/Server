[oploc1,_door_left_closed]
mes(~coord_tostring(loc_coord));
if (~inzone_coord_pair_table(members_gates, loc_coord) = true) {
    ~require_members_gate;
}
~open_double_doors_left(500, door_right_closed);

[oploc1,_door_right_closed]
mes(~coord_tostring(loc_coord));
if (~inzone_coord_pair_table(members_gates, loc_coord) = true) {
    ~require_members_gate;
}
~open_double_doors_right(500, door_left_closed);

[oploc1,_door_left_opened]
~close_double_doors_left(500, door_right_opened);

[oploc1,_door_right_opened] 
~close_double_doors_right(500, door_left_opened);

[proc,open_double_doors_left](int $duration, category $category)
def_coord $opposite = ~movecoord_loc_return(~door_close(loc_angle, loc_shape));
sound_synth(loc_param(open_sound), 0, 0);
loc_del($duration);
loc_add(~movecoord_loc_return(~door_open(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 3) % 4), wall_straight, $duration);
loc_findallzone($opposite);
while (loc_findnext = true) {
    if (loc_coord = $opposite & loc_category = $category) {
        loc_del($duration);
        loc_add(~movecoord_loc_return(~door_open(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 1) % 4), wall_straight, $duration);
        return;
    }
}

[proc,open_double_doors_right](int $duration, category $category)
def_coord $opposite = ~movecoord_loc_return(~multiply2(~door_close(loc_angle, loc_shape), -1));
sound_synth(loc_param(open_sound), 0, 0);
loc_del($duration);
loc_add(~movecoord_loc_return(~door_open(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 1) % 4), wall_straight, $duration);
loc_findallzone($opposite);
while (loc_findnext = true) {
    if (loc_coord = $opposite & loc_category = $category) {
        loc_del($duration);
        loc_add(~movecoord_loc_return(~door_open(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 3) % 4), wall_straight, $duration);
        return;
    }
}

[proc,close_double_doors_left](int $duration, category $category)
def_coord $opposite = ~movecoord_loc_return(~multiply2(~door_open(loc_angle, loc_shape), -1));
sound_synth(loc_param(close_sound), 0, 0);
loc_del($duration);
loc_add(~movecoord_loc_return(~multiply2(~door_close(loc_angle, loc_shape), -1)), loc_param(next_loc_stage), calc((loc_angle + 1) % 4), wall_straight, $duration);
loc_findallzone($opposite);
while (loc_findnext = true) {
    if (loc_coord = $opposite & loc_category = $category) {
        loc_del($duration);
        loc_add(~movecoord_loc_return(~door_close(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 3) % 4), wall_straight, $duration);
        return;
    }
}

[proc,close_double_doors_right](int $duration, category $category)
def_coord $opposite = ~movecoord_loc_return(~multiply2(~door_open(loc_angle, loc_shape), -1));
sound_synth(loc_param(close_sound), 0, 0);
loc_del($duration);
loc_add(~movecoord_loc_return(~door_close(loc_angle, loc_shape)), loc_param(next_loc_stage), calc((loc_angle + 3) % 4), wall_straight, $duration);
loc_findallzone($opposite);
while (loc_findnext = true) {
    if (loc_coord = $opposite & loc_category = $category) {
        loc_del($duration);
        loc_add(~movecoord_loc_return(~multiply2(~door_close(loc_angle, loc_shape), -1)), loc_param(next_loc_stage), calc((loc_angle + 1) % 4), wall_straight, $duration);
        return;
    }
}