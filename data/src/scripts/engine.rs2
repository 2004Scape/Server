// we need to predeclare these commands so that the compiler knows about them

// custom

[command,error](string $text)
[command,givexp](stat $stat, int $exp)
[command,npc_damage](int $type, int $amount)
[command,damage](player_uid $uid, int $type, int $amount)

[command,weakqueue](weakqueue $queue, int $delay)
[command,strongqueue](queue $queue, int $delay)

[command,p_logout]

[command,if_setcolour](component $component, int $colour)
[command,if_openbottom](interface $interface)
[command,if_opensub](interface $interface1, interface $interface2)
[command,if_sethide](component $component, boolean $hide)
[command,if_setobject](component $component, namedobj $obj)
[command,if_settabactive](int $tab)
[command,if_setmodel](component $component, int $model)
[command,if_setmodelcolour]
[command,if_settabflash](int $tab)
[command,if_closesub]
[command,if_setanim](component $component,seq $anim)
[command,if_settab](interface $interface, int $tab)
[command,if_opentop](interface $interface)
[command,if_opensticky](interface $interface)
[command,if_opensidebar](interface $interface)
[command,if_setplayerhead](component $component)
[command,if_settext](component $component, string $text)
[command,if_setnpchead](component $component, npc $npc)
[command,if_setposition]
[command,if_multizone](boolean $multizone)

[command,inv_transmit](inv $inv, component $component)
[command,inv_stoptransmit](inv $inv)

// leaks

[command,anim](seq $anim, int $delay)
[command,buffer_full]()(int)
[command,buildappearance](inv $inv)
[command,cam_lookat](coord $coord, int $unknown0, int $unknown1, int $unknown2)
[command,cam_moveto](coord $coord, int $unknown0, int $unknown1, int $unknown2)
[command,cam_reset]
//[command,clearqueue](queue $queue)
[command,coord]()(coord)
[command,displayname]()(string)
[command,distance](coord $coord1, coord $coord2)(int)
//[command,enum](type $input, type $output, enum $enum, dynamic $key)(dynamic)
[command,enum_getoutputcount](enum $enum)(int)
[command,facesquare](coord $coord)
[command,finduid](player_uid $player)(boolean)
//[command,gosub](proc $sub)
[command,healenergy](int $amount)
[command,huntall](coord $source, int $distance, int $unknown0)
[command,huntnext]()(boolean)
[command,if_close]
[command,if_opensubmodal](component $component, interface $interface)
[command,if_opensuboverlay](component $component, overlayinterface $interface)
//[command,if_setevents](component $component, int $start, int $end, boolean $pausebutton, int $ops, int $targets, int $drag_depth, boolean $drag_target, boolean $target)
[command,inarea](area $area, coord $coord)(int)
[command,inv_add](inv $inv, obj $obj, int $count)
[command,inv_changeslot](inv $inv, obj $find, obj $replace, int $replace_count) // Unconfirmed arguments, inferred from comment in a released script
[command,inv_del](inv $inv, obj $obj, int $count)
[command,inv_getobj](inv $inv, int $slot)(obj)
[command,inv_itemspace2](inv $inv, obj $obj, int $count, int $size)(int)
[command,inv_moveitem](inv $from_inv, inv $to_inv, obj $obj, int $count)
[command,inv_resendslot](inv $inv, int $slot)
[command,inv_setslot](inv $inv, int $slot, obj $obj, int $count)
//[command,inv_setvar](inv $inv, int $slot, varbit $var, int $value)
[command,inv_size](inv $inv)(int)
[command,inv_total](inv $inv, obj $obj)(int)
[command,inzone](coord $coord1, coord $coord2, coord $pos)(int)
[command,jump](label $label)
[command,last_comsubid]()(int)
[command,last_int]()(int)
[command,last_item]()(obj) // unconfirmed, inferred from useitem and useslot
[command,last_slot]()(int)
[command,last_useitem]()(obj)
[command,last_useslot]()(int)
//[command,last_verifyobj]()(verifyobj)
[command,lineofwalk](coord $a, coord $b)(int)
[command,loc_add](coord $coord, loc $loc, int $angle, locshape $shape, int $duration)
[command,loc_angle]()(int)
[command,loc_anim](seq $anim)
[command,loc_category]()(category)
[command,loc_change](loc $new_loc)
[command,loc_coord]()(coord)
[command,loc_del](int $duration)
[command,loc_find](coord $coord, loc $loc)(boolean)
[command,loc_findallzone](coord $coord)
[command,loc_findnext]()(boolean)
[command,loc_param]/*(param $param)(dynamic)*/
[command,loc_type]()(loc)
//[command,longqueue](queue $queue, int $unknown0, int $unknown1, int $unknown2)
[command,map_clock]()(int)
[command,map_members]()(int)
[command,map_playercount](coord $coord1, coord $coord2)(int)
[command,max](int $a, int $b)(int)
[command,mes](string $text)
[command,min](int $a, int $b)(int)
[command,movecoord](coord $coord, int $x, int $y, int $z)(coord)
[command,name]()(string)
[command,nc_param]/*(npc $npc, param $param)(dynamic)*/
[command,npc_add](coord $coord, npc $npc, int $unknown0)
[command,npc_anim](seq $seq, int $delay)
[command,npc_basestat](npc_stat $stat)(int)
[command,npc_category]()(category)
[command,npc_coord]()(coord)
[command,npc_del]
[command,npc_delay](int $delay)
[command,npc_facesquare](coord $coord)
[command,npc_findexact](coord $coord, npc $npc)(boolean)
[command,npc_findhero]()(player_uid)
[command,npc_param]/*(param $param)(dynamic)*/
[command,npc_queue](int $ai_queue, int $delay)
//[command,npc_queue*](npc_queue $queue, int $delay)
[command,npc_range](coord $coord)(int)
[command,npc_say](string $text)
[command,npc_sethunt](int $distance)
//[command,npc_sethuntmode](hunt $hunt)
//[command,npc_setmode](mode $mode)
[command,npc_stat](npc_stat $stat)(int)
[command,npc_statheal](npc_stat $stat, int $amount_to_heal, int $percent_to_heal)
[command,npc_type]()(npc)
[command,obj_add](coord $coord, obj $obj, int $count, int $duration)
[command,obj_addall](coord $coord, obj $obj, int $count, int $duration)
//[command,objectverify](obj $obj, verifyobj $verifyobj)(boolean)
[command,oc_category](obj $obj)(category)
[command,oc_desc](obj $obj)(string)
[command,oc_members](obj $obj)(int)
[command,oc_param]/*(obj $obj, param $param)(dynamic)*/
[command,p_aprange](int $range)
[command,p_arrivedelay]
[command,p_clanforumqfcdialog]
[command,p_countdialog]
[command,p_delay](int $delay)
[command,p_opheld](int $op, int $inv, int $slot)
[command,p_oploc](int $op)
[command,p_opnpc](int $op)
[command,p_pausebutton]
[command,p_stopaction]
//[command,p_stringdialog]
[command,p_telejump](coord $coord)
[command,p_walk](coord $dest)
[command,random](int $num)(int)
[command,randominc](int $num)(int)
//[command,region_create](int $levels, int $width, int $height)
//[command,region_findbycoord](coord $coord)(boolean)
//[command,region_getcoord](int $level, int $x, int $z)(coord)
//[command,region_set](int $y, int $x, int $z, coord $source, int $rotation)
//[command,region_setexitcoord](coord $exit_coord)
//[command,region_uid]()(region_uid)
[command,say](string $text)
[command,seqlength](seq $seq)(int)
//[command,sound_area](coord $coord, int $distance, synth $sound, int $unknown0, int $unknown1)
[command,sound_synth](synth $sound, int $unknown0, int $unknown1)
[command,split_init](string $text, int $width, int $lines, fontmetrics $font)
[command,split_pagecount]()(int)
[command,spotanim_map](spotanim $anim, coord $coord)
[command,staffmodlevel]()(int)
[command,stat](stat $stat)(int)
[command,stat_heal](stat $stat, int $amount_to_heal, int $percent_to_heal)
[command,stat_random](int $level, int $low, int $high)(boolean)
[command,uid]()(player_uid)
//[command,weakqueue*](queue $queue, int $delay)

[command,tostring](int $int0)(string)

[command,struct_param]/*(struct $struct, param $param)(dynamic)*/

// debug commands
[command,active_npc](boolean)
[command,.active_npc](boolean)
[command,active_player](boolean)
[command,.active_player](boolean)
[command,active_loc](boolean)
[command,.active_loc](boolean)
[command,active_obj](boolean)
[command,.active_obj](boolean)