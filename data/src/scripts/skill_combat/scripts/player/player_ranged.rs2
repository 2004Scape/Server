[label,player_ranged_attack]
p_stopaction;
// npc_setmode(opplayer2);
// facesquare(npc_coord);

// TODO this is for flinching players (pvp etc)
//if (autoretaliateenabled && action_clock < gameClock()) action_clock = gameClock() + (weaponSpeed / 2)
if(%action_delay <= map_clock & npc_stat(hitpoints) = 0 & (npc_type = sir_mordred | npc_type = black_knight_titan)) {
    npc_statheal(hitpoints, npc_basestat(hitpoints), 0);
}

if (npc_stat(hitpoints) = 0) {
    p_stopaction;
    return; // this means the npc is not avail to fight i.e dead
}

def_obj $rhand = inv_getobj(worn, ^wearpos_rhand);
if ($rhand = null) {
    mes("That was your last one!");
    p_stopaction;
    ~update_all($rhand);
    return;
}

// check if npc is attackable
if (~npc_is_attackable(npc_type) = false) {
    p_stopaction;
    return;
}

if (%action_delay > map_clock | getwalktrigger() = stunned) {
    p_opnpc(2);
    return;
}

// this can be either the quiver or rhand.
def_obj $ammo = ~player_ranged_check_ammo($rhand);
if ($ammo = null) {
    p_stopaction;
    ~update_all($rhand);
    return;
}

~player_combat_stat; // update combat varps before swinging

// check hit, give combat xp
def_int $damage = 0;
if (~player_npc_hit_roll(%damagetype) = true) {
    if (npc_type = count_draynor & inv_total(inv, garlic) > 0) {
        %com_maxhit = add(%com_maxhit, 1);
    }
    $damage = randominc(min(%com_maxhit, npc_param(max_dealt)));
    $damage = min($damage, npc_stat(hitpoints));
    ~give_combat_experience(%damagestyle, $damage, npc_param(combat_xp_multiplier));
}

def_int $poison_severity = oc_param($ammo, poison_severity);
if ($damage > 0 & $poison_severity > 0 & random(8) = 0) { // 1/8 chance to poison
    // poison npc
    ~npc_poison_start(max(sub($poison_severity, 14), 0)); // lowered by 14 if ranged attack
}

//mes("attackstyle: <tostring(%attackstyle)>, damagestyle: <tostring(%damagestyle)>, damage: <tostring($damage)>, damagetype: <tostring(%damagetype)>");
def_int $delay = add(~player_ranged_use_weapon($rhand, $ammo), 30); // osrs it seems to be delayed an extra tick
anim(%com_attackanim, 0);
sound_synth(%com_attacksound, 0, 0);
~npc_retaliate(calc($delay / 30));
npc_queue(2, $damage, calc($delay / 30));
npc_anim(npc_param(defend_anim), sub($delay, 30)); // delay npc this tick
if (npc_param(defend_sound) ! null) {
    sound_synth(npc_param(defend_sound), 0, sub($delay, 30)); // delay 1 client tick for the hit queue
}
npc_heropoints($damage);
// set the skill clock depending on the weapon attack rate
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
if ($weapon = null) {
    %action_delay = add(map_clock, 4);
} else {
    %action_delay = add(map_clock, oc_param($weapon, attackrate));
}
if (%damagestyle = ^style_ranged_rapid) {
    %action_delay = sub(%action_delay, 1);
}
p_opnpc(2);
if ($ammo = holy_water) {
    world_delay(calc($delay / 30 - 2));
    if (map_blocked(npc_coord) = true) {
        return;
    }
    obj_add(npc_coord, obj_733, 1, 200);
    return;
}
if (random(5) ! 0) {
    world_delay(calc($delay / 30 - 2));
    if (map_blocked(npc_coord) = false) {
        if (p_finduid(uid) = true) {
            inv_dropslot(ranged_quiver_inv, npc_coord, 0, 200);
        }
    }
}
inv_clear(ranged_quiver_inv);

[proc,player_ranged_check_ammo](obj $rhand)(obj)
def_category $weapon_cat = oc_category($rhand);
if ($weapon_cat ! weapon_bow & $weapon_cat ! weapon_crossbow) {
    return($rhand); // in this case, the rhand is the ammo.
}
def_obj $ammo = inv_getobj(worn, ^wearpos_quiver);
if ($ammo = null) {
    mes("There is no ammo left in your quiver.");
    return(null);
}
def_category $ammo_cat = oc_category($ammo);
if ($weapon_cat = weapon_bow & $ammo_cat ! arrows) {
    mes("You can't use that ammo with your bow."); // TODO confirm this for 2004.
    return(null);
}
if ($weapon_cat = weapon_crossbow & $ammo_cat ! bolts) {
    mes("You can't use that ammo with your crossbow."); // TODO confirm this for 2004.
    return(null);
}
if (oc_param($ammo, levelrequire) > oc_param($rhand, levelrequire)) { //TODO confirm crossbows could use all bolts at lvl 1
    mes("Your bow isn't powerful enough for those arrows."); // TODO confirm this for 2004.
    return(null);
}

return($ammo);

[proc,player_ranged_use_weapon](obj $rhand, obj $ammo)(int)
switch_category(oc_category($rhand)) {
    case weapon_bow, weapon_crossbow: return(~ranged_shoot_npc($ammo));
    case weapon_thrown, weapon_javelin: return(~ranged_throw_npc($ammo));
    case default: return(30); // idk some random default delay just in case shouldnt happen tho
}

[proc,ranged_shoot_npc](obj $ammo)(int)
spotanim_pl(oc_param($ammo, proj_launch), 96, 0);
inv_moveitem(worn, ranged_quiver_inv, $ammo, 1);
return(~npc_projectile(coord, npc_uid, oc_param($ammo, proj_travel), 40, 36, 41, 15, 5, 11, 5));

[proc,ranged_throw_npc](obj $ammo)(int)
spotanim_pl(oc_param($ammo, proj_launch), 96, 0);
inv_moveitem(worn, ranged_quiver_inv, $ammo, 1);
return(~npc_projectile(coord, npc_uid, oc_param($ammo, proj_travel), 40, 36, 32, 15, 0, 11, 5));
