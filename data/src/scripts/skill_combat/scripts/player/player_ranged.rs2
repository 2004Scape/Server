[label,player_ranged_attack]
// npc_setmode(opplayer2);
// facesquare(npc_coord);

// TODO this is for flinching players (pvp etc)
//if (autoretaliateenabled && action_clock < gameClock()) action_clock = gameClock() + (weaponSpeed / 2)

if (npc_stat(hitpoints) = 0) {
    p_stopaction;
    return; // this means the npc is not avail to fight i.e dead
}

def_obj $rhand = inv_getobj(worn, ^wearpos_rhand);
if ($rhand = null) {
    mes("That was your last one!");
    p_stopaction;
    buildappearance(worn);
    return;
}

// check if npc is attackable
if (~npc_is_attackable(npc_type) = false) {
    p_stopaction;
    return;
}


if (~player_ranged_check_ammo($rhand) = false) {
    mes("There is no ammo left in your quiver.");
    p_stopaction;
    buildappearance(worn);
    return;
}

if (%action_delay > map_clock) {
    p_opnpc(2);
    return;
}

~player_combat_stat; // update combat varps before swinging

// check hit, give combat xp
def_int $damage = 0;
if (~player_npc_hit_roll(%damagetype) = true) { // TODO ranged calcs
    $damage = randominc(%com_maxhit);
    ~give_combat_experience(%damagestyle, $damage);
}

//mes("attackstyle: <tostring(%attackstyle)>, damagestyle: <tostring(%damagestyle)>, damage: <tostring($damage)>, damagetype: <tostring(%damagetype)>");
def_int $delay = ~player_ranged_use_weapon($rhand);
anim(%com_attackanim, 0);
sound_synth(%com_attacksound, 0, 0);
npc_queue(1, 0, calc($delay / 30));
npc_queue(2, $damage, calc($delay / 30));
npc_anim(npc_param(defend_anim), $delay); // delay npc this tick
sound_synth(npc_param(defend_sound), 0, $delay); // delay 1 client tick for the hit queue
npc_heropoints($damage);
%npc_attacking_uid = uid;
%npc_lastcombat = map_clock;
// set the skill clock depending on the weapon attack rate
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
if ($weapon = null) {
    %action_delay = add(map_clock, 4);
} else {
    %action_delay = add(map_clock, oc_param($weapon, attackrate));
}
if (%damagestyle = ^style_ranged_rapid) {
    %action_delay = sub(%action_delay, 1);
}
p_opnpc(2);
if (random(5) ! 0) {
    world_delay(calc($delay / 30));
    obj_add(npc_coord, iron_arrow, 1, 200);
}

[proc,player_ranged_check_ammo](obj $rhand)(boolean)
def_category $cat = oc_category($rhand);
if (($cat = weapon_bow | $cat = weapon_crossbow) & inv_getobj(worn, ^wearpos_quiver) = null) {
    return(false);
}
return(true);

[proc,player_ranged_use_weapon](obj $rhand)(int)
switch_category(oc_category($rhand)) {
    case weapon_bow: return(~player_ranged_shoot(inv_getobj(worn, ^wearpos_quiver)));
    case weapon_crossbow: return(~player_ranged_shoot(inv_getobj(worn, ^wearpos_quiver)));
    case weapon_thrown: return(~player_ranged_throw($rhand));
    case weapon_javelin: return(~player_ranged_throw($rhand));
    case default: return(4); // idk some random default delay just in case shouldnt happen tho
}

[proc,player_ranged_shoot](obj $quiver)(int)
spotanim_pl(oc_param($quiver, proj_launch), 96, 0);
inv_del(worn, $quiver, 1);
return(~npc_projectile(coord, npc_uid, oc_param($quiver, proj_travel), 40, 36, 41, 15, 5, 11, 5));

[proc,player_ranged_throw](obj $rhand)(int)
spotanim_pl(oc_param($rhand, proj_launch), 96, 0);
inv_del(worn, $rhand, 1);
return(~npc_projectile(coord, npc_uid, oc_param($rhand, proj_travel), 40, 36, 32, 15, 0, 11, 5));
