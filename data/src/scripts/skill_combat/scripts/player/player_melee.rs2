// begins combat
[label,player_melee_attack]
p_stopaction;
// npc_setmode(opplayer2);
// facesquare(npc_coord);

// TODO this is for flinching players (pvp etc)
//if (autoretaliateenabled && action_clock < gameClock()) action_clock = gameClock() + (weaponSpeed / 2)

if (~npc_is_attackable(npc_type) = false) {
    return;
}

if (%action_delay > map_clock | getwalktrigger() = stunned) {
    p_opnpc(2); // it is guaranteed here that we are already within op distance
    return;
}

if(npc_stat(hitpoints) = 0 & (npc_type = sir_mordred | npc_type = black_knight_titan)) {
    npc_statheal(hitpoints, npc_basestat(hitpoints), 0);
}

if (npc_stat(hitpoints) = 0) {
    p_stopaction;
    return; // this means the npc is not avail to fight i.e dead
}

~player_combat_stat; // update combat varps before swinging

// check hit, give combat xp
def_int $damage = 0;
if (~player_npc_hit_roll(%damagetype) = true) {
    if (npc_type = count_draynor & inv_total(inv, garlic) > 0) {
        %com_maxhit = add(%com_maxhit, 1);
    }
    $damage = randominc(min(%com_maxhit, npc_param(max_dealt)));
    $damage = min($damage, npc_stat(hitpoints));
    ~give_combat_experience(%damagestyle, $damage, npc_param(combat_xp_multiplier));
}

def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
if ($weapon ! null) {
    def_int $poison_severity = oc_param($weapon, poison_severity);
    if ($damage > 0 & $poison_severity > 0 & random(4) = 0) { // 1/4 chance to poison
        // poison npc
        ~npc_poison_start($poison_severity);
    }
}

//mes("attackstyle: <tostring(%attackstyle)>, damagestyle: <tostring(%damagestyle)>, damage: <tostring($damage)>, damagetype: <tostring(%damagetype)>");
anim(%com_attackanim, 0);
sound_synth(%com_attacksound, 0, 0);
~npc_retaliate(0);
npc_queue(2, $damage, 0);
npc_anim(npc_param(defend_anim), 20); 
if (npc_param(defend_sound) ! null) {
    sound_synth(npc_param(defend_sound), 0, 20); // delay npc this tick
}
npc_heropoints($damage);
// set the skill clock depending on the weapon attack rate
if ($weapon = null) {
    %action_delay = add(map_clock, 4);
} else {
    %action_delay = add(map_clock, oc_param($weapon, attackrate));
}
p_opnpc(2);