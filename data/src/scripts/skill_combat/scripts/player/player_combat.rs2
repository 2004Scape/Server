[opnpc2,_]
// if (calc(%npc_lastcombat + 10) > map_clock & %npc_attacking_uid ! uid) {
//     mes("Someone else is fighting that.");
//     return;
// }
@player_combat_start;

[apnpc2,_]
def_int $distance = npc_range(coord);
def_int $attackrange = 0;
if (inv_getobj(worn, ^wearpos_rhand) ! null) {
    $attackrange = min(oc_param(inv_getobj(worn, ^wearpos_rhand), attackrange), 10);
    if (%damagestyle = ^style_ranged_longrange) {
        $attackrange = min(add($attackrange, 2), 10);
    }
}
// if auto cast is enabled
// mes("<tostring(%attackstyle_magic)>");
// if (testbit(%attackstyle_magic, 0) = true){
//     mes("TRUE");
// }
// mes("<tostring(%spell)>");
if (%spell <= 0 & (testbit(%attackstyle_magic, 0) = true & %attackstyle_magic = 3)) {
    %spell = %autocast_spell;
}
if (%spell > 0){
    // look for spell in db
    def_dbrow $spell_data = ~get_spell_data(%spell);
    // define spell runes
    def_namedobj $rune1;
    def_int $rune_count1;
    def_namedobj $rune2;
    def_int $rune_count2;
    def_namedobj $rune3;
    def_int $rune_count3;
    def_boolean $passes;
    // check runes
    $passes, $rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~check_spell_requirements($spell_data);
    if ($passes = false) {
        return;
    }
    $attackrange = 10;
}
if ($attackrange <= 1) {
    // if (calc(%npc_lastcombat + 10) > map_clock & %npc_attacking_uid ! uid) {
    //     mes("Someone else is fighting that.");
    // }
    p_aprange($attackrange); // walk then op again
    return;
}
if ($distance > $attackrange) {
    p_aprange($attackrange);
    return;
}
// if (calc(%npc_lastcombat + 10) > map_clock & %npc_attacking_uid ! uid) {
//     mes("Someone else is fighting that.");
//     return;
// }
p_aprange($attackrange);
@player_combat_start;

[label,player_combat_start]
// facesquare(npc_coord);
// TODO: Range and mage check
if (%damagetype = ^ranged_style) {
    @player_ranged_attack;
}
// mes("<tostring(%attackstyle_magic)>");
// if (testbit(%attackstyle_magic, 0) = true){
//     mes("TRUE");
// }
if (%spell > 0) {
    // in osrs you cant tick manip with autocast delay, so its prob its on varp?
    if (%autocast_delay = map_clock | %action_delay > map_clock) {
        @player_magic_spell_attack(%spell);
        return;
    }
    if (%autocast_delay < map_clock) {
        // add auto cast delay
        %autocast_delay = add(map_clock, 1);
        p_opnpc(2);
        return;
    }
} else {
    // i assume they just melee if autocast is turned on but no spell is selected. Complete guess, needs confirmation!!
    @player_melee_attack;
}


[proc,player_npc_hit_roll](int $damagetype)(boolean)
def_int $attack_roll = ~player_attack_roll_specific($damagetype);
def_int $defence_roll = ~npc_defence_roll_specific($damagetype);
//mes("Clock: <tostring(map_clock)>, Player A: <tostring($attack_roll)>, NPC D: <tostring($defence_roll)>, Player Max: <tostring(%com_maxhit)>");
//mes("Attack roll: <tostring($attack_roll)>, Defence roll: <tostring($defence_roll)>");
if (randominc($attack_roll) > randominc($defence_roll)) {
    return(true);
}
return(false);

// returns the correct combat calculated attack damage for weapon
[proc,player_attack_roll_specific](int $damagetype)(int)
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
switch_int ($damagetype) {
    case ^stab_style: return(%com_stabattack);
    case ^slash_style: return(%com_slashattack);
    case ^crush_style: return(%com_crushattack);
    case ^ranged_style: return(%com_rangeattack);
    case ^magic_style: return(%com_magicattack);
}
error("combat style of <tostring($damagetype)> not defined in switch for p_npc_melee_roll");

// returns the player's defence roll, depending on style
[proc,player_defence_roll_specific](int $damagetype)(int)
switch_int ($damagetype) {
    case ^stab_style: return(%com_stabdef);
    case ^slash_style: return(%com_slashdef);
    case ^crush_style: return(%com_crushdef);
    case ^ranged_style: return(%com_rangedef);
    case ^magic_style: return(%com_magicdef);
}
error("style of <tostring($damagetype)> not defined in switch for player_defence_roll_specific");