[opnpc2,_] ~player_melee_attack;
[apnpc2,_]
if (npc_range(coord) > 1) {
    // TODO
    p_aprange(null);
    return;
}
~player_melee_attack;

//[apnpc2,_]
//mes("apnpc combat");
//
//def_int $attackrange = oc_param(inv_getobj(worn, ^wearpos_rhand), attackrange);
//mes("attack range is <tostring($attackrange)>");
//if (npc_range(coord) > $attackrange) {
//    p_aprange($attackrange);
//    return;
//}
//@combat_begin;

// begins combat
[proc,player_melee_attack]
// npc_setmode(opplayer2);
// facesquare(npc_coord);

// TODO this is for flinching players (pvp etc)
//if (autoretaliateenabled && action_clock < gameClock()) action_clock = gameClock() + (weaponSpeed / 2)

if (npc_stat(hitpoints) = 0) {
    return; // this means the npc is not avail to fight i.e dead
}

if (%action_delay > map_clock) {
    p_opnpc(2); // TODO p_apnpc()
    return;
}

~player_combat_stat; // update combat varps before swinging

// for flinching
// npc needs to be 8 ticks out of combat(since it was last able to atk) before it can be flinched
if (add(%npc_action_delay, 8) < map_clock) {
    %npc_action_delay = add(map_clock, add(divide(npc_param(attackrate), 2), 1));
}

// get style data
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
def_dbrow $data = ~combat_get_weapon_style_data($weapon);
// might be worth having a %damagetype, and %damagestyle varp
def_int $damagetype = ~combat_get_damagetype($data, %attackstyle);
def_int $damagestyle = ~combat_get_damagestyle($data, %attackstyle);

// check hit, give combat xp
def_int $damage = 0;
if (~player_npc_melee_hit_roll($damagetype) = true) {
    $damage = randominc(%com_maxhit);
    ~give_combat_experience($damagestyle, $damage);
    mes("Hit successful.");
} else {
    mes("Hit failed.");
}
mes("attackstyle: <tostring(%attackstyle)>, damagestyle: <tostring($damagestyle)>, damage: <tostring($damage)>, damagetype: <tostring($damagetype)>");

anim(%com_attackanim, 0);
sound_synth(%com_attacksound, 0, 0);
npc_queue(1, 0);
npc_queue(2, 0);
npc_anim(npc_param(defend_anim), 0); // delay npc this tick
sound_synth(~npc_combat_defend_sound, 0, 20); // delay 1 client tick for the hit queue
%npc_retaliation_pid = uid;
// set the skill clock depending on the weapon attack rate
if ($weapon = null) {
    %action_delay = add(map_clock, 4);
} else {
    %action_delay = add(map_clock, oc_param($weapon, attackrate));
}
p_opnpc(2);

// do a combat defend
[proc,combat_defend]
anim(%com_defendanim, 0);

[proc,player_npc_melee_hit_roll](int $damagetype)(boolean)
def_int $attack_roll = ~player_attack_roll_specific($damagetype);
def_int $defence_roll = ~npc_defence_roll_specific($damagetype);
say("Clock: <tostring(map_clock)>, Player A: <tostring($attack_roll)>, NPC D: <tostring($defence_roll)>, Player Max: <tostring(%com_maxhit)>");
if (randominc($attack_roll) > randominc($defence_roll)) {
    return(true);
}
return(false);

// returns the correct combat calculated attack damage for weapon
[proc,player_attack_roll_specific](int $damagetype)(int)
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
switch_int ($damagetype) {
    case ^stab: return(%com_stabattack);
    case ^slash: return(%com_slashattack);
    case ^crush: return(%com_crushattack);
    case ^ranged: return(%com_rangeattack);
    case ^magic: return(%com_magicattack);
}
error("combat style of <tostring($damagetype)> not defined in switch for p_npc_melee_roll");

// returns the player's defence roll, depending on style
[proc,player_defence_roll_specific](int $damagetype)(int)
switch_int ($damagetype) {
    case ^stab: return(%com_stabdef);
    case ^slash: return(%com_slashdef);
    case ^crush: return(%com_crushdef);
    case ^ranged: return(%com_rangedef);
    case ^magic: return(%com_magicdef);
}
error("style of <tostring($damagetype)> not defined in switch for player_defence_roll_specific");

[proc,player_combat_stat]
def_int $stabattack;
def_int $slashattack;
def_int $crushattack;
def_int $magicattack;
def_int $rangeattack;
def_int $stabdefence;
def_int $slashdefence;
def_int $crushdefence;
def_int $magicdefence;
def_int $rangedefence;
def_int $strengthbonus;
def_int $prayerbonus;
def_int $attack_prayer;
def_int $defence_prayer;
def_int $strength_prayer;
def_int $rangebonus;

$stabattack,
$slashattack,
$crushattack,
$magicattack,
$rangeattack,
$stabdefence,
$slashdefence,
$crushdefence,
$magicdefence,
$rangedefence,
$strengthbonus,
$prayerbonus = ~equip_get_bonuses;

//adjust prayer drain
%prayer_drain_resistance = add(60, multiply($prayerbonus, 2));

$attack_prayer = ~check_attack_prayer();
$defence_prayer = ~check_defence_prayer();
$strength_prayer = ~check_strength_prayer();

def_int $attack_level = stat(attack);
def_int $strength_level = stat(strength);
def_int $defence_level = stat(defence);
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);

// get style data
def_dbrow $data = ~combat_get_weapon_style_data($weapon);
// might be worth having a %damagetype, and %damagestyle varp
def_int $damagetype = ~combat_get_damagetype($data, %attackstyle);
def_int $damagestyle = ~combat_get_damagestyle($data, %attackstyle);

// style bonuses
def_int $attack_stylebonus;
def_int $strength_stylebonus;
def_int $defence_stylebonus;
def_int $ranged_stylebonus;
$attack_stylebonus,
$strength_stylebonus,
$defence_stylebonus,
$ranged_stylebonus = ~combat_get_damagestyle_bonuses($damagestyle);

// effective levels
def_int $effective_attack_level = ~combat_effective_attack($attack_stylebonus, $attack_level, $attack_prayer);
def_int $effective_strength_level = ~combat_effective_strength($strength_stylebonus, $strength_level, $strength_prayer);
def_int $effective_defence_level = ~combat_effective_defence($defence_stylebonus, $defence_level, $defence_prayer);

// defence rolls and attack rolls
%com_stabattack = ~combat_melee_attack_roll($effective_attack_level, $stabattack);
%com_stabdef = ~combat_melee_defence_roll($effective_defence_level, $stabdefence);
%com_slashattack = ~combat_melee_attack_roll($effective_attack_level, $stabattack);
%com_slashdef = ~combat_melee_defence_roll($effective_defence_level, $stabdefence);
%com_crushattack = ~combat_melee_attack_roll($effective_attack_level, $stabattack);
%com_crushdef = ~combat_melee_defence_roll($effective_defence_level, $stabdefence);
%com_magicattack = 0;
%com_magicdef = 0;
%com_rangeattack = 0;
%com_rangedef = 0;

// maximum hit with all bonuses applied
%com_maxhit = ~combat_melee_maximum_hit($effective_strength_level, $strengthbonus);

// weapon related varps
%com_attackanim, %com_attacksound = ~combat_swing_anim_and_synth($weapon, $damagetype);
%com_defendanim = ~combat_defend_anim($weapon);


[proc,check_attack_prayer]()(int)
if (%prayer_clarity = ^true) return (105);
if (%prayer_improvedreflexes = ^true) return (110);
if (%prayer_incrediblereflexes = ^true) return (115);
else return(100);

[proc,check_defence_prayer]()(int)
if (%prayer_thickskin = ^true) return (105);
if (%prayer_rockskin = ^true) return (110);
if (%prayer_steelskin = ^true) return (115);
else return(100);

[proc,check_strength_prayer]()(int)
if (%prayer_strengthburst = ^true) return (105);
if (%prayer_superhumanstrength = ^true) return (110);
if (%prayer_ultimatestrength = ^true) return (115);
else return(100);

[proc,check_protect_prayer](int $style)(boolean)
if (($style = ^melee | $style = ^stab | $style = ^slash | $style = ^crush) & %prayer_protectfrommelee = ^true) return (true);
if (($style = ^ranged) & %prayer_protectfrommissiles = ^true) return (true);
if (($style = ^magic) & %prayer_protectfrommagic = ^true) return (true);
else return (false);