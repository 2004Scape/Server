[opnpc2,_]
@player_combat_start;

[apnpc2,_]
def_int $distance = npc_range(coord);
if (%attackrange <= 1) {
    p_aprange(%attackrange); // walk then op again
    return;
}
if ($distance > %attackrange) {
    p_aprange(%attackrange);
    return;
}
@player_combat_start;

[label,player_combat_start]
//def_int $distance = npc_range(coord);
//if ($distance > 1 & %attackrange <= 1) {
//    p_opnpc(2);
//    return;
//}
//if ($distance > %attackrange & %attackrange > 1) {
//    p_aprange(%attackrange);
//    return;
//}
//mes(tostring(npc_range(coord)));
//mes(tostring(%attackrange));
//if ($approach = true & (npc_range(coord) > %attackrange | %attackrange <= 1)) {
//    p_aprange(%attackrange);
//    return;
//}
//def_int $distance = npc_range(coord);
//if ((%attackrange > 1 & $distance > %attackrange) | (%attackrange <= 1 & $distance > 1)) {
//    p_aprange(%attackrange);
//    return;
//}
facesquare(npc_coord);
// TODO: Range and mage check
if (%damagetype = ^ranged_style) {
    @player_ranged_attack;
}
@player_melee_attack;

[proc,player_npc_melee_hit_roll](int $damagetype)(boolean)
def_int $attack_roll = ~player_attack_roll_specific($damagetype);
def_int $defence_roll = ~npc_defence_roll_specific($damagetype);
say("Clock: <tostring(map_clock)>, Player A: <tostring($attack_roll)>, NPC D: <tostring($defence_roll)>, Player Max: <tostring(%com_maxhit)>");
if (randominc($attack_roll) > randominc($defence_roll)) {
    return(true);
}
return(false);

// returns the correct combat calculated attack damage for weapon
[proc,player_attack_roll_specific](int $damagetype)(int)
def_obj $weapon = inv_getobj(worn, ^wearpos_rhand);
switch_int ($damagetype) {
    case ^stab_style: return(%com_stabattack);
    case ^slash_style: return(%com_slashattack);
    case ^crush_style: return(%com_crushattack);
    case ^ranged_style: return(%com_rangeattack);
    case ^magic_style: return(%com_magicattack);
}
error("combat style of <tostring($damagetype)> not defined in switch for p_npc_melee_roll");

// returns the player's defence roll, depending on style
[proc,player_defence_roll_specific](int $damagetype)(int)
switch_int ($damagetype) {
    case ^stab_style: return(%com_stabdef);
    case ^slash_style: return(%com_slashdef);
    case ^crush_style: return(%com_crushdef);
    case ^ranged_style: return(%com_rangedef);
    case ^magic_style: return(%com_magicdef);
}
error("style of <tostring($damagetype)> not defined in switch for player_defence_roll_specific");