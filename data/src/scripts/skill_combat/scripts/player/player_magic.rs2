[opnpct,magic:wind_strike] @magic_spell_combat(^wind_strike);
[opnpct,magic:water_strike] @magic_spell_combat(^water_strike);
[opnpct,magic:earth_strike] @magic_spell_combat(^earth_strike);
[opnpct,magic:fire_strike] @magic_spell_combat(^fire_strike);
[opnpct,magic:wind_bolt] @magic_spell_combat(^wind_bolt);
[opnpct,magic:water_bolt] @magic_spell_combat(^water_bolt);
[opnpct,magic:earth_bolt] @magic_spell_combat(^earth_bolt);
[opnpct,magic:fire_bolt] @magic_spell_combat(^fire_bolt);
[opnpct,magic:wind_blast] @magic_spell_combat(^wind_blast);
[opnpct,magic:water_blast] @magic_spell_combat(^water_blast);
[opnpct,magic:earth_blast] @magic_spell_combat(^earth_blast);
[opnpct,magic:fire_blast] @magic_spell_combat(^fire_blast);
[opnpct,magic:wind_wave] @magic_spell_combat(^wind_wave);
[opnpct,magic:water_wave] @magic_spell_combat(^water_wave);
[opnpct,magic:earth_wave] @magic_spell_combat(^earth_wave);
[opnpct,magic:fire_wave] @magic_spell_combat(^fire_wave);
[opnpct,magic:curse] @magic_spell_combat(^curse);
[opnpct,magic:weaken] @magic_spell_combat(^weaken);
[opnpct,magic:confuse] @magic_spell_combat(^confuse);
[opnpct,magic:bind] @magic_spell_combat(^bind);
[opnpct,magic:snare] @magic_spell_combat(^snare);
[opnpct,magic:entangle] @magic_spell_combat(^entangle);
[opnpct,magic:vulnerability] @magic_spell_combat(^vulnerability);
[opnpct,magic:enfeeble] @magic_spell_combat(^enfeeble);
[opnpct,magic:stun] @magic_spell_combat(^stun);

[apnpct,magic:wind_strike] @magic_spell_combat(^wind_strike);
[apnpct,magic:water_strike] @magic_spell_combat(^water_strike);
[apnpct,magic:earth_strike] @magic_spell_combat(^earth_strike);
[apnpct,magic:fire_strike] @magic_spell_combat(^fire_strike);
[apnpct,magic:wind_bolt] @magic_spell_combat(^wind_bolt);
[apnpct,magic:water_bolt] @magic_spell_combat(^water_bolt);
[apnpct,magic:earth_bolt] @magic_spell_combat(^earth_bolt);
[apnpct,magic:fire_bolt] @magic_spell_combat(^fire_bolt);
[apnpct,magic:wind_blast] @magic_spell_combat(^wind_blast);
[apnpct,magic:water_blast] @magic_spell_combat(^water_blast);
[apnpct,magic:earth_blast] @magic_spell_combat(^earth_blast);
[apnpct,magic:fire_blast] @magic_spell_combat(^fire_blast);
[apnpct,magic:wind_wave] @magic_spell_combat(^wind_wave);
[apnpct,magic:water_wave] @magic_spell_combat(^water_wave);
[apnpct,magic:earth_wave] @magic_spell_combat(^earth_wave);
[apnpct,magic:fire_wave] @magic_spell_combat(^fire_wave);
[apnpct,magic:curse] @magic_spell_combat(^curse);
[apnpct,magic:weaken] @magic_spell_combat(^weaken);
[apnpct,magic:confuse] @magic_spell_combat(^confuse);
[apnpct,magic:bind] @magic_spell_combat(^bind);
[apnpct,magic:snare] @magic_spell_combat(^snare);
[apnpct,magic:entangle] @magic_spell_combat(^entangle);
[apnpct,magic:vulnerability] @magic_spell_combat(^vulnerability);
[apnpct,magic:enfeeble] @magic_spell_combat(^enfeeble);
[apnpct,magic:stun] @magic_spell_combat(^stun);


[label,magic_spell_combat](int $spell)
if_close;
if (npc_stat(hitpoints) = 0) {
    p_stopaction;
    return; // this means the npc is not avail to fight i.e dead
}
if (%action_delay > map_clock | %auto_cast_delay > map_clock) {
    %auto_cast_delay = add(map_clock, 1);
    %spell = $spell;
    p_opnpc(2);
    return;
}
%spell = %auto_cast_spell;
// look for spell in db
def_dbrow $spell_data = ~get_spell_data($spell);
// define spell runes
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
// check runes
$rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~check_spell_requirements($spell_data);

// check if npc is attackable with something like 
// if (string_length(nc_op2(npc_type)) < 1) {
//     mes("You can't attack this npc.");
//     p_stopaction;
//     return;
// }

~player_combat_stat;

// for flinching
// npc needs to be 8 ticks out of combat(since it was last able to atk) before it can be flinched
if (add(%npc_action_delay, 8) < map_clock) {
    %npc_action_delay = add(map_clock, add(divide(npc_param(attackrate), 2), 1));
}

~delete_spell_runes($rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3);
~give_spell_xp($spell_data);
// damage npc if spell has max hit.
// give xp for damage
// if auto cast isnt defined, then just assume they're using a spell straight from the spellbook
def_int $damagestyle = %damagestyle;
if ($damagestyle ! ^style_magic_normal | $damagestyle ! ^style_magic_defensive) {
    $damagestyle = ^style_magic_normal;
}
def_int $maxhit = db_getfield($spell_data, magic_spell_table:maxhit, 0);
def_int $damage = 0;
def_int $delay = calc((npc_range(coord) * 10) + 46); // 56, 66, 76
def_int $duration = calc(46 - 2 + (npc_range(coord) * 20)); // 64, 84, 104
// if player DOESNT splash:
if (~player_npc_hit_roll(^magic_style) = true) {
    $damage = randominc($maxhit);
    ~give_combat_experience($damagestyle, $damage);

    // freeze npc if spell has freeze effect
    if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
        mes("NPC frozen");
    }
    // reduce stats if spell has stat reduction effect
    def_stat $stat;
    def_int $constant;
    def_int $percent;
    def_int $i = 0;
    while ($i < db_getfieldcount($spell_data, consume_table:stat_change)) {
        $stat, $constant, $percent = db_getfield($spell_data, consume_table:stat_change, $i);
        // reduce stat
    }
    sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
    sound_synth(npc_param(defend_sound), 0, $delay); // delay 1 client tick for the hit queue
    if ($maxhit ! null) {
        // damage npc
        npc_queue(2, $damage, calc($delay / 30));
        // npc anim
        npc_anim(npc_param(defend_anim), $delay); // delay npc this tick
    }
    spotanim_npc(db_getfield($spell_data, magic_spell_table:spotanim_npc, 0), 124, $delay);
    // npc auto retal
    npc_queue(1, 0, calc($delay / 30));
} else {
    // splash
    sound_synth(db_getfield($spell_data, magic_spell_table:sound_fail, 0), 0, 0);
    spotanim_npc(spotanim_85, 92, $delay);
    // splashing in osrs causes insta auto retal
    npc_queue(1, 0, 0);
}
anim(db_getfield($spell_data, magic_spell_table:anim, 0), 0);
spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_pl, 0), 92, 0);
map_projanim_npc(coord, npc_uid, db_getfield($spell_data, magic_spell_table:spotanim_proj, 0), $delay, $duration, 16, 64, 0);
%action_delay = add(map_clock, 5);

npc_heropoints($damage);
%npc_attacking_uid = uid;
%npc_lastcombat = map_clock;

// only continue fighting if auto cast is turned on
mes(tostring(%attackstyle_magic));
if (testbit(%attackstyle_magic, 0) = true) {
    mes("TRUE");
}
if (testbit(%attackstyle_magic, 0) = true & %attackstyle_magic = 3) {
    %auto_cast_delay = add(map_clock, 1);
    p_opnpc(2);
    return;
}
