// to add a new combat spell:
// create a constant (^spellname) in ../configs/magic/spells.constant
// add it to the spell table in ../configs/magic/magic_combat_spells.dbrow
// create an opnpct and apnpct trigger for it in this script

[opnpct,magic:wind_strike] @magic_spell_combat(^wind_strike);
[opnpct,magic:water_strike] @magic_spell_combat(^water_strike);
[opnpct,magic:earth_strike] @magic_spell_combat(^earth_strike);
[opnpct,magic:fire_strike] @magic_spell_combat(^fire_strike);
[opnpct,magic:wind_bolt] @magic_spell_combat(^wind_bolt);
[opnpct,magic:water_bolt] @magic_spell_combat(^water_bolt);
[opnpct,magic:earth_bolt] @magic_spell_combat(^earth_bolt);
[opnpct,magic:fire_bolt] @magic_spell_combat(^fire_bolt);
[opnpct,magic:wind_blast] @magic_spell_combat(^wind_blast);
[opnpct,magic:water_blast] @magic_spell_combat(^water_blast);
[opnpct,magic:earth_blast] @magic_spell_combat(^earth_blast);
[opnpct,magic:fire_blast] @magic_spell_combat(^fire_blast);
[opnpct,magic:wind_wave] @magic_spell_combat(^wind_wave);
[opnpct,magic:water_wave] @magic_spell_combat(^water_wave);
[opnpct,magic:earth_wave] @magic_spell_combat(^earth_wave);
[opnpct,magic:fire_wave] @magic_spell_combat(^fire_wave);
[opnpct,magic:curse] @magic_spell_combat(^curse);
[opnpct,magic:weaken] @magic_spell_combat(^weaken);
[opnpct,magic:confuse] @magic_spell_combat(^confuse);
[opnpct,magic:bind] @magic_spell_combat(^bind);
[opnpct,magic:snare] @magic_spell_combat(^snare);
[opnpct,magic:entangle] @magic_spell_combat(^entangle);
[opnpct,magic:vulnerability] @magic_spell_combat(^vulnerability);
[opnpct,magic:enfeeble] @magic_spell_combat(^enfeeble);
[opnpct,magic:stun] @magic_spell_combat(^stun);
[opnpct,magic:crumble_undead] @magic_spell_combat(^crumble_undead);

[apnpct,magic:wind_strike] @magic_spell_combat(^wind_strike);
[apnpct,magic:water_strike] @magic_spell_combat(^water_strike);
[apnpct,magic:earth_strike] @magic_spell_combat(^earth_strike);
[apnpct,magic:fire_strike] @magic_spell_combat(^fire_strike);
[apnpct,magic:wind_bolt] @magic_spell_combat(^wind_bolt);
[apnpct,magic:water_bolt] @magic_spell_combat(^water_bolt);
[apnpct,magic:earth_bolt] @magic_spell_combat(^earth_bolt);
[apnpct,magic:fire_bolt] @magic_spell_combat(^fire_bolt);
[apnpct,magic:wind_blast] @magic_spell_combat(^wind_blast);
[apnpct,magic:water_blast] @magic_spell_combat(^water_blast);
[apnpct,magic:earth_blast] @magic_spell_combat(^earth_blast);
[apnpct,magic:fire_blast] @magic_spell_combat(^fire_blast);
[apnpct,magic:wind_wave] @magic_spell_combat(^wind_wave);
[apnpct,magic:water_wave] @magic_spell_combat(^water_wave);
[apnpct,magic:earth_wave] @magic_spell_combat(^earth_wave);
[apnpct,magic:fire_wave] @magic_spell_combat(^fire_wave);
[apnpct,magic:curse] @magic_spell_combat(^curse);
[apnpct,magic:weaken] @magic_spell_combat(^weaken);
[apnpct,magic:confuse] @magic_spell_combat(^confuse);
[apnpct,magic:bind] @magic_spell_combat(^bind);
[apnpct,magic:snare] @magic_spell_combat(^snare);
[apnpct,magic:entangle] @magic_spell_combat(^entangle);
[apnpct,magic:vulnerability] @magic_spell_combat(^vulnerability);
[apnpct,magic:enfeeble] @magic_spell_combat(^enfeeble);
[apnpct,magic:stun] @magic_spell_combat(^stun);
[apnpct,magic:crumble_undead] @magic_spell_combat(^crumble_undead);


[label,magic_spell_combat](int $spell)
if_close;
if (npc_stat(hitpoints) = 0) {
    p_stopaction;
    return; // this means the npc is not avail to fight i.e dead
}
if (%action_delay > map_clock | %autocast_delay > map_clock) {
    %autocast_delay = add(map_clock, 1);
    %spell = $spell;
    //mes("<tostring(map_clock)>: p_opnpc(2)");
    p_opnpc(2);
    return;
}
// reset spell VERY IMPORTANT!
%spell = null;
// look for spell in db
def_dbrow $spell_data = ~get_spell_data($spell);
// define spell runes
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
// check runes
$rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~check_spell_requirements($spell_data);

// check if npc is attackable
if (~npc_is_attackable(npc_type) = false) {
    mes("You can't attack this npc.");
    p_stopaction;
    return;
}

// check if crumble undead & npc is undead
if ($spell = ^crumble_undead & npc_param(undead) = ^false) {
    mes("This spell only affects skeletons, zombies, ghosts and shades.");
    p_stopaction;
    return;
}

// check if npc is already frozen
if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
    if (%npc_stunned > map_clock) {
        mes("Your target is already held by a magical force.");
        p_stopaction;
        return;
    }
    // immune message existed in 2005 https://oldschool.runescape.wiki/w/Update:Magic_and_Wilderness_Updates
    if (calc(%npc_stunned + 5) > map_clock) {
        // osrs wiki trivia says that snare didnt have this? No proof though
        // ive found proof of bind and entangle having this in 2006: https://imgur.com/a/jBb1awE
        mes("Your target is currently immume to that spell.");
        p_stopaction;
        return;
    }
}

// check if npc can be stat reduced
def_npc_stat $npc_stat;
def_int $constant;
def_int $percent;
def_int $i = 0;
while ($i < db_getfieldcount($spell_data, magic_spell_table:npc_stat_change)) {
    $npc_stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:npc_stat_change, $i);
    if (npc_stat($npc_stat) < npc_basestat($npc_stat)) {
        // in osrs, confuse and weaken spell have a different message
        if (($npc_stat = attack & $spell = ^confuse) | ($npc_stat = strength & $spell = ^weaken)) {
            mes("Your foe's <lowercase(~npc_stat_name($npc_stat))> has already been lowered.");
        } else {
            mes("Your foe's <lowercase(~npc_stat_name($npc_stat))> has already been weakened.");
        }
        p_stopaction;
        return;
    }
    $i = add($i, 1);
}

~player_combat_stat;

// for flinching
// npc needs to be 8 ticks out of combat(since it was last able to atk) before it can be flinched
if (add(%npc_action_delay, 8) < map_clock) {
    %npc_action_delay = add(map_clock, add(divide(npc_param(attackrate), 2), 1));
}

~delete_spell_runes($rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3);
~give_spell_xp($spell_data);
// damage npc if spell has max hit.
// give xp for damage
// if auto cast isnt defined, then just assume they're using a spell straight from the spellbook
def_int $damagestyle = %damagestyle;
// in osrs you can only defensive cast with a staff. Not sure if this is the case in 2004
// Might be confusing for players if they just so happen to have their non-magic weapon on defensive, and end up gaining def xp from manual casting.
// so maybe jagex did it this way?
if ($damagestyle = ^style_melee_defensive & oc_category(inv_getobj(worn, ^wearpos_rhand)) = weapon_staff) {
    $damagestyle = ^style_magic_defensive; // casting a spell with defensive on gives mage + def xp
} else {
    $damagestyle = ^style_magic_normal; // if this script is running they have to be using a spell, so assume magic style
}
// spell anim
anim(db_getfield($spell_data, magic_spell_table:anim, 0), 0);
// player spell visual effect
spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_pl, 0), 92, 0);
// shoot spell projectile
%action_delay = add(map_clock, 5);
def_int $duration = ~npc_projectile(coord, npc_uid, db_getfield($spell_data, magic_spell_table:spotanim_proj, 0), 51, 16, -5, 64, 10);


def_int $maxhit = db_getfield($spell_data, magic_spell_table:maxhit, 0);
def_int $damage = 0;
// if player DOESNT splash:
if (~player_npc_hit_roll(^magic_style) = true) {
    // play spell success sound
    sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
    // roll 0-maxhit
    $damage = randominc($maxhit);
    // if maxhit is defined then damage npc
    if ($maxhit ! null) {
        // damage npc
        npc_queue(2, $damage, calc($duration / 30));
        // npc anim
        npc_anim(npc_param(defend_anim), $duration); // delay npc this tick
        // npc sound
        sound_synth(npc_param(defend_sound), 0, $duration); // delay 1 client tick for the hit queue
        ~give_combat_experience($damagestyle, $damage);
    }
    // spell visual
    spotanim_npc(db_getfield($spell_data, magic_spell_table:spotanim_npc, 0), 124, $duration);
    // npc auto retal
    npc_queue(1, 0, calc($duration / 30));

    // other effects:
    // reduce stat
    $i = 0;
    while ($i < db_getfieldcount($spell_data, magic_spell_table:npc_stat_change)) {
        $npc_stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:npc_stat_change, $i);
        if ($constant > 0 & $percent > 0) {
            // if both positive assume statadd
            // nothing ever uses this but i guess if someone wants to add some heal spell or something
            npc_statadd($npc_stat, $constant, $percent);
        } else {
            if ($constant < 0) $constant = multiply($constant, -1);
            if ($percent < 0) $percent = multiply($percent, -1);
            npc_statsub($npc_stat, $constant, $percent);
        }
        $i = add($i, 1);
    }
    // freeze npc if spell has freeze effect
    if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
        %npc_stunned = add(map_clock, db_getfield($spell_data, magic_spell_table:freeze_time, 0));
        npc_setmovecheck(npc_stunned_magic);
    }
} else {
    // splash
    if (db_getfieldcount($spell_data, magic_spell_table:sound_fail) > 0) {
        sound_synth(db_getfield($spell_data, magic_spell_table:sound_fail, 0), 0, 0);
    } else {
        // reduce stat, and freeze spells dont have fail sounds, so i assume they just play their normal sound
        // every time?
        sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
    }
    // splash sound would play here, doesnt exist in this rev?
    // sound_synth(, 0, $duration);
    spotanim_npc(spotanim_85, 92, $duration);
    // splashing in osrs causes insta auto retal
    npc_queue(1, 0, 0);
}

npc_heropoints($damage);
%npc_attacking_uid = uid;
%npc_lastcombat = map_clock;

// debug code
// if(testbit(%attackstyle_magic, 0) = true) {
//     mes("Auto cast turned on");
// }
// if (%attackstyle_magic = 3) {
//     mes("Using autocast spell");
// }
// if (db_getfield($spell_data, magic_spell_table:continue_by_autocast, 0) = true) {
//     mes("Spell can continue by autocast");
// }

// OSRS:
// only continue fighting if auto cast is turned on
// freezes, and stat reductions dont continue ever, even if you have autocast enabled.
// crumble undead continues autocast for some reason
if (testbit(%attackstyle_magic, 0) = true & %attackstyle_magic = 3) {
    // 
    %spell = %autocast_spell;
    if (db_getfield($spell_data, magic_spell_table:continue_by_autocast, 0) = true) {
        %autocast_delay = add(map_clock, 1);
        p_opnpc(2);
        return;
    }
}

[ai_movecheck,npc_stunned_magic]()(boolean)
if (map_clock < %npc_stunned) {
    return(false);
}

return(true);