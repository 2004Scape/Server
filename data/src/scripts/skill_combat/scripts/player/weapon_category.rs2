// in osrs attack styles are strongqueued
// for us its normal queued. Its likely queued because if you're delayed 
// and setting attack style, it wont go through at all. Queueing allows
// for it to go through after delay is over
[if_button,combat_heavysword:heavy0] ~set_attackstyle(0);
[if_button,combat_heavysword:heavy1] ~set_attackstyle(1);
[if_button,combat_heavysword:heavy2] ~set_attackstyle(2);
[if_button,combat_heavysword:heavy3] ~set_attackstyle(3);

[if_button,combat_axe:axe0] ~set_attackstyle(0);
[if_button,combat_axe:axe1] ~set_attackstyle(1);
[if_button,combat_axe:axe2] ~set_attackstyle(2);
[if_button,combat_axe:axe3] ~set_attackstyle(3);

[if_button,combat_blunt:blunt0] ~set_attackstyle(0);
[if_button,combat_blunt:blunt1] ~set_attackstyle(1);
[if_button,combat_blunt:blunt2] ~set_attackstyle(2);

[if_button,combat_bow:bow0] ~set_attackstyle(0);
[if_button,combat_bow:bow1] ~set_attackstyle(1);
[if_button,combat_bow:bow2] ~set_attackstyle(2);

[if_button,combat_crossbow:crossbow0] ~set_attackstyle(0);
[if_button,combat_crossbow:crossbow1] ~set_attackstyle(1);
[if_button,combat_crossbow:crossbow2] ~set_attackstyle(2);

[if_button,combat_pickaxe:pickaxe0] ~set_attackstyle(0);
[if_button,combat_pickaxe:pickaxe1] ~set_attackstyle(1);
[if_button,combat_pickaxe:pickaxe2] ~set_attackstyle(2);
[if_button,combat_pickaxe:pickaxe3] ~set_attackstyle(3);

[if_button,combat_scythe:scythe0] ~set_attackstyle(0);
[if_button,combat_scythe:scythe1] ~set_attackstyle(1);
[if_button,combat_scythe:scythe2] ~set_attackstyle(2);
[if_button,combat_scythe:scythe3] ~set_attackstyle(3);

[if_button,combat_hacksword:hack0] ~set_attackstyle(0);
[if_button,combat_hacksword:hack1] ~set_attackstyle(1);
[if_button,combat_hacksword:hack2] ~set_attackstyle(2);
[if_button,combat_hacksword:hack3] ~set_attackstyle(3);

[if_button,combat_spear:spear0] ~set_attackstyle(0);
[if_button,combat_spear:spear1] ~set_attackstyle(1);
[if_button,combat_spear:spear2] ~set_attackstyle(2);
[if_button,combat_spear:spear3] ~set_attackstyle(3);

[if_button,combat_spiked:spiked0] ~set_attackstyle(0);
[if_button,combat_spiked:spiked1] ~set_attackstyle(1);
[if_button,combat_spiked:spiked2] ~set_attackstyle(2);
[if_button,combat_spiked:spiked3] ~set_attackstyle(3);

[if_button,combat_stabsword:stab0] ~set_attackstyle(0);
[if_button,combat_stabsword:stab1] ~set_attackstyle(1);
[if_button,combat_stabsword:stab2] ~set_attackstyle(2);
[if_button,combat_stabsword:stab3] ~set_attackstyle(3);

[if_button,combat_thrown:thrown0] ~set_attackstyle(0);
[if_button,combat_thrown:thrown1] ~set_attackstyle(1);
[if_button,combat_thrown:thrown2] ~set_attackstyle(2);

[if_button,combat_unarmed:unarmed0] ~set_attackstyle(0);
[if_button,combat_unarmed:unarmed1] ~set_attackstyle(1);
[if_button,combat_unarmed:unarmed2] ~set_attackstyle(2);

[if_button,combat_staff_2:staff2a] ~set_attackstyle(0);
[if_button,combat_staff_2:staff2b] ~set_attackstyle(1);
[if_button,combat_staff_2:staff2c] ~set_attackstyle(2);

[if_button,combat_staff_2:auto_toggle]
if_close;
if (p_finduid(uid) = true) {
    %attackstyle_magic = togglebit(%attackstyle_magic, 0);
    return;
}
queue(set_attack_style_magic, 0);


[proc,set_attackstyle](int $style)
if_close;
if (p_finduid(uid) = true) {
    %attackstyle = $style;
    return;
}
queue(set_attackstyle, 0, $style);

[queue,set_attackstyle](int $style)
%attackstyle = $style;

[queue,set_attack_style_magic]
%attackstyle_magic = togglebit(%attackstyle_magic, 0);

// updates the attack style tab depending on the
// weapon currently equipped or not by the player
[proc,update_weapon_category](obj $previous)
// dont remove attack style if the equipted item is not a weapon
if ($previous ! null & oc_wearpos($previous) ! ^wearpos_rhand) {
    return;
}
def_obj $obj = inv_getobj(worn, ^wearpos_rhand);
if ($previous = null | $obj = null | oc_category($previous) ! oc_category($obj)) {
    // TODO somehow confirm this
    // osrs keeps track of selected per category
    %attackstyle_magic = 0;
    %autocast_spell = null;
}
if (~inzone_coord_pair_table(gnomeball_zones, coord) = true) {
    if_settab(gnomeball, 0);
    return;
}
if ($obj = null | (map_members = false & oc_members($obj) = true)) {
    ~weapon_category_tab_attack_unarmed($obj);
    return;
}
switch_category (oc_category($obj)) {
    // melee
    case weapon_2h_sword: ~weapon_category_tab_attack(combat_heavysword:preview, combat_heavysword:name, combat_heavysword, $obj);
    case weapon_axe: ~weapon_category_tab_attack(combat_axe:preview, combat_axe:name, combat_axe, $obj);
    case weapon_blunt, category_15, flowers: ~weapon_category_tab_attack(combat_blunt:preview, combat_blunt:name, combat_blunt, $obj);
    case weapon_pickaxe: ~weapon_category_tab_attack(combat_pickaxe:preview, combat_pickaxe:name, combat_pickaxe, $obj);
    case weapon_scythe: ~weapon_category_tab_attack(combat_scythe:preview, combat_scythe:name, combat_scythe, $obj);
    case weapon_slash: ~weapon_category_tab_attack(combat_hacksword:preview, combat_hacksword:name, combat_hacksword, $obj);
    case weapon_spear: ~weapon_category_tab_attack(combat_spear:preview, combat_spear:name, combat_spear, $obj);
    case weapon_spiked: ~weapon_category_tab_attack(combat_spiked:preview, combat_spiked:name, combat_spiked, $obj);
    case weapon_stab: ~weapon_category_tab_attack(combat_stabsword:preview, combat_stabsword:name, combat_stabsword, $obj);
    // ranged
    case weapon_bow: ~weapon_category_tab_attack(combat_bow:preview, combat_bow:name, combat_bow, $obj);
    case weapon_crossbow: ~weapon_category_tab_attack(combat_crossbow:preview, combat_crossbow:name, combat_crossbow, $obj);
    case weapon_thrown, weapon_javelin: ~weapon_category_tab_attack(combat_thrown:preview, combat_thrown:name, combat_thrown, $obj);
    // magic
    case weapon_staff: ~weapon_category_tab_attack(combat_staff_2:preview, combat_staff_2:name, combat_staff_2, $obj);
    // unarmed everything else
    case default: ~weapon_category_tab_attack_unarmed($obj);
}

[proc,weapon_category_tab_attack](component $component1, component $component2, interface $interface, obj $obj)
if_setobject($component1, $obj, 200);
if_settext($component2, "<oc_name($obj)>");
if_settab($interface, 0);

// sends the unarmed interface tab
[proc,weapon_category_tab_attack_unarmed](obj $obj)
// yes this is actually "unarmed" between beta and 2005-ish.
if ($obj = null | (map_members = false & oc_members($obj) = true)) {
    if_settext(combat_unarmed:name, "unarmed");
} else {
    if_settext(combat_unarmed:name, "<oc_name($obj)>"); // gnomeball uses this
}
if_settab(combat_unarmed, 0);

[proc,.update_weapon_category](obj $previous)
// dont remove attack style if the equipted item is not a weapon
if ($previous ! null & oc_wearpos($previous) ! ^wearpos_rhand) {
    return;
}
def_obj $obj = .inv_getobj(worn, ^wearpos_rhand);
if ($previous = null | $obj = null | oc_category($previous) ! oc_category($obj)) {
    // TODO somehow confirm this
    // osrs keeps track of selected per category
    .%attackstyle_magic = 0;
    .%autocast_spell = null;
}
if (~.inzone_coord_pair_table(gnomeball_zones, .coord) = true) {
    .if_settab(gnomeball, 0);
    return;
}
if ($obj = null | (map_members = false & oc_members($obj) = true)) {
    ~.weapon_category_tab_attack_unarmed($obj);
    return;
}
switch_category (oc_category($obj)) {
    // melee
    case weapon_2h_sword: ~.weapon_category_tab_attack(combat_heavysword:preview, combat_heavysword:name, combat_heavysword, $obj);
    case weapon_axe: ~.weapon_category_tab_attack(combat_axe:preview, combat_axe:name, combat_axe, $obj);
    case weapon_blunt, category_15, flowers: ~.weapon_category_tab_attack(combat_blunt:preview, combat_blunt:name, combat_blunt, $obj);
    case weapon_pickaxe: ~.weapon_category_tab_attack(combat_pickaxe:preview, combat_pickaxe:name, combat_pickaxe, $obj);
    case weapon_scythe: ~.weapon_category_tab_attack(combat_scythe:preview, combat_scythe:name, combat_scythe, $obj);
    case weapon_slash: ~.weapon_category_tab_attack(combat_hacksword:preview, combat_hacksword:name, combat_hacksword, $obj);
    case weapon_spear: ~.weapon_category_tab_attack(combat_spear:preview, combat_spear:name, combat_spear, $obj);
    case weapon_spiked: ~.weapon_category_tab_attack(combat_spiked:preview, combat_spiked:name, combat_spiked, $obj);
    case weapon_stab: ~.weapon_category_tab_attack(combat_stabsword:preview, combat_stabsword:name, combat_stabsword, $obj);
    // ranged
    case weapon_bow: ~.weapon_category_tab_attack(combat_bow:preview, combat_bow:name, combat_bow, $obj);
    case weapon_crossbow: ~.weapon_category_tab_attack(combat_crossbow:preview, combat_crossbow:name, combat_crossbow, $obj);
    case weapon_thrown, weapon_javelin: ~.weapon_category_tab_attack(combat_thrown:preview, combat_thrown:name, combat_thrown, $obj);
    // magic
    case weapon_staff: ~.weapon_category_tab_attack(combat_staff_2:preview, combat_staff_2:name, combat_staff_2, $obj);
    // unarmed everything else
    case default: ~.weapon_category_tab_attack_unarmed($obj);
}

[proc,.weapon_category_tab_attack](component $component1, component $component2, interface $interface, obj $obj)
.if_setobject($component1, $obj, 200);
.if_settext($component2, "<oc_name($obj)>");
.if_settab($interface, 0);

// sends the unarmed interface tab
[proc,.weapon_category_tab_attack_unarmed](obj $obj)
// yes this is actually "unarmed" between beta and 2005-ish.
if ($obj = null) {
    .if_settext(combat_unarmed:name, "unarmed");
} else {
    .if_settext(combat_unarmed:name, "<oc_name($obj)>"); // gnomeball uses this
}
.if_settab(combat_unarmed, 0);