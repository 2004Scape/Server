// returns the calculated max hit for this npc
[proc,npc_melee_maxhit]()(int)
def_int $strengthbonus = npc_param(strengthbonus);
//npcs are essentially always on controlled
def_int $effective_strength = ~combat_effective_stat(1, npc_stat(strength), 100); // no prayerbonus
def_int $melee_strength = ~combat_stat($effective_strength, $strengthbonus);
return(~combat_maxhit($melee_strength));

// returns the npc attack roll for this npc
// npcs only have one attackbonus.
[proc,npc_melee_attack_roll]()(int)
if (~check_protect_prayer(^melee_style) = true) {
    return(0);
}
def_int $attackbonus = npc_param(attackbonus);
def_int $effective_attack = ~combat_effective_stat(1, npc_stat(attack), 100); // no prayerbonus
//npcs are essentially always on controlled
return(~combat_stat($effective_attack, $attackbonus));

// perform a basic melee attack from the npc to the player.
[proc,npc_meleeattack]
def_int $attack_roll = ~npc_melee_attack_roll;
def_int $defence_roll = ~player_defence_roll_specific(npc_param(damagetype));
def_int $maxhit = ~npc_melee_maxhit;

// npc_say("Clock: <tostring(map_clock)>, NPC A: <tostring($attack_roll)>, Player D: <tostring($defence_roll)>, NPC Max: <tostring($maxhit)>");

if (randominc($attack_roll) > randominc($defence_roll)) {
    ~playerhit_n_melee(randominc($maxhit), npc_param(attackrate));
    return;
}
~playerhit_n_melee(0, npc_param(attackrate));

[proc,playerhit_n_melee](int $damage, int $delay)
//~damage_self($damage);
if_close; // close the player interface when taking a hit.
// not sure if this is correct
if (getqueue(player_death) < 1) {
    queue(damage_player, 0, $damage);
    if (npc_param(poison_severity) > 0 & $damage > 0) {
        queue(poison_player, 0, npc_param(poison_severity));
    }
}
queue(playerhit_n_retaliate, 0, npc_uid); // this should be a queue* command
%npc_action_delay = add(map_clock, $delay);
~npc_set_attack_vars;