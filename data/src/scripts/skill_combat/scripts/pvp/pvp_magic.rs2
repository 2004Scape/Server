[opplayert,magic:wind_strike] ~pvp_default_spell(^wind_strike);
[opplayert,magic:water_strike] ~pvp_default_spell(^water_strike);
[opplayert,magic:earth_strike] ~pvp_default_spell(^earth_strike);
[opplayert,magic:fire_strike] ~pvp_default_spell(^fire_strike);
[opplayert,magic:wind_bolt] ~pvp_default_spell(^wind_bolt);
[opplayert,magic:water_bolt] ~pvp_default_spell(^water_bolt);
[opplayert,magic:earth_bolt] ~pvp_default_spell(^earth_bolt);
[opplayert,magic:fire_bolt] ~pvp_default_spell(^fire_bolt);
[opplayert,magic:wind_blast] ~pvp_default_spell(^wind_blast);
[opplayert,magic:water_blast] ~pvp_default_spell(^water_blast);
[opplayert,magic:earth_blast] ~pvp_default_spell(^earth_blast);
[opplayert,magic:fire_blast] ~pvp_default_spell(^fire_blast);
[opplayert,magic:wind_wave] ~pvp_default_spell(^wind_wave);
[opplayert,magic:water_wave] ~pvp_default_spell(^water_wave);
[opplayert,magic:earth_wave] ~pvp_default_spell(^earth_wave);
[opplayert,magic:fire_wave] ~pvp_default_spell(^fire_wave);
[opplayert,magic:curse] ~pvp_default_spell(^curse);
[opplayert,magic:weaken] ~pvp_default_spell(^weaken);
[opplayert,magic:confuse] ~pvp_default_spell(^confuse);
[opplayert,magic:bind] ~pvp_default_spell(^bind);
[opplayert,magic:snare] ~pvp_default_spell(^snare);
[opplayert,magic:entangle] ~pvp_default_spell(^entangle);
[opplayert,magic:vulnerability] ~pvp_default_spell(^vulnerability);
[opplayert,magic:enfeeble] ~pvp_default_spell(^enfeeble);
[opplayert,magic:stun] ~pvp_default_spell(^stun);
[opplayert,magic:crumble_undead] ~pvp_default_spell(^crumble_undead);

[applayert,magic:wind_strike] ~pvp_default_spell(^wind_strike);
[applayert,magic:water_strike] ~pvp_default_spell(^water_strike);
[applayert,magic:earth_strike] ~pvp_default_spell(^earth_strike);
[applayert,magic:fire_strike] ~pvp_default_spell(^fire_strike);
[applayert,magic:wind_bolt] ~pvp_default_spell(^wind_bolt);
[applayert,magic:water_bolt] ~pvp_default_spell(^water_bolt);
[applayert,magic:earth_bolt] ~pvp_default_spell(^earth_bolt);
[applayert,magic:fire_bolt] ~pvp_default_spell(^fire_bolt);
[applayert,magic:wind_blast] ~pvp_default_spell(^wind_blast);
[applayert,magic:water_blast] ~pvp_default_spell(^water_blast);
[applayert,magic:earth_blast] ~pvp_default_spell(^earth_blast);
[applayert,magic:fire_blast] ~pvp_default_spell(^fire_blast);
[applayert,magic:wind_wave] ~pvp_default_spell(^wind_wave);
[applayert,magic:water_wave] ~pvp_default_spell(^water_wave);
[applayert,magic:earth_wave] ~pvp_default_spell(^earth_wave);
[applayert,magic:fire_wave] ~pvp_default_spell(^fire_wave);
[applayert,magic:curse] ~pvp_default_spell(^curse);
[applayert,magic:weaken] ~pvp_default_spell(^weaken);
[applayert,magic:confuse] ~pvp_default_spell(^confuse);
[applayert,magic:bind] ~pvp_default_spell(^bind);
[applayert,magic:snare] ~pvp_default_spell(^snare);
[applayert,magic:entangle] ~pvp_default_spell(^entangle);
[applayert,magic:vulnerability] ~pvp_default_spell(^vulnerability);
[applayert,magic:enfeeble] ~pvp_default_spell(^enfeeble);
[applayert,magic:stun] ~pvp_default_spell(^stun);
[applayert,magic:crumble_undead] ~pvp_default_spell(^crumble_undead);

[proc,pvp_default_spell](int $spell)
def_dbrow $spell_data = ~get_spell_data($spell);
if (~pvp_combat_spell_checks($spell_data) = false) {
    return;
}
if (~pvp_freeze_allowed($spell_data) = false) {
    return;
}
if (~pvp_debuff_allowed($spell_data) = false) {
    return;
}

def_int $duration = ~pvp_spell_cast($spell_data);

// spell hit
if (~pvp_hit_roll(^magic_style) = true) {
    ~pvp_spell_success($spell_data, ~magic_spell_maxhit($spell_data), $duration);
    ~pvp_stat_change_effect($spell_data);
    ~pvp_freeze_effect($spell_data);
} else {
    ~pvp_spell_fail($spell_data, $duration);
}

[proc,pvp_combat_spell_checks](dbrow $spell_data)(boolean)
if_close;
p_stopaction;
if (.stat(hitpoints) = 0) {
    return(false);
}
if (map_clock < %action_delay | getwalktrigger() = stunned) {
    p_opplayert(db_getfield($spell_data, magic_spell_table:spellcom, 0));
    return(false);
}
if (~check_spell_requirements($spell_data) = false) {
    return(false);
}
// these go after rune check
if (~in_duel_arena(coord) = true) {
    if (~duel_arena_checks = false) {
        return(false);
    }
    if (~duel_arena_magic_check = false) {
        return(false);
    }
} else {
    if (~pvp_level_check = false) {
        return(false);
    }
    if (~pvp_in_combat_check = false) {
        return(false);
    }
}
return(true);


[proc,pvp_freeze_allowed](dbrow $spell_data)(boolean)
// check if player is already frozen
if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
    if (.%stunned > map_clock) {
        mes("Your target is already held by a magical force.");
        return(false);
    }
    // immune message existed in 2005 https://oldschool.runescape.wiki/w/Update:Magic_and_Wilderness_Updates
    if (calc(.%stunned + 5) > map_clock) {
        // osrs wiki trivia says that snare didnt have this? No proof though
        // ive found proof of bind and entangle having this in 2006: https://imgur.com/a/jBb1awE
        mes("Your target is currently immume to that spell.");
        return(false);
    }
}
return(true);


[proc,pvp_debuff_allowed](dbrow $spell_data)(boolean)
// check if player can be stat reduced
def_stat $stat;
def_int $constant;
def_int $percent;
def_int $i = 0;
def_int $spell = db_getfield($spell_data, magic_spell_table:spell, 0);
while ($i < db_getfieldcount($spell_data, magic_spell_table:stat_change)) {
    $stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:stat_change, $i);
    if (.stat($stat) < .stat_base($stat)) {
        // in osrs, confuse and weaken spell have a different message
        if (($stat = attack & $spell = ^confuse)) {
            // yes theres an extra period. only for pvp
            mes("Your foe's <lowercase(~stat_name($stat))> has already been lowered..");
        } else if ($stat = strength & $spell = ^weaken) {
            mes("Your foe's <lowercase(~stat_name($stat))> has already been lowered.");
        } else {
            mes("Your foe's <lowercase(~stat_name($stat))> has already been weakened.");
        }
        p_stopaction;
        return(false);
    }
    $i = add($i, 1);
}
return(true);

[proc,pvp_stat_change_effect](dbrow $spell_data)
def_stat $stat;
def_int $constant;
def_int $percent;
def_int $i = 0;
while ($i < db_getfieldcount($spell_data, magic_spell_table:stat_change)) {
    $stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:stat_change, $i);
    if (.stat($stat) >= .stat_base($stat)) {
        if ($constant > 0 & $percent > 0) {
            // if both positive assume statadd
            // nothing ever uses this but i guess if someone wants to add some heal spell or something
            .stat_add($stat, $constant, $percent);
        } else {
            if ($constant < 0) $constant = multiply($constant, -1);
            if ($percent < 0) $percent = multiply($percent, -1);
            .mes("You feel weakened.");
            .stat_sub($stat, $constant, $percent);
        }
    }
    $i = add($i, 1);
}

[proc,pvp_freeze_effect](dbrow $spell_data)
def_int $freeze_time = db_getfield($spell_data, magic_spell_table:freeze_time, 0);
if ($freeze_time > 0) {
    if (~.check_protect_prayer(^magic_style) = true) {
        $freeze_time = divide($freeze_time, 2); // 50% reduction https://oldschool.runescape.wiki/w/Update:RS2_bugfixes_-_part_4
    }
    .queue(freeze_player, 0, $freeze_time);
}

[proc,pvp_spell_success](dbrow $spell_data, int $maxhit, int $duration)
def_synth $sound = db_getfield($spell_data, magic_spell_table:sound_success, 0);
sound_synth($sound, 0, 0);
.sound_synth($sound, 0, 0);

if (~.check_protect_prayer(^magic_style) = true) {
    $maxhit = scale(6, 10, $maxhit); // reduction of 40%
}
def_int $damage = randominc($maxhit); // tick eating existed! https://oldschool.runescape.wiki/w/Update:The_Wintertodt
$damage = min($damage, .stat(hitpoints));
if ($maxhit ! null) {
    .queue(pvp_damage, calc($duration / 30 + 1), $damage); // delayed an extra tick in osrs
    // didnt have a flinch anim until sept 20 2006: https://oldschool.runescape.wiki/w/Update:Slug_Menace
    ~give_combat_experience_pvp(%damagestyle, $damage, ~pvp_xp_multiplier(~.player_combat_level));
}

both_heropoints($damage);

.spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_target, 0), $duration);
.queue(pvp_retaliate, calc($duration / 30 + 1), uid);

[proc,pvp_spell_fail](dbrow $spell_data, int $duration)
// splash
def_synth $sound;
if (db_getfieldcount($spell_data, magic_spell_table:sound_fail) > 0) {
    $sound = db_getfield($spell_data, magic_spell_table:sound_fail, 0);
} else {
    // reduce stat, and freeze spells dont have fail sounds, so i assume they just play their normal sound
    // every time?
    $sound = db_getfield($spell_data, magic_spell_table:sound_success, 0);
}

sound_synth($sound, 0, 0);
.sound_synth($sound, 0, 0);
// no splash sound?
.spotanim_pl(failedspell_impact, 92, $duration);
.queue(pvp_retaliate, 0, uid);

[proc,pvp_spell_cast](dbrow $spell_data)(int)
~set_pk_vars;
.if_close;
~player_combat_stat;
~.player_combat_stat;
~delete_spell_runes($spell_data);
~give_spell_xp($spell_data);

if (%damagestyle = ^style_melee_defensive & oc_category(inv_getobj(worn, ^wearpos_rhand)) = weapon_staff) {
    %damagestyle = ^style_magic_defensive; // casting a spell with defensive on gives mage + def xp
} else {
    %damagestyle = ^style_magic_normal; // if this script is running they have to be using a spell, so assume magic style
}

anim(db_getfield($spell_data, magic_spell_table:anim, 0), 0);
spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_origin, 0), 92, 0);
%action_delay = add(map_clock, 5);
def_int $duration = 0;
if (db_getfieldcount($spell_data, magic_spell_table:spotanim_proj) > 0) {
    $duration = ~player_projectile(coord, .coord, .uid, db_getfield($spell_data, magic_spell_table:spotanim_proj, 0), 51, 16, -5, 64, 10);
}

// continue by autocast
if (testbit(%attackstyle_magic, 0) = true & %attackstyle_magic = 3 & %autocast_spell > 0 & db_getfield($spell_data, magic_spell_table:continue_by_autocast, 0) = true) {
    p_opplayert(db_getfield(~get_spell_data(%autocast_spell), magic_spell_table:spellcom, 0));
}
return($duration);

[proc,magic_spell_maxhit](dbrow $spell_data)(int)
def_int $maxhit = db_getfield($spell_data, magic_spell_table:maxhit, 0);
return($maxhit);
