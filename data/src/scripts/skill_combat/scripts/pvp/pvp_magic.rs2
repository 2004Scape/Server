[opplayert,magic:wind_strike] @pvp_magic_spell_attack(^wind_strike);
[opplayert,magic:water_strike] @pvp_magic_spell_attack(^water_strike);
[opplayert,magic:earth_strike] @pvp_magic_spell_attack(^earth_strike);
[opplayert,magic:fire_strike] @pvp_magic_spell_attack(^fire_strike);
[opplayert,magic:wind_bolt] @pvp_magic_spell_attack(^wind_bolt);
[opplayert,magic:water_bolt] @pvp_magic_spell_attack(^water_bolt);
[opplayert,magic:earth_bolt] @pvp_magic_spell_attack(^earth_bolt);
[opplayert,magic:fire_bolt] @pvp_magic_spell_attack(^fire_bolt);
[opplayert,magic:wind_blast] @pvp_magic_spell_attack(^wind_blast);
[opplayert,magic:water_blast] @pvp_magic_spell_attack(^water_blast);
[opplayert,magic:earth_blast] @pvp_magic_spell_attack(^earth_blast);
[opplayert,magic:fire_blast] @pvp_magic_spell_attack(^fire_blast);
[opplayert,magic:wind_wave] @pvp_magic_spell_attack(^wind_wave);
[opplayert,magic:water_wave] @pvp_magic_spell_attack(^water_wave);
[opplayert,magic:earth_wave] @pvp_magic_spell_attack(^earth_wave);
[opplayert,magic:fire_wave] @pvp_magic_spell_attack(^fire_wave);
[opplayert,magic:curse] @pvp_magic_spell_attack(^curse);
[opplayert,magic:weaken] @pvp_magic_spell_attack(^weaken);
[opplayert,magic:confuse] @pvp_magic_spell_attack(^confuse);
[opplayert,magic:bind] @pvp_magic_spell_attack(^bind);
[opplayert,magic:snare] @pvp_magic_spell_attack(^snare);
[opplayert,magic:entangle] @pvp_magic_spell_attack(^entangle);
[opplayert,magic:vulnerability] @pvp_magic_spell_attack(^vulnerability);
[opplayert,magic:enfeeble] @pvp_magic_spell_attack(^enfeeble);
[opplayert,magic:stun] @pvp_magic_spell_attack(^stun);
[opplayert,magic:crumble_undead] @pvp_magic_spell_attack(^crumble_undead);

// [applayert,magic:wind_strike] @pvp_magic_spell_attack(^wind_strike);
// [applayert,magic:water_strike] @pvp_magic_spell_attack(^water_strike);
// [applayert,magic:earth_strike] @pvp_magic_spell_attack(^earth_strike);
// [applayert,magic:fire_strike] @pvp_magic_spell_attack(^fire_strike);
// [applayert,magic:wind_bolt] @pvp_magic_spell_attack(^wind_bolt);
// [applayert,magic:water_bolt] @pvp_magic_spell_attack(^water_bolt);
// [applayert,magic:earth_bolt] @pvp_magic_spell_attack(^earth_bolt);
// [applayert,magic:fire_bolt] @pvp_magic_spell_attack(^fire_bolt);
// [applayert,magic:wind_blast] @pvp_magic_spell_attack(^wind_blast);
// [applayert,magic:water_blast] @pvp_magic_spell_attack(^water_blast);
// [applayert,magic:earth_blast] @pvp_magic_spell_attack(^earth_blast);
// [applayert,magic:fire_blast] @pvp_magic_spell_attack(^fire_blast);
// [applayert,magic:wind_wave] @pvp_magic_spell_attack(^wind_wave);
// [applayert,magic:water_wave] @pvp_magic_spell_attack(^water_wave);
// [applayert,magic:earth_wave] @pvp_magic_spell_attack(^earth_wave);
// [applayert,magic:fire_wave] @pvp_magic_spell_attack(^fire_wave);
// [applayert,magic:curse] @pvp_magic_spell_attack(^curse);
// [applayert,magic:weaken] @pvp_magic_spell_attack(^weaken);
// [applayert,magic:confuse] @pvp_magic_spell_attack(^confuse);
// [applayert,magic:bind] @pvp_magic_spell_attack(^bind);
// [applayert,magic:snare] @pvp_magic_spell_attack(^snare);
// [applayert,magic:entangle] @pvp_magic_spell_attack(^entangle);
// [applayert,magic:vulnerability] @pvp_magic_spell_attack(^vulnerability);
// [applayert,magic:enfeeble] @pvp_magic_spell_attack(^enfeeble);
// [applayert,magic:stun] @pvp_magic_spell_attack(^stun);
// [applayert,magic:crumble_undead] @pvp_magic_spell_attack(^crumble_undead);

[label,pvp_magic_spell_attack](int $spell)
p_stopaction;
if_close;
if (.stat(hitpoints) = 0) {
    p_stopaction;
    return;
}

// look for spell in db
def_dbrow $spell_data = ~get_spell_data($spell);

// mes("<tostring(map_clock)>, <tostring(%action_delay)>");
if (map_clock < %action_delay) {
    //p_opplayert(db_getfield($spell_data, magic_spell_table:spellcom, 0));
    return;
}

// define spell runes
def_namedobj $rune1;
def_int $rune_count1;
def_namedobj $rune2;
def_int $rune_count2;
def_namedobj $rune3;
def_int $rune_count3;
def_boolean $passes;
// check runes
$passes, $rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3 = ~check_spell_requirements($spell_data);
// mes("<tostring(map_clock)>: Cast");
if ($passes = false) {
    return;
}
// these go after rune check
if (~pvp_level_check = false) {
    return;
}
if (~pvp_in_combat_check = false) {
    return;
}

// check if player is already frozen
if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
    if (.%stunned > map_clock) {
        mes("Your target is already held by a magical force.");
        p_stopaction;
        return;
    }
    // immune message existed in 2005 https://oldschool.runescape.wiki/w/Update:Magic_and_Wilderness_Updates
    if (calc(.%stunned + 5) > map_clock) {
        // osrs wiki trivia says that snare didnt have this? No proof though
        // ive found proof of bind and entangle having this in 2006: https://imgur.com/a/jBb1awE
        mes("Your target is currently immume to that spell.");
        p_stopaction;
        return;
    }
}

// check if player can be stat reduced
def_stat $stat;
def_int $constant;
def_int $percent;
def_int $i = 0;
while ($i < db_getfieldcount($spell_data, magic_spell_table:stat_change)) {
    $stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:stat_change, $i);
    if (.stat($stat) < .stat_base($stat)) {
        // in osrs, confuse and weaken spell have a different message
        if (($stat = attack & $spell = ^confuse)) {
            // yes theres an extra period. only for pvp
            mes("Your foe's <lowercase(~stat_name($stat))> has already been lowered..");
        } else if ($stat = strength & $spell = ^weaken) {
            mes("Your foe's <lowercase(~stat_name($stat))> has already been lowered.");
        } else {
            mes("Your foe's <lowercase(~stat_name($stat))> has already been weakened.");
        }
        p_stopaction;
        return;
    }
    $i = add($i, 1);
}

.if_close;

~player_combat_stat;

~delete_spell_runes($rune1, $rune_count1, $rune2, $rune_count2, $rune3, $rune_count3);
~give_spell_xp($spell_data);

if (%damagestyle = ^style_melee_defensive & oc_category(inv_getobj(worn, ^wearpos_rhand)) = weapon_staff) {
    %damagestyle = ^style_magic_defensive; // casting a spell with defensive on gives mage + def xp
} else {
    %damagestyle = ^style_magic_normal; // if this script is running they have to be using a spell, so assume magic style
}

// spell anim
anim(db_getfield($spell_data, magic_spell_table:anim, 0), 0);
// player spell visual effect
spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_origin, 0), 92, 0);
// shoot projectile
%action_delay = add(map_clock, 5);
def_int $duration = 0;
if (db_getfieldcount($spell_data, magic_spell_table:spotanim_proj) > 0) {
    $duration = ~player_projectile(coord, .coord, .uid, db_getfield($spell_data, magic_spell_table:spotanim_proj, 0), 51, 16, -5, 64, 10);
}

def_int $maxhit = db_getfield($spell_data, magic_spell_table:maxhit, 0);
def_int $damage = 0;
// if spell is successful
if (~pvp_hit_roll(^magic_style) = true) {
    sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
    .sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);

    $damage = randominc($maxhit);
    if ($maxhit ! null) {
        //.queue(pvp_damage_player, $damage, calc($duration / 30 + 1)); // delayed an extra tick in osrs
        if (.p_finduid(.uid) = true) { // todo: queue this
            ~.pvp_damage_player($damage);
        }
        // didnt have a flinch anim until sept 20 2006: https://oldschool.runescape.wiki/w/Update:Slug_Menace
        
        ~give_combat_experience_pvp(%damagestyle, $damage, ~pvp_xp_multiplier(~.player_combat_level));
    }
    // spell visual
    .spotanim_pl(db_getfield($spell_data, magic_spell_table:spotanim_target, 0), 124, $duration);
    // auto retal
    if (.p_finduid(.uid) = true) { // todo: queue this
        ~.pvp_retaliate(uid);
    }
    

    // apply spell effects

    // reduce stat effect:
    $i = 0;
    while ($i < db_getfieldcount($spell_data, magic_spell_table:stat_change)) {
        $stat, $constant, $percent = db_getfield($spell_data, magic_spell_table:stat_change, $i);
        if ($constant > 0 & $percent > 0) {
            // if both positive assume statadd
            // nothing ever uses this but i guess if someone wants to add some heal spell or something
            //mes("Increased stat: <~stat_name($stat)>, <tostring($constant)>, <tostring($percent)>");
            .stat_add($stat, $constant, $percent);
        } else {
            if ($constant < 0) $constant = multiply($constant, -1);
            if ($percent < 0) $percent = multiply($percent, -1);
            //mes("Reduced stat: <~stat_name($stat)>, <tostring($constant)>, <tostring($percent)>");
            .stat_sub($stat, $constant, $percent);
        }
        $i = add($i, 1);
    }
    // freeze player if spell has freeze effect
    if (db_getfield($spell_data, magic_spell_table:freeze_time, 0) > 0) {
        //.queue(.freeze_player, 0, db_getfield($spell_data, magic_spell_table:freeze_time, 0));
        if (.p_finduid(.uid) = true) { // todo: queue this
            .%stunned = calc(map_clock + $duration + 1);
            //.setmovecheck(frozen);
        }
    }
} else {
    // splash
    if (db_getfieldcount($spell_data, magic_spell_table:sound_fail) > 0) {
        sound_synth(db_getfield($spell_data, magic_spell_table:sound_fail, 0), 0, 0);
        .sound_synth(db_getfield($spell_data, magic_spell_table:sound_fail, 0), 0, 0);
    } else {
        // reduce stat, and freeze spells dont have fail sounds, so i assume they just play their normal sound
        // every time?
        sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
        .sound_synth(db_getfield($spell_data, magic_spell_table:sound_success, 0), 0, 0);
    }
    // no splash sound?
    .spotanim_pl(spotanim_85, 92, $duration);

    if (.p_finduid(.uid) = true) { // todo: queue this
        ~.pvp_retaliate(uid);
    }
}

// todo: heropoints

if (~deserves_pk_skull = true) {
    ~pk_skull(3000); // 3000 ticks, or 30 minutes
}

.%lastcombat_pvp = map_clock;
.%defending_player_uid = uid;

if (testbit(%attackstyle_magic, 0) = true & %attackstyle_magic = 3 & %autocast_spell > 0 & db_getfield($spell_data, magic_spell_table:continue_by_autocast, 0) = true) {
    //p_opplayert(db_getfield(~get_spell_data(%autocast_spell), magic_spell_table:spellcom, 0));
    return;
}