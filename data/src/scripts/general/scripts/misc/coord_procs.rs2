[proc,coord_lineofwalk_radius](coord $coord, int $radius)(coord)
def_int $x = $radius;
def_int $z = $radius;
def_int $i;
def_coord $rand_coord = $coord;
while ($i < 50) {
    $x = ~random_range(calc(0 - $radius), $radius);
    $z = ~random_range(calc(0 - $radius), $radius);
    $rand_coord = movecoord($coord, $x, 0, $z);
    if (lineofwalk($rand_coord, $coord) = true & map_blocked($rand_coord) = false) {
        return($rand_coord);
    }
    $i = calc($i + 1);
}
// center coord
return($coord);

// doesnt allow the random coordinate to be the same as the arg coordinate
[proc,coord_lineofwalk_radius2](coord $coord, int $radius)(coord)
def_int $x = $radius;
def_int $z = $radius;
def_int $i;
def_coord $rand_coord = $coord;
while ($i < 50) {
    $x = ~random_range(calc(0 - $radius), $radius);
    $z = ~random_range(calc(0 - $radius), $radius);
    $rand_coord = movecoord($coord, $x, 0, $z);
    if (lineofwalk($rand_coord, $coord) = true & map_blocked($rand_coord) = false & $rand_coord ! $coord) {
        return($rand_coord);
    }
    $i = calc($i + 1);
}
return($coord);

[proc,inmap](coord $coord1, coord $coord2)(boolean)
def_int $mapx1 = divide(coordx($coord1), 64);
def_int $mapz1 = divide(coordz($coord1), 64);
def_int $mapx2 = divide(coordx($coord2), 64);
def_int $mapz2 = divide(coordz($coord2), 64);
if ($mapx1 = $mapx2 & $mapz1 = $mapz2) {
    return(true);
}
return(false);

[proc,mapsquare](coord $coord)(int, int)
def_int $map_x = calc(coordx($coord) / 64);
def_int $map_z = calc(coordz($coord) / 64);
return($map_x, $map_z);

[proc,mapsquare_to_coord](int $x, int $z)(coord)
def_int $coord_x = calc($x * 64);
def_int $coord_z = calc($z * 64);
return(movecoord(0_0_0_0_0, $coord_x, 0, $coord_z));

[proc,coord_lineofsight_radius](coord $coord, int $radius)(coord)
def_int $x = $radius;
def_int $z = $radius;
def_int $i;
def_coord $rand_coord = $coord;
while ($i < 50) {
    $x = ~random_range(calc(0 - $radius), $radius);
    $z = ~random_range(calc(0 - $radius), $radius);
    $rand_coord = movecoord($coord, $x, 0, $z);
    if (lineofsight($rand_coord, $coord) = true & map_blocked($rand_coord) = false) {
        return($rand_coord);
    }
    $i = calc($i + 1);
}
// center coord
return($coord);

// 0_50_50_22_22 --> 0, 50, 50, 22, 22
[proc,coord_unpack](coord $coord)(int, int, int, int, int)
def_int $x = coordx($coord);
def_int $z = coordz($coord);
def_int $y = coordy($coord);
def_int $coordX = calc(coordx($coord) / 64);
def_int $coordZ = calc(coordz($coord) / 64);
def_int $localX = sub($x, calc($coordX * 64));
def_int $localZ = sub($z, calc($coordZ * 64));
return($y, $coordX, $coordZ, $localX, $localZ);

[proc,coord_tostring](coord $coord)(string)
def_int $x = coordx($coord);
def_int $z = coordz($coord);

def_int $y;
def_int $cx;
def_int $cz;
def_int $lx;
def_int $lz;
$y, $cx, $cz, $lx, $lz = ~coord_unpack($coord);

return("x: <tostring($x)> z: <tostring($z)> level: <tostring($y)> jcoord: <tostring($y)>_<tostring($cx)>_<tostring($cz)>_<tostring($lx)>_<tostring($lz)>");

// this is a helper proc that uses coord_pair_table in skill_firemaking\configs
// example usage:
// if (~inzone_coord_pair_table(bank_zones, coord) = true)
// useful for firemaking, random events, mithril seeds, etc.
[proc,inzone_coord_pair_table](dbrow $data, coord $coord)(boolean)
def_coord $coord1;
def_coord $coord2;
def_int $i = 0;
while($i < db_getfieldcount($data, coord_pair_table:coord_pair)) {
    $coord1, $coord2 = db_getfield($data, coord_pair_table:coord_pair, $i);
    if(inzone($coord1, $coord2, $coord) = true) {
        return (true);
    } else {
        $i = add($i, 1);
    }
}
return (false);

[proc,.inzone_coord_pair_table](dbrow $data, coord $coord)(boolean)
def_coord $coord1;
def_coord $coord2;
def_int $i = 0;
while($i < db_getfieldcount($data, coord_pair_table:coord_pair)) {
    $coord1, $coord2 = db_getfield($data, coord_pair_table:coord_pair, $i);
    if(.inzone($coord1, $coord2, $coord) = true) {
        return (true);
    } else {
        $i = add($i, 1);
    }
}
return (false);

// returns ^exact_north, ^exact_east, ^exact_south, ^exact_west
[proc,coord_direction](coord $coord1, coord $coord2)(int)
def_int $x1 = coordx($coord1);
def_int $z1 = coordz($coord1);
def_int $x2 = coordx($coord2);
def_int $z2 = coordz($coord2);

def_int $dx = sub($x2, $x1);
def_int $dz = sub($z2, $z1);
//mes("dx: <tostring($dx)>, dz: <tostring($dz)>, x1: <tostring($x1)>, z1: <tostring($z1)>, x2: <tostring($x2)>, z2: <tostring($z2)>");
// east
if ($dx > 0) {
    // check if north or south is actually better than east
    if (abs($dz) > abs($dx)) {
        if ($dz > 0) {
            return(^exact_north);
        } else {
            return(^exact_south);
        }
    }
    return(^exact_east);
} else {
    // check if north or south is actually better than west
    if (abs($dz) > abs($dx)) {
        if ($dz > 0) {
            return(^exact_north);
        } else {
            return(^exact_south);
        }
    }
    return(^exact_west);
}
return(null);

// returns ^exact_north, ^exact_east, ^exact_south, ^exact_west, ^exact_northeast, ^exact_southeast, ^exact_southwest, ^exact_northwest
[proc,coord_direction2](coord $coord1, coord $coord2)(int)
def_int $x1 = coordx($coord1);
def_int $z1 = coordz($coord1);
def_int $x2 = coordx($coord2);
def_int $z2 = coordz($coord2);

def_int $dx = sub($x2, $x1);
def_int $dz = sub($z2, $z1);
//mes("dx: <tostring($dx)>, dz: <tostring($dz)>, x1: <tostring($x1)>, z1: <tostring($z1)>, x2: <tostring($x2)>, z2: <tostring($z2)>");
// east
if ($dx > 0) {
    // if north/south are at least half of east, then return northeast/southeast
    if (abs($dx) >= divide(abs($dz), 2)) {
        if ($dz > 0) {
            return(^exact_northeast);
        } else {
            return(^exact_southeast);
        }
    }
    return(^exact_east);
} else {
    // if north/south are at least half of west, then return northwest/southwest
    if (abs($dx) >= divide(abs($dz), 2)) {
        if ($dz > 0) {
            return(^exact_northwest);
        } else {
            return(^exact_southwest);
        }
    }
    return(^exact_west);
}
// west

return(null);

[proc,movecoord_indirection](coord $coord, int $direction, int $distance)(coord)
if ($direction = ^exact_north) {
    return(movecoord($coord, 0, 0, $distance));
}
if ($direction = ^exact_east) {
    return(movecoord($coord, $distance, 0, 0));
}
if ($direction = ^exact_south) {
    return(movecoord($coord, 0, 0, calc(0 - $distance)));
}
if ($direction = ^exact_west) {
    return(movecoord($coord, calc(0 - $distance), 0, 0));
}
if ($direction = ^exact_northeast) {
    return(movecoord($coord, $distance, 0, $distance));
}
if ($direction = ^exact_southeast) {
    return(movecoord($coord, $distance, 0, calc(0 - $distance)));
}
if ($direction = ^exact_southwest) {
    return(movecoord($coord, calc(0 - $distance), 0, calc(0 - $distance)));
}
if ($direction = ^exact_northwest) {
    return(movecoord($coord, calc(0 - $distance), 0, $distance));
}
return($coord);

[proc,closest_enum_coord](coord $coord, enum $enum)(coord)
def_int $i = 0;
def_coord $closest_coord;
def_int $closest_distance = ^max_32bit_int;
while ($i < enum_getoutputcount($enum)) {
    if (~total_distance(coord, enum(int, coord, $enum, $i)) < $closest_distance) {
        $closest_coord = enum(int, coord, $enum, $i);
        $closest_distance = ~total_distance(coord, $closest_coord);
    }
    $i = calc($i + 1);
}
mes("Closest distance: <tostring($closest_distance)>");
return($closest_coord);

[proc,closest_enum_coord_and_index](coord $coord, enum $enum)(coord, int)
def_int $i = 0;
def_coord $closest_coord;
def_int $closest_distance = ^max_32bit_int;
def_int $closest_index;
while ($i < enum_getoutputcount($enum)) {
    if (~total_distance(coord, enum(int, coord, $enum, $i)) < $closest_distance) {
        $closest_coord = enum(int, coord, $enum, $i);
        $closest_index = $i;
        $closest_distance = ~total_distance(coord, $closest_coord);
    }
    $i = calc($i + 1);
}
return($closest_coord, $closest_index);

[proc,total_distance](coord $coord1, coord $coord2)(int)
def_int $x1 = coordx($coord1);
def_int $z1 = coordz($coord1);
def_int $x2 = coordx($coord2);
def_int $z2 = coordz($coord2);

def_int $dx = abs(sub($x2, $x1));
def_int $dz = abs(sub($z2, $z1));

return(add($dx, $dz));