[proc,coord_lineofwalk_radius](coord $coord, int $radius)(coord)
def_int $x = $radius;
def_int $z = $radius;
def_int $i;
def_coord $rand_coord = $coord;
while ($i < 50) {
    $x = ~random_range(calc(0 - $radius), $radius);
    $z = ~random_range(calc(0 - $radius), $radius);
    $rand_coord = movecoord($coord, $x, 0, $z);
    if (lineofwalk($rand_coord, $coord) = true & map_blocked($rand_coord) = false) {
        return($rand_coord);
    }
    $i = calc($i + 1);
}
// center coord
return($coord);

[proc,inmap](coord $coord1, coord $coord2)(boolean)
def_int $mapx1 = divide(coordx($coord1), 64);
def_int $mapz1 = divide(coordz($coord1), 64);
def_int $mapx2 = divide(coordx($coord2), 64);
def_int $mapz2 = divide(coordz($coord2), 64);
if ($mapx1 = $mapx2 & $mapz1 = $mapz2) {
    return(true);
}
return(false);

[proc,coord_lineofsight_radius](coord $coord, int $radius)(coord)
def_int $x = $radius;
def_int $z = $radius;
def_int $i;
def_coord $rand_coord = $coord;
while ($i < 50) {
    $x = ~random_range(calc(0 - $radius), $radius);
    $z = ~random_range(calc(0 - $radius), $radius);
    $rand_coord = movecoord($coord, $x, 0, $z);
    if (lineofsight($rand_coord, $coord) = true & map_blocked($rand_coord) = false) {
        return($rand_coord);
    }
    $i = calc($i + 1);
}
// center coord
return($coord);

// loops zones around a specified coord.
// the main purpose of this is to grab npc pointer efficiently
[proc,npc_within_distance](coord $coord, npc $npc, int $distance)(boolean)
// a radius of 1 will loop 9 zones
// a radius of 2 will loop 25 zones
// a radius of 3 will loop 49 zones
def_int $radius = add(1, divide($distance, 8));

def_int $x = coordx($coord);
def_int $z = coordz($coord);

def_int $centerX = divide($x, pow(2, 3));
def_int $centerZ = divide($z, pow(2, 3));

def_int $maxX = add($centerX, $radius);
def_int $minX = sub($centerX, $radius);

def_int $closet_distance = $distance;
def_npc_uid $closest_npc = null;

while ($maxX >= $minX) {
    def_int $zoneX = multiply($maxX, pow(2, 3));
    def_int $maxZ = add($centerZ, $radius);
    def_int $minZ = sub($centerZ, $radius);
    while ($maxZ >= $minZ) {
        def_int $zoneZ = multiply($maxZ, pow(2, 3));

        def_int $dx = sub($zoneX, $x);
        def_int $dz = sub($zoneZ, $z);
        def_coord $zoneCoord = movecoord(coord, $dx, 0, $dz);

        npc_findallzone($zoneCoord);
        while (npc_findnext = true) {
            if (npc_type = $npc & distance($coord, npc_coord) <= $closet_distance) {
                $closet_distance = distance($coord, npc_coord);
                $closest_npc = npc_uid;
            }
        }
        $maxZ = sub($maxZ, 1);
    }
    $maxX = sub($maxX, 1);
}
if ($closet_distance < $distance | $closest_npc ! null) {
    // set the active npc
    npc_finduid($closest_npc);
    return(true);
}
return(false);

// 0_50_50_22_22 --> 0, 50, 50, 22, 22
[proc,coord_unpack](coord $coord)(int, int, int, int, int)
def_int $x = coordx(coord);
def_int $z = coordz(coord);
def_int $y = coordy(coord);
def_int $coordX = calc($x / pow(2, 6));
def_int $coordZ = calc($z / pow(2, 6));
def_int $localX = sub($x, calc($coordX * pow(2, 6)));
def_int $localZ = sub($z, calc($coordZ * pow(2, 6)));
return($y, $coordX, $coordZ, $localX, $localZ);

[proc,coord_tostring](coord $coord)(string)
def_int $x = coordx($coord);
def_int $z = coordz($coord);

def_int $y;
def_int $cx;
def_int $cz;
def_int $lx;
def_int $lz;
$y, $cx, $cz, $lz, $lz = ~coord_unpack($coord);

return("x: <tostring($x)> z: <tostring($z)> level: <tostring($y)> jcoord: <tostring($y)>_<tostring($cx)>_<tostring($cz)>_<tostring($lx)>_<tostring($lz)>");