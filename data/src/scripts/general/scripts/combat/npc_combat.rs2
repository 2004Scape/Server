[ai_queue2,_] @npc_default_damage(1); // TODO damage
[ai_queue3,_] @npc_default_death;
[ai_opplayer2,_] ~npc_default_attack;

// a default melee attack script.
[proc,npc_default_attack]
if (%npc_action_delay > map_clock) return;
npc_anim(npc_param(attack_anim), 0);
anim(%com_defendanim, 0);
sound_synth(npc_param(attack_sound), 0, 0);
~npc_meleeattack;

// a default damage script.
[label,npc_default_damage](int $damage)
// if the npc is already dead
if (npc_stat(hitpoints) = 0) {
    return;
}
// damage the npc
if ($damage = 0) {
    npc_damage(^hitmark_block, 0);
} else {
    npc_damage(^hitmark_damage, $damage);
}
if (npc_stat(hitpoints) > 0) {
    return;
}
npc_queue(3, 0);

// a default death script.
[label,npc_default_death]
// if the npc died from this damage
npc_setmode(none);
gosub(npc_death);
if (finduid(npc_findhero) = true) {
    obj_add(npc_coord, npc_param(death_drop), 1, 200);
}

// perform a basic melee attack from the npc to the player.
[proc,npc_meleeattack]
def_int $attack_roll;
def_int $maxhit_roll;
$attack_roll, $maxhit_roll = ~npc_meleedamage;

npc_say("Clock: <tostring(map_clock)>, Attack Roll: <tostring($attack_roll)>, Max Hit: <tostring($maxhit_roll)>");

if (randominc($attack_roll) > randominc(~player_combat_defence_stat(npc_param(damagetype)))) {
    ~playerhit_n_melee(randominc($maxhit_roll), npc_param(attackrate));
    return;
}
~playerhit_n_melee(0, npc_param(attackrate));

[proc,playerhit_n_melee](int $damage, int $delay)
~damage_self($damage);
// TODO retaliation?
%npc_action_delay = add(map_clock, $delay);
%combat_logout_delay = add(map_clock, 17); // 10 seconds
