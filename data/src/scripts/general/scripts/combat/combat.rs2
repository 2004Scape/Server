[opnpc2,_]
mes("opnpc combat");
@combat_begin;

[apnpc2,_]
mes("apnpc combat");

def_int $attackrange = oc_param(inv_getobj(worn, ^equip_right_hand), attackrange);
mes("attack range is <tostring($attackrange)>");
if (npc_range(coord) > $attackrange) {
    p_aprange($attackrange);
    return;
}
@combat_begin;

// begins combat
[label,combat_begin]
if (%skill_clock >= map_clock) {
    p_opnpc(2); // TODO p_apnpc()
    return;
}

say("<tostring(map_clock)>");

def_seq $seq;
def_synth $synth;
$seq, $synth = ~combat_swing_anim_and_synth; // TODO varps

~p_combat_stat;
anim($seq, 0);
sound_synth($synth, 0, 0);
npc_queue(1, 0);
%skill_clock = add(map_clock, oc_param(inv_getobj(worn, ^equip_right_hand), attackrate));
@combat_begin;

// do a combat defend
[proc,combat_defend]
anim(~combat_defend_anim, 0);

// returns the swing anim to use for this combat
[proc,combat_swing_anim_and_synth]()(seq, synth)
switch_category (oc_category(inv_getobj(worn, ^equip_right_hand))) {
    // melee
    case weapon_2h_sword: return(~attack_2h_sword_swing);
    case weapon_axe: return(~attack_axe_swing);
    case weapon_blunt: return(~attack_blunt_swing);
    case weapon_pickaxe: return(~attack_pickaxe_swing);
    case weapon_scythe: return(~attack_scythe_swing);
    case weapon_slash: return(~attack_slashing_swing);
    case weapon_spear: return(~attack_spear_swing);
    case weapon_spiked: return(~attack_spiked_swing);
    case weapon_stab: return(~attack_stabbing_swing);
    // ranged
    case weapon_bow: return(~attack_bow_swing);
    case weapon_crossbow: return(~attack_crossbow_swing);
    case weapon_thrown, weapon_javelin: return(~attack_thrown_swing);
    // magic
    // case weapon_staff : ~weapon_category_tab_attack_battlestaff($obj);
    // unarmed everything else
    case default: return(~attack_unarmed_swing);
}

// returns the defend anim to use for this combat
[proc,combat_defend_anim]()(seq)
def_namedobj $weapon = inv_getobj(worn, ^equip_right_hand);
if ($weapon = null) {
    return(human_unarmedblock);
}
return(oc_param($weapon, defend_anim));
